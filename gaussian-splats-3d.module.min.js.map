{"version":3,"file":"gaussian-splats-3d.module.min.js","sources":["../src/loaders/UncompressedSplatArray.js","../src/loaders/PlyParser.js","../src/AbortablePromise.js","../src/Util.js","../src/loaders/LoaderStatus.js","../src/loaders/PlyLoader.js","../src/loaders/SplatBuffer.js","../src/loaders/SplatPartitioner.js","../src/loaders/SplatBufferGenerator.js","../src/loaders/SplatParser.js","../src/Constants.js","../src/loaders/SplatLoader.js","../src/loaders/KSplatLoader.js","../src/loaders/SceneFormat.js","../src/loaders/Utils.js","../src/OrbitControls.js","../src/ui/LoadingSpinner.js","../src/ui/Util.js","../src/ui/LoadingProgressBar.js","../src/ui/InfoPanel.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/SplatScene.js","../src/splattree/SplatTree.js","../src/three-shim/WebGLExtensions.js","../src/three-shim/WebGLCapabilities.js","../src/SplatMesh.js","../src/worker/SortWorker.js","../src/webxr/WebXRMode.js","../src/webxr/VRButton.js","../src/webxr/ARButton.js","../src/Viewer.js","../src/worker/sorter.wasm","../src/DropInViewer.js"],"sourcesContent":["\nexport class UncompressedSplatArray {\n\n    static OFFSET = {\n        X: 0,\n        Y: 1,\n        Z: 2,\n        SCALE0: 3,\n        SCALE1: 4,\n        SCALE2: 5,\n        ROTATION0: 6,\n        ROTATION1: 7,\n        ROTATION2: 8,\n        ROTATION3: 9,\n        FDC0: 10,\n        FDC1: 11,\n        FDC2: 12,\n        OPACITY: 13\n    };\n\n    constructor() {\n        this.splats = [];\n        this.splatCount = 0;\n    }\n\n    addSplat(splat) {\n        this.splats.push(splat);\n        this.splatCount++;\n    }\n\n    addDefaultSplat() {\n        const newSplat = [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n        this.addSplat(newSplat);\n        return newSplat;\n    }\n\n    addSplatFromComonents(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity) {\n        const newSplat = [x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity];\n        this.addSplat(newSplat);\n        return newSplat;\n    }\n\n    addSplatFromArray(src, srcIndex) {\n        const srcSplat = src.splats[srcIndex];\n        this.addSplatFromComonents(srcSplat[0], srcSplat[1], srcSplat[2], srcSplat[3], srcSplat[4], srcSplat[5],\n                                   srcSplat[6], srcSplat[7], srcSplat[8], srcSplat[9],\n                                   srcSplat[10], srcSplat[11], srcSplat[12], srcSplat[13]);\n    }\n}\n","import { UncompressedSplatArray } from './UncompressedSplatArray.js';\n\nexport class PlyParser {\n\n    static HeaderEndToken = 'end_header';\n\n    constructor(plyBuffer) {\n        this.plyBuffer = plyBuffer;\n    }\n\n    static decodeHeader(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n\n        // console.log('.PLY size: ' + plyBuffer.byteLength + ' bytes');\n\n        const readChunkSize = 100;\n\n        while (true) {\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n                throw new Error('End of file reached while searching for end of header');\n            }\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += readChunkSize;\n\n            const endHeaderTestChunk = new Uint8Array(plyBuffer, Math.max(0, headerOffset - readChunkSize * 2), readChunkSize * 2);\n            const endHeaderTestText = decoder.decode(endHeaderTestChunk);\n            if (endHeaderTestText.includes('end_header')) {\n                break;\n            }\n        }\n\n        const headerLines = headerText.split('\\n');\n\n        let splatCount = 0;\n        let propertyTypes = {};\n\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            if (line.startsWith('element vertex')) {\n                const splatCountMatch = line.match(/\\d+/);\n                if (splatCountMatch) {\n                    splatCount = parseInt(splatCountMatch[0]);\n                }\n            } else if (line.startsWith('property')) {\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (propertyMatch) {\n                    const propertyType = propertyMatch[2];\n                    const propertyName = propertyMatch[3];\n                    propertyTypes[propertyName] = propertyType;\n                }\n            } else if (line === 'end_header') {\n                break;\n            }\n        }\n\n        const vertexByteOffset = headerText.indexOf('end_header') + PlyParser.HeaderEndToken.length + 1;\n        const vertexData = new DataView(plyBuffer, vertexByteOffset);\n\n        return {\n            'splatCount': splatCount,\n            'propertyTypes': propertyTypes,\n            'vertexData': vertexData,\n            'headerOffset': headerOffset\n        };\n    }\n\n    static readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\n        let rawVertex = outVertex || {};\n        for (let property of propertiesToRead) {\n            const propertyType = propertyTypes[property];\n            if (propertyType === 'float') {\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\n            } else if (propertyType === 'uchar') {\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\n            }\n        }\n    }\n\n    parseToUncompressedSplatArray() {\n\n        // const startTime = performance.now();\n\n        // console.log('Parsing PLY to SPLAT...');\n\n        const {splatCount, propertyTypes, vertexData} = PlyParser.decodeHeader(this.plyBuffer);\n\n        // figure out the SH degree from the number of coefficients\n        let nRestCoeffs = 0;\n        for (const propertyName in propertyTypes) {\n            if (propertyName.startsWith('f_rest_')) {\n                nRestCoeffs += 1;\n            }\n        }\n        const nCoeffsPerColor = nRestCoeffs / 3;\n\n        // TODO: Eventually properly support multiple degree spherical harmonics\n        // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\n        // const sphericalHarmonicsDegree = 0;\n        // console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\n\n        // figure out the order in which spherical harmonics should be read\n        const shFeatureOrder = [];\n        for (let rgb = 0; rgb < 3; ++rgb) {\n            shFeatureOrder.push(`f_dc_${rgb}`);\n        }\n        for (let i = 0; i < nCoeffsPerColor; ++i) {\n            for (let rgb = 0; rgb < 3; ++rgb) {\n                shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\n            }\n        }\n\n        let plyRowSize = 0;\n        let fieldOffsets = {};\n        const fieldSize = {\n            'double': 8,\n            'int': 4,\n            'uint': 4,\n            'float': 4,\n            'short': 2,\n            'ushort': 2,\n            'uchar': 1,\n        };\n        for (let fieldName in propertyTypes) {\n            if (propertyTypes.hasOwnProperty(fieldName)) {\n                const type = propertyTypes[fieldName];\n                fieldOffsets[fieldName] = plyRowSize;\n                plyRowSize += fieldSize[type];\n            }\n        }\n\n        let rawVertex = {};\n\n        const propertiesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\n                                  'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity'];\n\n        const splatArray = new UncompressedSplatArray();\n\n        for (let row = 0; row < splatCount; row++) {\n            PlyParser.readRawVertexFast(vertexData, row * plyRowSize, fieldOffsets, propertiesToRead, propertyTypes, rawVertex);\n            const newSplat = splatArray.addDefaultSplat();\n            if (rawVertex['scale_0'] !== undefined) {\n                newSplat[UncompressedSplatArray.OFFSET.SCALE0] = Math.exp(rawVertex['scale_0']);\n                newSplat[UncompressedSplatArray.OFFSET.SCALE1] = Math.exp(rawVertex['scale_1']);\n                newSplat[UncompressedSplatArray.OFFSET.SCALE2] = Math.exp(rawVertex['scale_2']);\n            } else {\n                newSplat[UncompressedSplatArray.OFFSET.SCALE0] = 0.01;\n                newSplat[UncompressedSplatArray.OFFSET.SCALE1] = 0.01;\n                newSplat[UncompressedSplatArray.OFFSET.SCALE2] = 0.01;\n            }\n\n            if (rawVertex['f_dc_0'] !== undefined) {\n                const SH_C0 = 0.28209479177387814;\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = (0.5 + SH_C0 * rawVertex['f_dc_0']) * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = (0.5 + SH_C0 * rawVertex['f_dc_1']) * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = (0.5 + SH_C0 * rawVertex['f_dc_2']) * 255;\n            } else {\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = 0;\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = 0;\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = 0;\n            }\n            if (rawVertex['opacity'] !== undefined) {\n                newSplat[UncompressedSplatArray.OFFSET.OPACITY] = (1 / (1 + Math.exp(-rawVertex['opacity']))) * 255;\n            }\n\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION0] = rawVertex['rot_0'];\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION1] = rawVertex['rot_1'];\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION2] = rawVertex['rot_2'];\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION3] = rawVertex['rot_3'];\n\n            newSplat[UncompressedSplatArray.OFFSET.X] = rawVertex['x'];\n            newSplat[UncompressedSplatArray.OFFSET.Y] = rawVertex['y'];\n            newSplat[UncompressedSplatArray.OFFSET.Z] = rawVertex['z'];\n        }\n\n        return splatArray;\n\n        // console.log('Total valid splats: ', splatBuffer.getSplatCount(), 'out of', splatCount);\n\n        // const endTime = performance.now();\n\n        // console.log('Parsing PLY to SPLAT complete!');\n        // console.log('Total time: ', (endTime - startTime).toFixed(2) + ' ms');\n    }\n\n}\n","/**\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\n *\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\n */\nexport class AbortablePromise {\n\n    static idGen = 0;\n\n    constructor(promiseFunc, abortHandler) {\n\n        let promiseResolve;\n        let promiseReject;\n        this.promise = new Promise((resolve, reject) => {\n            promiseResolve = resolve.bind(this);\n            promiseReject = reject.bind(this);\n        });\n\n        const resolve = (...args) => {\n            promiseResolve(...args);\n        };\n\n        const reject = (error) => {\n            promiseReject(error);\n        };\n\n        promiseFunc(resolve.bind(this), reject.bind(this));\n        this.abortHandler = abortHandler;\n        this.id = AbortablePromise.idGen++;\n    }\n\n    then(onResolve) {\n        return new AbortablePromise((resolve, reject) => {\n            this.promise = this.promise\n            .then((...args) => {\n                const onResolveResult = onResolve(...args);\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\n                    onResolveResult.then((...args2) => {\n                        resolve(...args2);\n                    });\n                } else {\n                    resolve(onResolveResult);\n                }\n            })\n            .catch((error) => {\n                reject(error);\n            });\n        }, this.abortHandler);\n    }\n\n    catch(onFail) {\n        return new AbortablePromise((resolve) => {\n            this.promise = this.promise.then((...args) => {\n                resolve(...args);\n            })\n            .catch(onFail);\n        }, this.abortHandler);\n    }\n\n    abort() {\n        if (this.abortHandler) this.abortHandler();\n    }\n\n}\n\nexport class AbortedPromiseError extends Error {\n\n    constructor(msg) {\n        super(msg);\n    }\n\n}\n","import { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\n\nexport const floatToHalf = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(val) {\n        floatView[0] = val;\n        const x = int32View[0];\n\n        let bits = (x >> 16) & 0x8000;\n        let m = (x >> 12) & 0x07ff;\n        const e = (x >> 23) & 0xff;\n\n        if (e < 103) return bits;\n\n        if (e > 142) {\n            bits |= 0x7c00;\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\n            return bits;\n        }\n\n        if (e < 113) {\n            m |= 0x0800;\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n            return bits;\n        }\n\n        bits |= (( e - 112) << 10) | (m >> 1);\n        bits += m & 1;\n        return bits;\n    };\n\n}();\n\nexport const uintEncodedFloat = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(f) {\n        floatView[0] = f;\n        return int32View[0];\n    };\n\n}();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n    return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const rgbaArrayToInteger = function(arr, offset) {\n    return arr[offset] + (arr[offset + 1] << 8) + (arr[offset + 2] << 16) + (arr[offset + 3] << 24);\n};\n\nexport const fetchWithProgress = function(path, onProgress, saveChunks = true) {\n\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    let aborted = false;\n    let rejectFunc = null;\n    const abortHandler = () => {\n        abortController.abort();\n        rejectFunc(new AbortedPromiseError('Fetch aborted.'));\n        aborted = true;\n    };\n\n    return new AbortablePromise((resolve, reject) => {\n        rejectFunc = reject;\n        fetch(path, { signal })\n        .then(async (data) => {\n            const reader = data.body.getReader();\n            let bytesDownloaded = 0;\n            let _fileSize = data.headers.get('Content-Length');\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n            const chunks = [];\n\n            while (!aborted) {\n                try {\n                    const { value: chunk, done } = await reader.read();\n                    if (done) {\n                        if (onProgress) {\n                            onProgress(100, '100%', chunk, fileSize);\n                        }\n                        if (saveChunks) {\n                            const buffer = new Blob(chunks).arrayBuffer();\n                            resolve(buffer);\n                        } else {\n                            resolve();\n                        }\n                        break;\n                    }\n                    bytesDownloaded += chunk.length;\n                    let percent;\n                    let percentLabel;\n                    if (fileSize !== undefined) {\n                        percent = bytesDownloaded / fileSize * 100;\n                        percentLabel = `${percent.toFixed(2)}%`;\n                    }\n                    if (saveChunks) chunks.push(chunk);\n                    if (onProgress) {\n                        const cancelSaveChucnks = onProgress(percent, percentLabel, chunk, fileSize);\n                        if (cancelSaveChucnks) saveChunks = false;\n                    }\n                } catch (error) {\n                    reject(error);\n                    break;\n                }\n            }\n        });\n    }, abortHandler);\n\n};\n\nexport const clamp = function(val, min, max) {\n    return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n    return performance.now() / 1000;\n};\n\nexport const disposeAllMeshes = (object3D) => {\n    if (object3D.geometry) {\n        object3D.geometry.dispose();\n        object3D.geometry = null;\n    }\n    if (object3D.material) {\n        object3D.material.dispose();\n        object3D.material = null;\n    }\n    if (object3D.children) {\n        for (let child of object3D.children) {\n            disposeAllMeshes(child);\n        }\n    }\n};\n\nexport const delayedExecute = (func) => {\n    return new Promise((resolve) => {\n        window.setTimeout(() => {\n            resolve(func());\n        }, 1);\n    });\n};\n","export const LoaderStatus = {\n    'Downloading': 0,\n    'Processing': 1,\n    'Done': 2\n};\n","import { PlyParser } from './PlyParser.js';\nimport { fetchWithProgress, delayedExecute } from '../Util.js';\nimport { LoaderStatus } from './LoaderStatus.js';\n\nexport class PlyLoader {\n\n    constructor() {\n        this.splatBuffer = null;\n    }\n\n    loadFromURL(fileName, onProgress, compressionLevel, minimumAlpha, sectionSize, sceneCenter, blockSize, bucketSize) {\n        const downloadProgress = (percent, percentLabel) => {\n            if (onProgress) onProgress(percent, percentLabel, LoaderStatus.Downloading);\n        };\n        return fetchWithProgress(fileName, downloadProgress).then((plyFileData) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            return delayedExecute(() => {\n                return new PlyParser(plyFileData).parseToUncompressedSplatArray();\n            });\n        })\n        .then((splatArray) => {\n            const splatBufferGenerator = GaussianSplats3D.SplatBufferGenerator.getStandardGenerator(minimumAlpha,\n                                                                                                    compressionLevel, sectionSize,\n                                                                                                    sceneCenter, blockSize, bucketSize);\n            const splatBuffer = splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\n            if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n            return splatBuffer;\n        });\n    }\n\n}\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { clamp } from '../Util.js';\n\n/**\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\n */\nexport class SplatBuffer {\n\n    static CenterComponentCount = 3;\n    static ScaleComponentCount = 3;\n    static RotationComponentCount = 4;\n    static ColorComponentCount = 4;\n    static CovarianceComponentCount = 6;\n\n    static SplatScaleOffsetFloat = 3;\n    static SplatRotationOffsetFloat = 6;\n\n    static CompressionLevels = {\n        0: {\n            BytesPerCenter: 12,\n            BytesPerColor: 4,\n            BytesPerScale: 12,\n            BytesPerRotation: 16,\n            BytesPerSplat: 44,\n            ScaleRange: 1\n        },\n        1: {\n            BytesPerCenter: 6,\n            BytesPerColor: 4,\n            BytesPerScale: 6,\n            BytesPerRotation: 8,\n            BytesPerSplat: 24,\n            ScaleRange: 32767\n        }\n    };\n\n    static CovarianceSizeFloats = 6;\n\n    static HeaderSizeBytes = 4096;\n    static SectionHeaderSizeBytes = 1024;\n\n    static BucketStorageSizeBytes = 12;\n    static BucketStorageSizeFloats = 3;\n\n    static BucketBlockSize = 5.0;\n    static BucketSize = 256;\n\n    constructor(bufferData, secLoadedCountsToMax = true) {\n        this.constructFromBuffer(bufferData, secLoadedCountsToMax);\n    }\n\n    fbf(f) {\n        if (this.compressionLevel === 0) {\n            return f;\n        } else {\n            return THREE.DataUtils.fromHalfFloat(f);\n        }\n    };\n\n    getSplatCount() {\n        return this.splatCount;\n    }\n\n    getMaxSplatCount() {\n        return this.maxSplatCount;\n    }\n\n    getBucketIndex(section, localSplatIndex) {\n        let bucketIndex;\n        const maxSplatIndexInFullBuckets = section.fullBucketCount * section.bucketSize;\n        if (localSplatIndex < maxSplatIndexInFullBuckets) {\n            bucketIndex = Math.floor(localSplatIndex / section.bucketSize);\n        } else {\n            let bucketSplatIndex = maxSplatIndexInFullBuckets;\n            bucketIndex = section.fullBucketCount;\n            let partiallyFullBucketIndex = 0;\n            while (bucketSplatIndex < section.splatCount) {\n                let currentPartiallyFilledBucketSize = section.partiallyFilledBucketLengths[partiallyFullBucketIndex];\n                if (localSplatIndex >= bucketSplatIndex && localSplatIndex < bucketSplatIndex + currentPartiallyFilledBucketSize) {\n                    break;\n                }\n                bucketSplatIndex += currentPartiallyFilledBucketSize;\n                bucketIndex++;\n                partiallyFullBucketIndex++;\n            }\n        }\n        return bucketIndex;\n    }\n\n    getSplatCenter(globalSplatIndex, outCenter, transform) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n        if (this.compressionLevel === 1) {\n            const centerBase = localSplatIndex * this.uint16PerSplat;\n            const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n            const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n            const sf = section.compressionScaleFactor;\n            const sr = section.compressionScaleRange;\n            outCenter.x = (section.dataArrayUint16[centerBase] - sr) * sf + section.bucketArray[bucketBase];\n            outCenter.y = (section.dataArrayUint16[centerBase + 1] - sr) * sf + section.bucketArray[bucketBase + 1];\n            outCenter.z = (section.dataArrayUint16[centerBase + 2] - sr) * sf + section.bucketArray[bucketBase + 2];\n        } else {\n            const centerBase = localSplatIndex * this.float32PerSplat;\n            outCenter.x = section.dataArrayFloat32[centerBase];\n            outCenter.y = section.dataArrayFloat32[centerBase + 1];\n            outCenter.z = section.dataArrayFloat32[centerBase + 2];\n        }\n        if (transform) outCenter.applyMatrix4(transform);\n    }\n\n    getSplatScaleAndRotation = function() {\n\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const tempMatrix = new THREE.Matrix4();\n        const tempPosition = new THREE.Vector3();\n\n        return function(index, outScale, outRotation, transform) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[index];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = index - section.splatCountOffset;\n\n            const floatsPerSplat = this.compressionLevel === 1 ? this.uint16PerSplat : this.float32PerSplat;\n\n            const sectionFloatArray = this.compressionLevel === 1 ? section.dataArrayUint16 : section.dataArrayFloat32;\n            const splatFloatBase = floatsPerSplat * localSplatIndex;\n\n            const scaleBase = splatFloatBase + SplatBuffer.SplatScaleOffsetFloat;\n            outScale.set(this.fbf(sectionFloatArray[scaleBase]),\n                         this.fbf(sectionFloatArray[scaleBase + 1]),\n                         this.fbf(sectionFloatArray[scaleBase + 2]));\n\n            const rotationBase = splatFloatBase + SplatBuffer.SplatRotationOffsetFloat;\n            outRotation.set(this.fbf(sectionFloatArray[rotationBase + 1]),\n                            this.fbf(sectionFloatArray[rotationBase + 2]),\n                            this.fbf(sectionFloatArray[rotationBase + 3]),\n                            this.fbf(sectionFloatArray[rotationBase]));\n\n            if (transform) {\n                scaleMatrix.makeScale(outScale.x, outScale.y, outScale.z);\n                rotationMatrix.makeRotationFromQuaternion(outRotation);\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\n            }\n        };\n\n    }();\n\n    getSplatColor(globalSplatIndex, outColor, transform) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n        const colorBase = this.bytesPerSplat * localSplatIndex + this.bytesPerCenter + this.bytesPerScale + this.bytesPerRotation;\n        outColor.set(section.dataArrayUint8[colorBase], section.dataArrayUint8[colorBase + 1],\n                     section.dataArrayUint8[colorBase + 2], section.dataArrayUint8[colorBase + 3]);\n        // TODO: apply transform for spherical harmonics\n    }\n\n    fillSplatCenterArray(outCenterArray, transform, srcFrom, srcTo, destFrom) {\n        const splatCount = this.splatCount;\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n\n        const center = new THREE.Vector3();\n        for (let i = srcFrom; i <= srcTo; i++) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n            const centerDestBase = (i - srcFrom + destFrom) * SplatBuffer.CenterComponentCount;\n            if (this.compressionLevel === 1) {\n                const centerBase = localSplatIndex * this.uint16PerSplat;\n                const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n                const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n                const sf = section.compressionScaleFactor;\n                const sr = section.compressionScaleRange;\n                center.x = (section.dataArrayUint16[centerBase] - sr) * sf + section.bucketArray[bucketBase];\n                center.y = (section.dataArrayUint16[centerBase + 1] - sr) * sf + section.bucketArray[bucketBase + 1];\n                center.z = (section.dataArrayUint16[centerBase + 2] - sr) * sf + section.bucketArray[bucketBase + 2];\n            } else {\n                const centerBase = localSplatIndex * this.float32PerSplat;\n                center.x = section.dataArrayFloat32[centerBase];\n                center.y = section.dataArrayFloat32[centerBase + 1];\n                center.z = section.dataArrayFloat32[centerBase + 2];\n            }\n            if (transform) {\n                center.applyMatrix4(transform);\n            }\n            outCenterArray[centerDestBase] = center.x;\n            outCenterArray[centerDestBase + 1] = center.y;\n            outCenterArray[centerDestBase + 2] = center.z;\n        }\n    }\n\n    static computeCovariance = function() {\n\n        const tempMatrix4 = new THREE.Matrix4();\n        const scaleMatrix = new THREE.Matrix3();\n        const rotationMatrix = new THREE.Matrix3();\n        const covarianceMatrix = new THREE.Matrix3();\n        const transformedCovariance = new THREE.Matrix3();\n        const transform3x3 = new THREE.Matrix3();\n        const transform3x3Transpose = new THREE.Matrix3();\n        const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\n\n        return function(scale, rotation, transform, outCovariance, outOffset = 0, desiredOutputCompressionLevel) {\n\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n            scaleMatrix.setFromMatrix4(tempMatrix4);\n\n            tempMatrix4.makeRotationFromQuaternion(rotation);\n            rotationMatrix.setFromMatrix4(tempMatrix4);\n\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\n\n            if (transform) {\n                transform3x3.setFromMatrix4(transform);\n                transform3x3Transpose.copy(transform3x3).transpose();\n                transformedCovariance.multiply(transform3x3Transpose);\n                transformedCovariance.premultiply(transform3x3);\n            }\n\n            if (desiredOutputCompressionLevel === 1) {\n                outCovariance[outOffset] = thf(transformedCovariance.elements[0]);\n                outCovariance[outOffset + 1] = thf(transformedCovariance.elements[3]);\n                outCovariance[outOffset + 2] = thf(transformedCovariance.elements[6]);\n                outCovariance[outOffset + 3] = thf(transformedCovariance.elements[4]);\n                outCovariance[outOffset + 4] = thf(transformedCovariance.elements[7]);\n                outCovariance[outOffset + 5] = thf(transformedCovariance.elements[8]);\n            } else {\n                outCovariance[outOffset] = transformedCovariance.elements[0];\n                outCovariance[outOffset + 1] = transformedCovariance.elements[3];\n                outCovariance[outOffset + 2] = transformedCovariance.elements[6];\n                outCovariance[outOffset + 3] = transformedCovariance.elements[4];\n                outCovariance[outOffset + 4] = transformedCovariance.elements[7];\n                outCovariance[outOffset + 5] = transformedCovariance.elements[8];\n            }\n\n        };\n\n    }();\n\n    fillSplatCovarianceArray(covarianceArray, transform, srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\n        const splatCount = this.splatCount;\n\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n        const floatsPerSplat = this.compressionLevel === 1 ? this.uint16PerSplat : this.float32PerSplat;\n\n        for (let i = srcFrom; i <= srcTo; i++) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n\n            const sectionFloatArray = this.compressionLevel === 1 ? section.dataArrayUint16 : section.dataArrayFloat32;\n            const splatFloatBase = floatsPerSplat * localSplatIndex;\n            const covarianceDestBase = (i - srcFrom + destFrom) * SplatBuffer.CovarianceComponentCount;\n\n            const scaleBase = splatFloatBase + SplatBuffer.SplatScaleOffsetFloat;\n            scale.set(this.fbf(sectionFloatArray[scaleBase]),\n                      this.fbf(sectionFloatArray[scaleBase + 1]),\n                      this.fbf(sectionFloatArray[scaleBase + 2]));\n\n            const rotationBase = splatFloatBase + SplatBuffer.SplatRotationOffsetFloat;\n            rotation.set(this.fbf(sectionFloatArray[rotationBase + 1]),\n                         this.fbf(sectionFloatArray[rotationBase + 2]),\n                         this.fbf(sectionFloatArray[rotationBase + 3]),\n                         this.fbf(sectionFloatArray[rotationBase]));\n\n            SplatBuffer.computeCovariance(scale, rotation, transform, covarianceArray, covarianceDestBase, desiredOutputCompressionLevel);\n        }\n    }\n\n    fillSplatColorArray(outColorArray, transform, srcFrom, srcTo, destFrom) {\n        const splatCount = this.splatCount;\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n        const splatColorOffset = this.bytesPerCenter + this.bytesPerScale + this.bytesPerRotation;\n\n        for (let i = srcFrom; i <= srcTo; i++) {\n\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n\n            const colorSrcBase = this.bytesPerSplat * localSplatIndex + splatColorOffset;\n            const colorDestBase = (i - srcFrom + destFrom) * SplatBuffer.ColorComponentCount;\n\n            outColorArray[colorDestBase] = section.dataArrayUint8[colorSrcBase];\n            outColorArray[colorDestBase + 1] = section.dataArrayUint8[colorSrcBase + 1];\n            outColorArray[colorDestBase + 2] = section.dataArrayUint8[colorSrcBase + 2];\n            outColorArray[colorDestBase + 3] = section.dataArrayUint8[colorSrcBase + 3];\n\n            // TODO: implement application of transform for spherical harmonics\n        }\n    }\n\n    static parseHeader(buffer) {\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const versionMajor = headerArrayUint8[0];\n        const versionMinor = headerArrayUint8[1];\n        const maxSectionCount = headerArrayUint32[1];\n        const sectionCount = headerArrayUint32[2];\n        const maxSplatCount = headerArrayUint32[3];\n        const splatCount = headerArrayUint32[4];\n        const compressionLevel = headerArrayUint16[10];\n        const sceneCenter = new THREE.Vector3(headerArrayFloat32[6], headerArrayFloat32[7], headerArrayFloat32[8]);\n\n        return {\n            versionMajor,\n            versionMinor,\n            maxSectionCount,\n            sectionCount,\n            maxSplatCount,\n            splatCount,\n            compressionLevel,\n            sceneCenter\n        };\n    }\n\n    static writeHeaderCountsToBuffer(sectionCount, splatCount, buffer) {\n        const headerArrayUint32 = new Uint32Array(buffer);\n        headerArrayUint32[2] = sectionCount;\n        headerArrayUint32[4] = splatCount;\n    }\n\n    static writeHeaderToBuffer(header, buffer) {\n        const headerArrayUint8 = new Uint8Array(buffer);\n        const headerArrayUint32 = new Uint32Array(buffer);\n        const headerArrayFloat32 = new Float32Array(buffer);\n        const headerArrayUint16 = new Uint16Array(buffer);\n        headerArrayUint8[0] = header.versionMajor;\n        headerArrayUint8[1] = header.versionMinor;\n        headerArrayUint8[2] = 0; // unused for now\n        headerArrayUint8[3] = 0; // unused for now\n        headerArrayUint32[1] = header.maxSectionCount;\n        headerArrayUint32[2] = header.sectionCount;\n        headerArrayUint32[3] = header.maxSplatCount;\n        headerArrayUint32[4] = header.splatCount;\n        headerArrayUint16[10] = header.compressionLevel;\n        headerArrayFloat32[6] = header.sceneCenter.x;\n        headerArrayFloat32[7] = header.sceneCenter.y;\n        headerArrayFloat32[8] = header.sceneCenter.z;\n    }\n\n    static parseSectionHeaders(header, buffer, offset = 0, secLoadedCountsToMax) {\n        const compressionLevel = header.compressionLevel;\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n\n        const maxSectionCount = header.maxSectionCount;\n        const sectionHeaderArrayUint16 = new Uint16Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 2);\n        const sectionHeaderArrayUint32 = new Uint32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\n        const sectionHeaderArrayFloat32 = new Float32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\n\n        const sectionHeaders = [];\n        let sectionHeaderBase = 0;\n        let sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n        let sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n        let sectionBase = SplatBuffer.HeaderSizeBytes + header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes;\n        let splatCountOffset = 0;\n        for (let i = 0; i < maxSectionCount; i++) {\n            const maxSplatCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 1];\n            const bucketSize = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 2];\n            const bucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 3];\n            const bucketBlockSize = sectionHeaderArrayFloat32[sectionHeaderBaseUint32 + 4];\n            const halfBucketBlockSize = bucketBlockSize / 2.0;\n            const bucketStorageSizeBytes = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 10];\n            const compressionScaleRange = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 6] ||\n                                          SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n            const fullBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 8];\n            const partiallyFilledBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 9];\n            const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n            const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\n\n            const splatDataStorageSizeBytes = (bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor) * maxSplatCount;\n            const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;\n            const sectionHeader = {\n                splatCountOffset: splatCountOffset,\n                splatCount: secLoadedCountsToMax ? maxSplatCount : 0,\n                maxSplatCount: maxSplatCount,\n                bucketSize: bucketSize,\n                bucketCount: bucketCount,\n                bucketBlockSize: bucketBlockSize,\n                halfBucketBlockSize: halfBucketBlockSize,\n                bucketStorageSizeBytes: bucketStorageSizeBytes,\n                bucketsStorageSizeBytes: bucketsStorageSizeBytes,\n                splatDataStorageSizeBytes: splatDataStorageSizeBytes,\n                storageSizeBytes: storageSizeBytes,\n                compressionScaleRange: compressionScaleRange,\n                compressionScaleFactor: halfBucketBlockSize / compressionScaleRange,\n                base: sectionBase,\n                bucketsBase: sectionBase + bucketsMetaDataSizeBytes,\n                dataBase: sectionBase + bucketsStorageSizeBytes,\n                fullBucketCount: fullBucketCount,\n                partiallyFilledBucketCount: partiallyFilledBucketCount\n            };\n            sectionHeaders[i] = sectionHeader;\n            sectionBase += storageSizeBytes;\n            sectionHeaderBase += SplatBuffer.SectionHeaderSizeBytes;\n            sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n            sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n            splatCountOffset += maxSplatCount;\n        }\n\n        return sectionHeaders;\n    }\n\n\n    static writeSectionHeaderToBuffer(sectionHeader, compressionLevel, buffer, offset = 0) {\n        const sectionHeadeArrayUint16 = new Uint16Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 2);\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n        const sectionHeadeArrayFloat32 = new Float32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n\n        sectionHeadeArrayUint32[0] = sectionHeader.splatCount;\n        sectionHeadeArrayUint32[1] = sectionHeader.maxSplatCount;\n        sectionHeadeArrayUint32[2] = compressionLevel === 1 ? sectionHeader.bucketSize : 0;\n        sectionHeadeArrayUint32[3] = compressionLevel === 1 ? sectionHeader.bucketCount : 0;\n        sectionHeadeArrayFloat32[4] = compressionLevel === 1 ? sectionHeader.bucketBlockSize : 0.0;\n        sectionHeadeArrayUint16[10] = compressionLevel === 1 ? SplatBuffer.BucketStorageSizeBytes : 0;\n        sectionHeadeArrayUint32[6] = compressionLevel === 1 ? sectionHeader.compressionScaleRange : 0;\n        sectionHeadeArrayUint32[7] = sectionHeader.storageSizeBytes;\n        sectionHeadeArrayUint32[8] = compressionLevel === 1 ? sectionHeader.fullBucketCount : 0;\n        sectionHeadeArrayUint32[9] = compressionLevel === 1 ? sectionHeader.partiallyFilledBucketCount : 0;\n    }\n\n    static writeSectionHeaderSplatCountToBuffer(splatCount, buffer, offset = 0) {\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n        sectionHeadeArrayUint32[0] = splatCount;\n    }\n\n    constructFromBuffer(bufferData, secLoadedCountsToMax) {\n        this.bufferData = bufferData;\n\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSectionMap = [];\n\n        const header = SplatBuffer.parseHeader(this.bufferData);\n        this.versionMajor = header.versionMajor;\n        this.versionMinor = header.versionMinor;\n        this.maxSectionCount = header.maxSectionCount;\n        this.sectionCount = secLoadedCountsToMax ? header.maxSectionCount : 0;\n        this.maxSplatCount = header.maxSplatCount;\n        this.splatCount = secLoadedCountsToMax ? header.maxSplatCount : 0;\n        this.compressionLevel = header.compressionLevel;\n        this.sceneCenter = new THREE.Vector3().copy(header.sceneCenter);\n\n        this.bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\n        this.bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\n        this.bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\n        this.bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\n        this.bytesPerSplat = this.bytesPerCenter + this.bytesPerScale + this.bytesPerRotation + this.bytesPerColor;\n\n        this.float32PerSplat = this.bytesPerSplat / 4;\n        this.uint32PerSplat = this.bytesPerSplat / 4;\n        this.uint16PerSplat = this.bytesPerSplat / 2;\n\n        this.sections = SplatBuffer.parseSectionHeaders(header, this.bufferData, SplatBuffer.HeaderSizeBytes, secLoadedCountsToMax);\n\n        this.linkBufferArrays();\n        this.buildMaps();\n    }\n\n\n    linkBufferArrays() {\n        for (let i = 0; i < this.maxSectionCount; i++) {\n            const section = this.sections[i];\n            section.dataArrayUint8 = new Uint8Array(this.bufferData, section.dataBase, section.maxSplatCount * this.bytesPerSplat);\n            section.dataArrayUint16 = new Uint16Array(this.bufferData, section.dataBase, section.maxSplatCount * this.uint16PerSplat);\n            section.dataArrayUint32 = new Uint32Array(this.bufferData, section.dataBase, section.maxSplatCount * this.uint32PerSplat);\n            section.dataArrayFloat32 = new Float32Array(this.bufferData, section.dataBase, section.maxSplatCount * this.float32PerSplat);\n            section.bucketArray = new Float32Array(this.bufferData, section.bucketsBase,\n                                                   section.bucketCount * SplatBuffer.BucketStorageSizeFloats);\n            if (section.partiallyFilledBucketCount > 0) {\n                section.partiallyFilledBucketLengths = new Uint32Array(this.bufferData, section.base,\n                                                                       section.partiallyFilledBucketCount);\n            }\n        }\n    }\n\n    buildMaps() {\n        let cumulativeSplatCount = 0;\n        for (let i = 0; i < this.maxSectionCount; i++) {\n            const section = this.sections[i];\n            for (let j = 0; j < section.maxSplatCount; j++) {\n                const globalSplatIndex = cumulativeSplatCount + j;\n                this.globalSplatIndexToLocalSplatIndexMap[globalSplatIndex] = j;\n                this.globalSplatIndexToSectionMap[globalSplatIndex] = i;\n            }\n            cumulativeSplatCount += section.maxSplatCount;\n        }\n    }\n\n    updateLoadedCounts(newSectionCount, newSplatCount) {\n        SplatBuffer.writeHeaderCountsToBuffer(newSectionCount, newSplatCount, this.bufferData);\n        this.sectionCount = newSectionCount;\n        this.splatCount = newSplatCount;\n    }\n\n    updateSectionLoadedCounts(sectionIndex, newSplatCount) {\n        const sectionHeaderOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * sectionIndex;\n        SplatBuffer.writeSectionHeaderSplatCountToBuffer(newSplatCount, this.bufferData, sectionHeaderOffset);\n        this.sections[sectionIndex].splatCount = newSplatCount;\n    }\n\n    static generateFromUncompressedSplatArrays(splatArrays, minimumAlpha, compressionLevel,\n                                               sceneCenter, blockSize, bucketSize, options = []) {\n\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n        const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor;\n        const compressionScaleRange = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n\n        const sectionBuffers = [];\n        const sectionHeaderBuffers = [];\n        let totalSplatCount = 0;\n\n        const tempRotation = new THREE.Quaternion();\n        const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\n\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\n            const splatArray = splatArrays[sa];\n\n            const sectionOptions = options[sa] || {};\n\n            const sectionBlockSize = (sectionOptions.blockSizeFactor || 1) * (blockSize || SplatBuffer.BucketBlockSize);\n            const sectionBucketSize = Math.ceil((sectionOptions.bucketSizeFactor || 1) * (bucketSize || SplatBuffer.BucketSize));\n\n            const validSplats = new UncompressedSplatArray();\n\n            for (let i = 0; i < splatArray.splatCount; i++) {\n                const targetSplat = splatArray.splats[i];\n                let alpha;\n                if (targetSplat[UncompressedSplatArray.OFFSET.OPACITY]) {\n                    alpha = targetSplat[UncompressedSplatArray.OFFSET.OPACITY];\n                } else {\n                    alpha = 255;\n                }\n                if (alpha >= minimumAlpha) {\n                    validSplats.addSplatFromComonents(targetSplat[UncompressedSplatArray.OFFSET.X],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.Y],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.Z],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.SCALE0],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.SCALE1],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.SCALE2],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION3],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.FDC0],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.FDC1],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.FDC2],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.OPACITY]);\n                }\n            }\n\n            const bucketInfo = SplatBuffer.computeBucketsForUncompressedSplatArray(validSplats, sectionBlockSize, sectionBucketSize);\n            const fullBucketCount = bucketInfo.fullBuckets.length;\n            const partiallyFullBucketLengths = bucketInfo.partiallyFullBuckets.map((bucket) => bucket.splats.length);\n            const partiallyFilledBucketCount = partiallyFullBucketLengths.length;\n            const buckets = [...bucketInfo.fullBuckets, ...bucketInfo.partiallyFullBuckets];\n\n            const sectionDataSizeBytes = validSplats.splats.length * bytesPerSplat;\n            const bucketMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n            const bucketDataBytes = compressionLevel === 1 ? buckets.length *\n                                                             SplatBuffer.BucketStorageSizeBytes + bucketMetaDataSizeBytes : 0;\n            const sectionSizeBytes = sectionDataSizeBytes + bucketDataBytes;\n            const sectionBuffer = new ArrayBuffer(sectionSizeBytes);\n\n            const blockHalfSize = sectionBlockSize / 2.0;\n            const compressionScaleFactor = compressionScaleRange / blockHalfSize;\n            const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n\n            const bucketCenter = new THREE.Vector3();\n            const bucketCenterDelta = new THREE.Vector3();\n            let outSplatCount = 0;\n            for (let b = 0; b < buckets.length; b++) {\n                const bucket = buckets[b];\n                bucketCenter.fromArray(bucket.center);\n                for (let i = 0; i < bucket.splats.length; i++) {\n                    let row = bucket.splats[i];\n                    const targetSplat = validSplats.splats[row];\n\n                    const centerBase = bucketDataBytes + outSplatCount * bytesPerSplat;\n                    const scaleBase = centerBase + bytesPerCenter;\n                    const rotationBase = scaleBase + bytesPerScale;\n                    const colorBase = rotationBase + bytesPerRotation;\n                    if (compressionLevel === 0) {\n                        const center = new Float32Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\n                        const rot = new Float32Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\n                        const scale = new Float32Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\n                        if (targetSplat[UncompressedSplatArray.OFFSET.SCALE0] !== undefined) {\n                            tempRotation.set(targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION3],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION0]);\n                            tempRotation.normalize();\n                            rot.set([tempRotation.w, tempRotation.x, tempRotation.y, tempRotation.z]);\n                            scale.set([targetSplat[UncompressedSplatArray.OFFSET.SCALE0],\n                                       targetSplat[UncompressedSplatArray.OFFSET.SCALE1],\n                                       targetSplat[UncompressedSplatArray.OFFSET.SCALE2]]);\n                        } else {\n                            rot.set([1.0, 0.0, 0.0, 0.0]);\n                            scale.set([0.01, 0.01, 0.01]);\n                        }\n                        center.set([targetSplat[UncompressedSplatArray.OFFSET.X],\n                                    targetSplat[UncompressedSplatArray.OFFSET.Y],\n                                    targetSplat[UncompressedSplatArray.OFFSET.Z]]);\n                    } else {\n                        const center = new Uint16Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\n                        const rot = new Uint16Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\n                        const scale = new Uint16Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\n\n                        if (targetSplat[UncompressedSplatArray.OFFSET.SCALE0] !== undefined) {\n                            tempRotation.set(targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION3],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION0]);\n                            tempRotation.normalize();\n                            rot.set([thf(tempRotation.w), thf(tempRotation.x), thf(tempRotation.y), thf(tempRotation.z)]);\n                            scale.set([thf(targetSplat[UncompressedSplatArray.OFFSET.SCALE0]),\n                                       thf(targetSplat[UncompressedSplatArray.OFFSET.SCALE1]),\n                                       thf(targetSplat[UncompressedSplatArray.OFFSET.SCALE2])]);\n                        } else {\n                            rot.set([thf(1.), 0, 0, 0]);\n                            scale.set([thf(0.01), thf(0.01), thf(0.01)]);\n                        }\n                        bucketCenterDelta.set(targetSplat[UncompressedSplatArray.OFFSET.X],\n                                              targetSplat[UncompressedSplatArray.OFFSET.Y],\n                                              targetSplat[UncompressedSplatArray.OFFSET.Z]).sub(bucketCenter);\n                        bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\n                        bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\n                        bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\n                        bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\n                        bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\n                        bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\n                        center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\n                    }\n\n                    const rgba = new Uint8ClampedArray(sectionBuffer, colorBase, 4);\n\n                    if (targetSplat[UncompressedSplatArray.OFFSET.FDC0] !== undefined) {\n                        rgba.set([targetSplat[UncompressedSplatArray.OFFSET.FDC0],\n                                  targetSplat[UncompressedSplatArray.OFFSET.FDC1],\n                                  targetSplat[UncompressedSplatArray.OFFSET.FDC2]]);\n                    } else {\n                        rgba.set([255, 0, 0]);\n                    }\n                    if (targetSplat[UncompressedSplatArray.OFFSET.OPACITY] !== undefined) {\n                        rgba[3] = targetSplat[UncompressedSplatArray.OFFSET.OPACITY];\n                    } else {\n                        rgba[3] = 255;\n                    }\n\n                    outSplatCount++;\n                }\n            }\n            totalSplatCount += outSplatCount;\n\n            if (compressionLevel === 1) {\n                const bucketMetaDataArray = new Uint32Array(sectionBuffer);\n                for (let pfb = 0; pfb < partiallyFullBucketLengths.length; pfb ++) {\n                    bucketMetaDataArray[pfb] = partiallyFullBucketLengths[pfb];\n                }\n                const bucketArray = new Float32Array(sectionBuffer, bucketMetaDataSizeBytes,\n                                                     buckets.length * SplatBuffer.BucketStorageSizeFloats);\n                for (let b = 0; b < buckets.length; b++) {\n                    const bucket = buckets[b];\n                    const base = b * 3;\n                    bucketArray[base] = bucket.center[0];\n                    bucketArray[base + 1] = bucket.center[1];\n                    bucketArray[base + 2] = bucket.center[2];\n                }\n            }\n            sectionBuffers.push(sectionBuffer);\n\n            const sectionHeaderBuffer = new ArrayBuffer(SplatBuffer.SectionHeaderSizeBytes);\n            SplatBuffer.writeSectionHeaderToBuffer({\n                maxSplatCount: outSplatCount,\n                splatCount: outSplatCount,\n                bucketSize: sectionBucketSize,\n                bucketCount: buckets.length,\n                bucketBlockSize: sectionBlockSize,\n                compressionScaleRange: compressionScaleRange,\n                storageSizeBytes: sectionSizeBytes,\n                fullBucketCount: fullBucketCount,\n                partiallyFilledBucketCount: partiallyFilledBucketCount\n            }, compressionLevel, sectionHeaderBuffer, 0);\n            sectionHeaderBuffers.push(sectionHeaderBuffer);\n\n        }\n\n        let sectionsCumulativeSizeBytes = 0;\n        for (let sectionBuffer of sectionBuffers) sectionsCumulativeSizeBytes += sectionBuffer.byteLength;\n        const unifiedBufferSize = SplatBuffer.HeaderSizeBytes +\n                                  SplatBuffer.SectionHeaderSizeBytes * sectionBuffers.length + sectionsCumulativeSizeBytes;\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n\n        SplatBuffer.writeHeaderToBuffer({\n            versionMajor: 0,\n            versionMinor: 1,\n            maxSectionCount: sectionBuffers.length,\n            sectionCount: sectionBuffers.length,\n            maxSplatCount: totalSplatCount,\n            splatCount: totalSplatCount,\n            compressionLevel: compressionLevel,\n            sceneCenter: sceneCenter\n        }, unifiedBuffer);\n\n        let currentUnifiedBase = SplatBuffer.HeaderSizeBytes;\n        for (let sectionHeaderBuffer of sectionHeaderBuffers) {\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, SplatBuffer.SectionHeaderSizeBytes).set(new Uint8Array(sectionHeaderBuffer));\n            currentUnifiedBase += SplatBuffer.SectionHeaderSizeBytes;\n        }\n\n        for (let sectionBuffer of sectionBuffers) {\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, sectionBuffer.byteLength).set(new Uint8Array(sectionBuffer));\n            currentUnifiedBase += sectionBuffer.byteLength;\n        }\n\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\n        return splatBuffer;\n    }\n\n    static computeBucketsForUncompressedSplatArray(splatArray, blockSize, bucketSize) {\n        let splatCount = splatArray.splatCount;\n        const halfBlockSize = blockSize / 2.0;\n\n        const min = new THREE.Vector3();\n        const max = new THREE.Vector3();\n\n        for (let i = 0; i < splatCount; i++) {\n            const targetSplat = splatArray.splats[i];\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\n            if (i === 0 || center[0] < min.x) min.x = center[0];\n            if (i === 0 || center[0] > max.x) max.x = center[0];\n            if (i === 0 || center[1] < min.y) min.y = center[1];\n            if (i === 0 || center[1] > max.y) max.y = center[1];\n            if (i === 0 || center[2] < min.z) min.z = center[2];\n            if (i === 0 || center[2] > max.z) max.z = center[2];\n        }\n\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n        const blockCenter = new THREE.Vector3();\n        const fullBuckets = [];\n        const partiallyFullBuckets = {};\n\n        for (let i = 0; i < splatCount; i++) {\n            const targetSplat = splatArray.splats[i];\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\n            const xBlock = Math.floor((center[0] - min.x) / blockSize);\n            const yBlock = Math.floor((center[1] - min.y) / blockSize);\n            const zBlock = Math.floor((center[2] - min.z) / blockSize);\n\n            blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\n            blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\n            blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\n\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n            let bucket = partiallyFullBuckets[bucketId];\n            if (!bucket) {\n                partiallyFullBuckets[bucketId] = bucket = {\n                    'splats': [],\n                    'center': blockCenter.toArray()\n                };\n            }\n\n            bucket.splats.push(i);\n            if (bucket.splats.length >= bucketSize) {\n                fullBuckets.push(bucket);\n                partiallyFullBuckets[bucketId] = null;\n            }\n        }\n\n        const partiallyFullBucketArray = [];\n        for (let bucketId in partiallyFullBuckets) {\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n                const bucket = partiallyFullBuckets[bucketId];\n                if (bucket) {\n                    partiallyFullBucketArray.push(bucket);\n                }\n            }\n        }\n\n        return {\n            'fullBuckets': fullBuckets,\n            'partiallyFullBuckets': partiallyFullBucketArray,\n        };\n    }\n}\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatPartitioner {\n\n    constructor(sectionCount, sectionFilters, groupingParameters, partitionGenerator) {\n        this.sectionCount = sectionCount;\n        this.sectionFilters = sectionFilters;\n        this.groupingParameters = groupingParameters;\n        this.partitionGenerator = partitionGenerator;\n    }\n\n    partitionUncompressedSplatArray(splatArray) {\n        let groupingParameters;\n        let sectionCount;\n        let sectionFilters;\n        if (this.partitionGenerator) {\n            const results = this.partitionGenerator(splatArray);\n            groupingParameters = results.groupingParameters;\n            sectionCount = results.sectionCount;\n            sectionFilters = results.sectionFilters;\n        } else {\n            groupingParameters = this.groupingParameters;\n            sectionCount = this.sectionCount;\n            sectionFilters = this.sectionFilters;\n        }\n\n        const newArrays = [];\n        for (let s = 0; s < sectionCount; s++) {\n            const sectionSplats = new UncompressedSplatArray();\n            const sectionFilter = sectionFilters[s];\n            for (let i = 0; i < splatArray.splatCount; i++) {\n                if (sectionFilter(i)) {\n                    sectionSplats.addSplatFromArray(splatArray, i);\n                }\n            }\n            newArrays.push(sectionSplats);\n        }\n        return {\n            splatArrays: newArrays,\n            parameters: groupingParameters\n        };\n    }\n\n    static getStandardPartitioner(partitionSize = 0, sceneCenter = new THREE.Vector3(),\n                                  blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\n        const partitionGenerator = (splatArray) => {\n\n            if (partitionSize <= 0) partitionSize = splatArray.splatCount;\n\n            const centerA = new THREE.Vector3();\n            const centerB = new THREE.Vector3();\n            const clampDistance = 0.5;\n            const clampPoint = (point) => {\n                point.x = Math.floor(point.x / clampDistance) * clampDistance;\n                point.y = Math.floor(point.y / clampDistance) * clampDistance;\n                point.z = Math.floor(point.z / clampDistance) * clampDistance;\n            };\n            splatArray.splats.sort((a, b) => {\n                centerA.set(a[UncompressedSplatArray.OFFSET.X],\n                            a[UncompressedSplatArray.OFFSET.Y],\n                            a[UncompressedSplatArray.OFFSET.Z]).sub(sceneCenter);\n                clampPoint(centerA);\n                const centerADist = centerA.lengthSq();\n                centerB.set(b[UncompressedSplatArray.OFFSET.X],\n                            b[UncompressedSplatArray.OFFSET.Y],\n                            b[UncompressedSplatArray.OFFSET.Z]).sub(sceneCenter);\n                clampPoint(centerB);\n                const centerBDist = centerB.lengthSq();\n                if (centerADist > centerBDist) return 1;\n                else return -1;\n            });\n\n            const sectionFilters = [];\n            const groupingParameters = [];\n            partitionSize = Math.min(splatArray.splatCount, partitionSize);\n            const patitionCount = Math.ceil(splatArray.splatCount / partitionSize);\n            let currentStartSplat = 0;\n            for (let i = 0; i < patitionCount; i ++) {\n                let startSplat = currentStartSplat;\n                sectionFilters.push((splatIndex) => {\n                    return splatIndex >= startSplat && splatIndex < startSplat + partitionSize;\n                });\n                groupingParameters.push({\n                    'blocksSize': blockSize,\n                    'bucketSize': bucketSize,\n                });\n                currentStartSplat += partitionSize;\n            }\n            return {\n                'sectionCount': sectionFilters.length,\n                sectionFilters,\n                groupingParameters\n            };\n        };\n        return new SplatPartitioner(undefined, undefined, undefined, partitionGenerator);\n    }\n}\n","import * as THREE from 'three';\nimport { SplatPartitioner } from './SplatPartitioner.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatBufferGenerator {\n\n    constructor(splatPartitioner, alphaRemovalThreshold, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\n        this.splatPartitioner = splatPartitioner;\n        this.alphaRemovalThreshold = alphaRemovalThreshold;\n        this.compressionLevel = compressionLevel;\n        this.sectionSize = sectionSize;\n        this.sceneCenter = sceneCenter ? new THREE.Vector3().copy(sceneCenter) : undefined;\n        this.blockSize = blockSize;\n        this.bucketSize = bucketSize;\n    }\n\n    generateFromUncompressedSplatArray(splatArray) {\n        const partitionResults = this.splatPartitioner.partitionUncompressedSplatArray(splatArray);\n        return SplatBuffer.generateFromUncompressedSplatArrays(partitionResults.splatArrays,\n                                                               this.alphaRemovalThreshold, this.compressionLevel,\n                                                               this.sceneCenter, this.blockSize, this.bucketSize,\n                                                               partitionResults.parameters);\n    }\n\n    static getStandardGenerator(alphaRemovalThreshold = 1, compressionLevel = 1, sectionSize = 0, sceneCenter = new THREE.Vector3(),\n                                blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\n        const splatPartitioner = SplatPartitioner.getStandardPartitioner(sectionSize, sceneCenter, blockSize, bucketSize);\n        return new SplatBufferGenerator(splatPartitioner, alphaRemovalThreshold, compressionLevel,\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\n    }\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from './SplatBuffer.js';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\n\nexport class SplatParser {\n\n    static RowSizeBytes = 32;\n    static CenterSizeBytes = 12;\n    static ScaleSizeBytes = 12;\n    static RotationSizeBytes = 4;\n    static ColorSizeBytes = 4;\n\n    static parseToUncompressedBufferSection(fromSplat, toSplat, fromBuffer, fromOffset, toBuffer, toOffset) {\n\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].BytesPerSplat;\n\n        for (let i = fromSplat; i < toSplat; i++) {\n            const inBase = i * SplatParser.RowSizeBytes + fromOffset;\n            const inCenter = new Float32Array(fromBuffer, inBase, 3);\n            const inScale = new Float32Array(fromBuffer, inBase + SplatParser.CenterSizeBytes, 3);\n            const inColor = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes +\n                                              SplatParser.RotationSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            const outBase = i * outBytesPerSplat + toOffset;\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\n\n            outCenter[0] = inCenter[0];\n            outCenter[1] = inCenter[1];\n            outCenter[2] = inCenter[2];\n\n            outScale[0] = inScale[0];\n            outScale[1] = inScale[1];\n            outScale[2] = inScale[2];\n\n            outRotation[0] = quat.w;\n            outRotation[1] = quat.x;\n            outRotation[2] = quat.y;\n            outRotation[3] = quat.z;\n\n            outColor[0] = inColor[0];\n            outColor[1] = inColor[1];\n            outColor[2] = inColor[2];\n            outColor[3] = inColor[3];\n        }\n    }\n\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\n        // Standard .splat row layout:\n        // XYZ - Position (Float32)\n        // XYZ - Scale (Float32)\n        // RGBA - colors (uint8)\n        // IJKL - quaternion/rot (uint8)\n\n        const splatCount = inBuffer.byteLength / SplatParser.RowSizeBytes;\n\n        const splatArray = new UncompressedSplatArray();\n\n        for (let i = 0; i < splatCount; i++) {\n            const inBase = i * SplatParser.RowSizeBytes;\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\n            const inScale = new Float32Array(inBuffer, inBase + SplatParser.CenterSizeBytes, 3);\n            const inColor = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes +\n                                              SplatParser.ScaleSizeBytes + SplatParser.ColorSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            splatArray.addSplatFromComonents(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\n                                             quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\n        }\n\n        return splatArray;\n    }\n\n}\n","export class Constants {\n\n    static DepthMapRange = 1 << 16;\n    static MemoryPageSize = 65536;\n    static BytesPerFloat = 4;\n    static BytesPerInt = 4;\n    static MaxScenes = 32;\n    static StreamingSectionSize = 524288;\n\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from './SplatBuffer.js';\nimport { SplatBufferGenerator } from './SplatBufferGenerator.js';\nimport { SplatParser } from './SplatParser.js';\nimport { fetchWithProgress, delayedExecute } from '../Util.js';\nimport { LoaderStatus } from './LoaderStatus.js';\nimport { Constants } from '../Constants.js';\n\nexport class SplatLoader {\n\n    constructor(splatBuffer = null) {\n        this.splatBuffer = splatBuffer;\n        this.downLoadLink = null;\n    }\n\n    loadFromURL(fileName, onProgress, stream, onStreamedSectionProgress, compressionLevel,\n                minimumAlpha, optimizeSplatData, sectionSize, sceneCenter, blockSize, bucketSize) {\n\n        let streamBufferIn;\n        let streamBufferOut;\n        let streamSplatBuffer;\n        let lastSectionBytes = 0;\n        let streamSectionSizeBytes = Constants.StreamingSectionSize;\n        let sectionCount = 1;\n        let maxSplatCount = 0;\n        let splatCount = 0;\n\n        let streamLoadCompleteResolver;\n        let streamLoadPromise = new Promise((resolve) => {\n            streamLoadCompleteResolver = resolve;\n        });\n\n        let bytesLoaded = 0;\n        let chunks = [];\n\n        const localOnProgress = (percent, percentStr, chunk, fileSize) => {\n            const loadComplete = percent >= 100;\n            if (!fileSize) stream = false;\n            if (stream) {\n                const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n                if (!streamBufferIn) {\n                    maxSplatCount = fileSize / SplatParser.RowSizeBytes;\n                    streamBufferIn = new ArrayBuffer(fileSize);\n                    const splatBufferSizeBytes = splatDataOffsetBytes + SplatBuffer.CompressionLevels[0].BytesPerSplat * maxSplatCount;\n                    streamBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n                    SplatBuffer.writeHeaderToBuffer({\n                        versionMajor: 0,\n                        versionMinor: 1,\n                        maxSectionCount: sectionCount,\n                        sectionCount: sectionCount,\n                        maxSplatCount: maxSplatCount,\n                        splatCount: splatCount,\n                        compressionLevel: 0,\n                        sceneCenter: new THREE.Vector3()\n                    }, streamBufferOut);\n                }\n\n                if (chunk) {\n                    chunks.push(chunk);\n                    new Uint8Array(streamBufferIn, bytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\n                    bytesLoaded += chunk.byteLength;\n\n                    const bytesLoadedSinceLastSection = bytesLoaded - lastSectionBytes;\n                    if (bytesLoadedSinceLastSection > streamSectionSizeBytes || loadComplete) {\n                        const bytesToUpdate = loadComplete ? bytesLoadedSinceLastSection : streamSectionSizeBytes;\n                        const addedSplatCount = bytesToUpdate / SplatParser.RowSizeBytes;\n                        const newSplatCount = splatCount + addedSplatCount;\n                        SplatParser.parseToUncompressedBufferSection(splatCount, newSplatCount, streamBufferIn, 0,\n                                                                     streamBufferOut, splatDataOffsetBytes);\n                        splatCount = newSplatCount;\n                        if (!streamSplatBuffer) {\n                            SplatBuffer.writeSectionHeaderToBuffer({\n                                maxSplatCount: maxSplatCount,\n                                splatCount: splatCount,\n                                bucketSize: 0,\n                                bucketCount: 0,\n                                bucketBlockSize: 0,\n                                compressionScaleRange: 0,\n                                storageSizeBytes: 0,\n                                fullBucketCount: 0,\n                                partiallyFilledBucketCount: 0\n                            }, 0, streamBufferOut, SplatBuffer.HeaderSizeBytes);\n                            streamSplatBuffer = new SplatBuffer(streamBufferOut, false);\n                        }\n                        streamSplatBuffer.updateLoadedCounts(1, splatCount);\n                        onStreamedSectionProgress(streamSplatBuffer, loadComplete);\n                        lastSectionBytes += streamSectionSizeBytes;\n                    }\n                }\n                if (loadComplete) {\n                    streamLoadCompleteResolver();\n                }\n            }\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\n            return stream;\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, true).then((fullBuffer) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            if (stream) {\n                return streamLoadPromise.then(() => {\n                    if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                    return streamSplatBuffer;\n                });\n            } else {\n                return delayedExecute(() => {\n                    const splatArray = SplatParser.parseStandardSplatToUncompressedSplatArray(fullBuffer);\n                    let splatBuffer;\n                    if (optimizeSplatData) {\n                        const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\n                                                                                               sectionSize, sceneCenter, blockSize,\n                                                                                               bucketSize);\n                        splatBuffer = splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\n                    } else {\n                        splatBuffer = SplatBuffer.generateFromUncompressedSplatArrays([splatArray], minimumAlpha, 0,\n                                                                                       new THREE.Vector3());\n                    }\n                    if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                    return splatBuffer;\n                });\n            }\n        });\n    }\n\n    setFromBuffer(splatBuffer) {\n        this.splatBuffer = splatBuffer;\n    }\n\n}\n","import { SplatBuffer } from './SplatBuffer.js';\nimport { fetchWithProgress, delayedExecute } from '../Util.js';\nimport { LoaderStatus } from './LoaderStatus.js';\nimport { Constants } from '../Constants.js';\n\nconst MINIMUM_REQUIRED_MAJOR_VERSION = 0;\nconst MINIMUM_REQUIRED_MINOR_VERSION = 1;\n\nexport class KSplatLoader {\n\n    constructor(splatBuffer = null) {\n        this.splatBuffer = splatBuffer;\n        this.downLoadLink = null;\n    }\n\n   static checkVersion(buffer) {\n        const header = SplatBuffer.parseHeader(buffer);\n        if (header.versionMajor === MINIMUM_REQUIRED_MAJOR_VERSION && header.versionMinor >= MINIMUM_REQUIRED_MINOR_VERSION ||\n            header.versionMajor > MINIMUM_REQUIRED_MAJOR_VERSION) {\n           return true;\n        } else {\n            throw new Error(`KSplat version not supported: v${header.versionMajor}.${header.versionMinor}. ` +\n                            `Minimum required: v${MINIMUM_REQUIRED_MAJOR_VERSION}.${MINIMUM_REQUIRED_MINOR_VERSION}`);\n        }\n    };\n\n    loadFromURL(fileName, onProgress, streamBuiltSections, onSectionBuilt) {\n        let bytesLoaded = 0;\n        let totalStorageSizeBytes = 0;\n\n        let streamBuffer;\n        let streamSplatBuffer;\n\n        let headerBuffer;\n        let header;\n        let headerLoaded = false;\n        let headerLoading = false;\n\n        let sectionHeadersBuffer;\n        let sectionHeaders = [];\n        let sectionHeadersLoaded = false;\n        let sectionHeadersLoading = false;\n\n        let lastStreamUpdateBytes = 0;\n        let streamSectionSizeBytes = Constants.StreamingSectionSize;\n        let totalBytesToDownload = 0;\n\n        let loadComplete = false;\n\n        let chunks = [];\n\n        let streamLoadCompleteResolver;\n        let streamLoadPromise = new Promise((resolve) => {\n            streamLoadCompleteResolver = resolve;\n        });\n\n        const checkAndLoadHeader = () => {\n            if (!headerLoaded && !headerLoading && bytesLoaded >= SplatBuffer.HeaderSizeBytes) {\n                headerLoading = true;\n                const headerAssemblyPromise = new Blob(chunks).arrayBuffer();\n                headerAssemblyPromise.then((bufferData) => {\n                    headerBuffer = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n                    new Uint8Array(headerBuffer).set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\n                    KSplatLoader.checkVersion(headerBuffer);\n                    headerLoading = false;\n                    headerLoaded = true;\n                    header = SplatBuffer.parseHeader(headerBuffer);\n                    window.setTimeout(() => {\n                        checkAndLoadSectionHeaders();\n                    }, 1);\n                });\n            }\n        };\n\n        let queuedCheckAndLoadSectionsCount = 0;\n        const queueCheckAndLoadSections = () => {\n            if (queuedCheckAndLoadSectionsCount === 0) {\n                queuedCheckAndLoadSectionsCount++;\n                window.setTimeout(() => {\n                    queuedCheckAndLoadSectionsCount--;\n                    checkAndLoadSections(true);\n                }, 1);\n            }\n        };\n\n        const checkAndLoadSectionHeaders = () => {\n            const performLoad = () => {\n                sectionHeadersLoading = true;\n                const sectionHeadersAssemblyPromise = new Blob(chunks).arrayBuffer();\n                sectionHeadersAssemblyPromise.then((bufferData) => {\n                    sectionHeadersLoading = false;\n                    sectionHeadersLoaded = true;\n                    sectionHeadersBuffer = new ArrayBuffer(header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes);\n                    new Uint8Array(sectionHeadersBuffer).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes,\n                                                                            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes));\n                    sectionHeaders = SplatBuffer.parseSectionHeaders(header, sectionHeadersBuffer, 0, false);\n                    let totalSectionStorageStorageByes = 0;\n                    for (let i = 0; i < header.maxSectionCount; i++) {\n                        totalSectionStorageStorageByes += sectionHeaders[i].storageSizeBytes;\n                    }\n                    totalStorageSizeBytes = SplatBuffer.HeaderSizeBytes + header.maxSectionCount *\n                                            SplatBuffer.SectionHeaderSizeBytes + totalSectionStorageStorageByes;\n                    if (!streamBuffer) {\n                        streamBuffer = new ArrayBuffer(totalStorageSizeBytes);\n                        let offset = 0;\n                        for (let i = 0; i < chunks.length; i++) {\n                            const chunk = chunks[i];\n                            new Uint8Array(streamBuffer, offset, chunk.byteLength).set(new Uint8Array(chunk));\n                            offset += chunk.byteLength;\n                        }\n                    }\n\n                    totalBytesToDownload = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n                    for (let i = 0; i <= sectionHeaders.length && i < header.maxSectionCount; i++) {\n                        totalBytesToDownload += sectionHeaders[i].storageSizeBytes;\n                    }\n\n                    queueCheckAndLoadSections();\n                });\n            };\n\n            if (!sectionHeadersLoading && !sectionHeadersLoaded && headerLoaded &&\n                bytesLoaded >= SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount) {\n                performLoad();\n            }\n        };\n\n        const checkAndLoadSections = () => {\n            if (sectionHeadersLoaded) {\n\n                if (loadComplete) return;\n\n                loadComplete = bytesLoaded >= totalBytesToDownload;\n\n                const bytesLoadedSinceLastSection = bytesLoaded - lastStreamUpdateBytes;\n                if (bytesLoadedSinceLastSection > streamSectionSizeBytes || loadComplete) {\n\n                    lastStreamUpdateBytes = bytesLoaded;\n\n                    if (!streamSplatBuffer) streamSplatBuffer = new SplatBuffer(streamBuffer, false);\n\n                    const baseDataOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n                    let sectionBase = 0;\n                    let reachedSections = 0;\n                    let loadedSplatCount = 0;\n                    for (let i = 0; i < header.maxSectionCount; i++) {\n                        const sectionHeader = sectionHeaders[i];\n                        const bucketsDataOffset = sectionBase + sectionHeader.partiallyFilledBucketCount * 4 +\n                                                  sectionHeader.bucketStorageSizeBytes * sectionHeader.bucketCount;\n                        const bytesRequiredToReachSectionSplatData = baseDataOffset + bucketsDataOffset;\n                        if (bytesLoaded >= bytesRequiredToReachSectionSplatData) {\n                            reachedSections++;\n                            const bytesPastSSectionSplatDataStart = bytesLoaded - bytesRequiredToReachSectionSplatData;\n                            const bytesPerSplat = SplatBuffer.CompressionLevels[header.compressionLevel].BytesPerSplat;\n                            let loadedSplatsForSection = Math.floor(bytesPastSSectionSplatDataStart / bytesPerSplat);\n                            loadedSplatsForSection = Math.min(loadedSplatsForSection, sectionHeader.maxSplatCount);\n                            loadedSplatCount += loadedSplatsForSection;\n                            streamSplatBuffer.updateLoadedCounts(reachedSections, loadedSplatCount);\n                            streamSplatBuffer.updateSectionLoadedCounts(i, loadedSplatsForSection);\n                        } else {\n                            break;\n                        }\n                        sectionBase += sectionHeader.storageSizeBytes;\n                    }\n\n                    onSectionBuilt(streamSplatBuffer, loadComplete);\n\n                    if (loadComplete) {\n                        streamLoadCompleteResolver();\n                    }\n                }\n            }\n        };\n\n        const localOnProgress = (percent, percentStr, chunk) => {\n\n            if (chunk) {\n                chunks.push(chunk);\n                if (streamBuffer) {\n                    new Uint8Array(streamBuffer, bytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\n                }\n                bytesLoaded += chunk.byteLength;\n            }\n            if (streamBuiltSections) {\n                checkAndLoadHeader();\n                checkAndLoadSectionHeaders();\n                checkAndLoadSections();\n            }\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, !streamBuiltSections).then((fullBuffer) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            return delayedExecute(() => {\n                function finish(buffer) {\n                    if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                    if (buffer instanceof SplatBuffer) return buffer;\n                    else {\n                        KSplatLoader.checkVersion(buffer);\n                        return new SplatBuffer(buffer);\n                    }\n                }\n                if (streamBuiltSections) {\n                    return streamLoadPromise.then(() => {\n                        return finish(streamSplatBuffer);\n                    });\n                } else {\n                    return finish(fullBuffer);\n                }\n            });\n        });\n    }\n\n    setFromBuffer(splatBuffer) {\n        this.splatBuffer = splatBuffer;\n    }\n\n    static downloadFile = function() {\n\n        let downLoadLink;\n\n        return function(splatBuffer, fileName) {\n            const blob = new Blob([splatBuffer.bufferData], {\n                type: 'application/octet-stream',\n            });\n\n            if (!downLoadLink) {\n                downLoadLink = document.createElement('a');\n                document.body.appendChild(downLoadLink);\n            }\n            downLoadLink.download = fileName;\n            downLoadLink.href = URL.createObjectURL(blob);\n            downLoadLink.click();\n        };\n\n    }();\n\n}\n","export const SceneFormat = {\n    'Splat': 0,\n    'KSplat': 1,\n    'Ply': 2\n};\n","import { SceneFormat } from './SceneFormat.js';\n\nexport const sceneFormatFromPath = (path) => {\n    if (path.endsWith('.ply')) return SceneFormat.Ply;\n    else if (path.endsWith('.splat')) return SceneFormat.Splat;\n    else if (path.endsWith('.ksplat')) return SceneFormat.KSplat;\n    return null;\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nimport {\n    EventDispatcher,\n    MOUSE,\n    Quaternion,\n    Spherical,\n    TOUCH,\n    Vector2,\n    Vector3,\n    Plane,\n    Ray,\n    MathUtils\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nclass OrbitControls extends EventDispatcher {\n\n    constructor( object, domElement ) {\n\n        super();\n\n        this.object = object;\n        this.domElement = domElement;\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n        // Set to false to disable this control\n        this.enabled = true;\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3();\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n        this.minAzimuthAngle = - Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n        // The four arrow keys\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\n\n        // Mouse buttons\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n        // Touch fingers\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n\n        //\n        // public methods\n        //\n\n        this.getPolarAngle = function() {\n\n            return spherical.phi;\n\n        };\n\n        this.getAzimuthalAngle = function() {\n\n            return spherical.theta;\n\n        };\n\n        this.getDistance = function() {\n\n            return this.object.position.distanceTo( this.target );\n\n        };\n\n        this.listenToKeyEvents = function( domElement ) {\n\n            domElement.addEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = domElement;\n\n        };\n\n        this.stopListenToKeyEvents = function() {\n\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = null;\n\n        };\n\n        this.saveState = function() {\n\n            scope.target0.copy( scope.target );\n            scope.position0.copy( scope.object.position );\n            scope.zoom0 = scope.object.zoom;\n\n        };\n\n        this.reset = function() {\n\n            scope.target.copy( scope.target0 );\n            scope.object.position.copy( scope.position0 );\n            scope.object.zoom = scope.zoom0;\n\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent( _changeEvent );\n\n            scope.update();\n\n            state = STATE.NONE;\n\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        this.update = function() {\n\n            const offset = new Vector3();\n\n            // so camera.up is the orbit axis\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n            const quatInverse = quat.clone().invert();\n\n            const lastPosition = new Vector3();\n            const lastQuaternion = new Quaternion();\n            const lastTargetPosition = new Vector3();\n\n            const twoPI = 2 * Math.PI;\n\n            return function update() {\n\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n                quatInverse.copy(quat).invert();\n\n                const position = scope.object.position;\n\n                offset.copy( position ).sub( scope.target );\n\n                // rotate offset to \"y-axis-is-up\" space\n                offset.applyQuaternion( quat );\n\n                // angle from z-axis around y-axis\n                spherical.setFromVector3( offset );\n\n                if ( scope.autoRotate && state === STATE.NONE ) {\n\n                    rotateLeft( getAutoRotationAngle() );\n\n                }\n\n                if ( scope.enableDamping ) {\n\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n                } else {\n\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n\n                }\n\n                // restrict theta to be between desired limits\n\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n\n                if ( isFinite( min ) && isFinite( max ) ) {\n\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n                    if ( min <= max ) {\n\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n                    } else {\n\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n                            Math.max( min, spherical.theta ) :\n                            Math.min( max, spherical.theta );\n\n                    }\n\n                }\n\n                // restrict phi to be between desired limits\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n                spherical.makeSafe();\n\n\n                // move target to panned location\n\n                if ( scope.enableDamping === true ) {\n\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n                } else {\n\n                    scope.target.add( panOffset );\n\n                }\n\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n                // we adjust zoom later in these cases\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\n\n                    spherical.radius = clampDistance( spherical.radius );\n\n                } else {\n\n                    spherical.radius = clampDistance( spherical.radius * scale );\n\n                }\n\n\n                offset.setFromSpherical( spherical );\n\n                // rotate offset back to \"camera-up-vector-is-up\" space\n                offset.applyQuaternion( quatInverse );\n\n                position.copy( scope.target ).add( offset );\n\n                scope.object.lookAt( scope.target );\n\n                if ( scope.enableDamping === true ) {\n\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n                } else {\n\n                    sphericalDelta.set( 0, 0, 0 );\n\n                    panOffset.set( 0, 0, 0 );\n\n                }\n\n                // adjust camera position\n                let zoomChanged = false;\n                if ( scope.zoomToCursor && performCursorZoom ) {\n\n                    let newRadius = null;\n                    if ( scope.object.isPerspectiveCamera ) {\n\n                        // move the camera down the pointer ray\n                        // this method avoids floating point error\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance( prevRadius * scale );\n\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\n                        scope.object.updateMatrixWorld();\n\n                    } else if ( scope.object.isOrthographicCamera ) {\n\n                        // adjust the ortho camera position based on zoom changes\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseBefore.unproject( scope.object );\n\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseAfter.unproject( scope.object );\n\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\n                        scope.object.updateMatrixWorld();\n\n                        newRadius = offset.length();\n\n                    } else {\n\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n                        scope.zoomToCursor = false;\n\n                    }\n\n                    // handle the placement of the target\n                    if ( newRadius !== null ) {\n\n                        if ( this.screenSpacePanning ) {\n\n                            // position the orbit target in front of the new camera position\n                            scope.target.set( 0, 0, - 1 )\n                                .transformDirection( scope.object.matrix )\n                                .multiplyScalar( newRadius )\n                                .add( scope.object.position );\n\n                        } else {\n\n                            // get the ray and translation plane to compute target\n                            _ray.origin.copy( scope.object.position );\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\n\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                            // extremely large values\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\n\n                                object.lookAt( scope.target );\n\n                            } else {\n\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\n                                _ray.intersectPlane( _plane, scope.target );\n\n                            }\n\n                        }\n\n                    }\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                    scope.object.updateProjectionMatrix();\n                    zoomChanged = true;\n\n                }\n\n                scale = 1;\n                performCursorZoom = false;\n\n                // update condition is:\n                // min(camera displacement, camera rotation in radians)^2 > EPS\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n                if ( zoomChanged ||\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\n\n                    scope.dispatchEvent( _changeEvent );\n\n                    lastPosition.copy( scope.object.position );\n                    lastQuaternion.copy( scope.object.quaternion );\n                    lastTargetPosition.copy( scope.target );\n\n                    zoomChanged = false;\n\n                    return true;\n\n                }\n\n                return false;\n\n            };\n\n        }();\n\n        this.dispose = function() {\n\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n            if ( scope._domElementKeyEvents !== null ) {\n\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n                scope._domElementKeyEvents = null;\n\n            }\n\n        };\n\n        //\n        // internals\n        //\n\n        const scope = this;\n\n        const STATE = {\n            NONE: - 1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n\n        let state = STATE.NONE;\n\n        const EPS = 0.000001;\n\n        // current position in spherical coordinates\n        const spherical = new Spherical();\n        const sphericalDelta = new Spherical();\n\n        let scale = 1;\n        const panOffset = new Vector3();\n\n        const rotateStart = new Vector2();\n        const rotateEnd = new Vector2();\n        const rotateDelta = new Vector2();\n\n        const panStart = new Vector2();\n        const panEnd = new Vector2();\n        const panDelta = new Vector2();\n\n        const dollyStart = new Vector2();\n        const dollyEnd = new Vector2();\n        const dollyDelta = new Vector2();\n\n        const dollyDirection = new Vector3();\n        const mouse = new Vector2();\n        let performCursorZoom = false;\n\n        const pointers = [];\n        const pointerPositions = {};\n\n        function getAutoRotationAngle() {\n\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n        }\n\n        function getZoomScale() {\n\n            return Math.pow( 0.95, scope.zoomSpeed );\n\n        }\n\n        function rotateLeft( angle ) {\n\n            sphericalDelta.theta -= angle;\n\n        }\n\n        function rotateUp( angle ) {\n\n            sphericalDelta.phi -= angle;\n\n        }\n\n        const panLeft = function() {\n\n            const v = new Vector3();\n\n            return function panLeft( distance, objectMatrix ) {\n\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n                v.multiplyScalar( - distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        const panUp = function() {\n\n            const v = new Vector3();\n\n            return function panUp( distance, objectMatrix ) {\n\n                if ( scope.screenSpacePanning === true ) {\n\n                    v.setFromMatrixColumn( objectMatrix, 1 );\n\n                } else {\n\n                    v.setFromMatrixColumn( objectMatrix, 0 );\n                    v.crossVectors( scope.object.up, v );\n\n                }\n\n                v.multiplyScalar( distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        const pan = function() {\n\n            const offset = new Vector3();\n\n            return function pan( deltaX, deltaY ) {\n\n                const element = scope.domElement;\n\n                if ( scope.object.isPerspectiveCamera ) {\n\n                    // perspective\n                    const position = scope.object.position;\n                    offset.copy( position ).sub( scope.target );\n                    let targetDistance = offset.length();\n\n                    // half of the fov is center to top of screen\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n                    // we use only clientHeight here so aspect ratio does not distort speed\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    // orthographic\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\n                                      element.clientHeight, scope.object.matrix );\n\n                } else {\n\n                    // camera neither orthographic nor perspective\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n                    scope.enablePan = false;\n\n                }\n\n            };\n\n        }();\n\n        function dollyOut( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale /= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function dollyIn( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale *= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function updateMouseParameters( event ) {\n\n            if ( ! scope.zoomToCursor ) {\n\n                return;\n\n            }\n\n            performCursorZoom = true;\n\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n\n            mouse.x = ( x / w ) * 2 - 1;\n            mouse.y = - ( y / h ) * 2 + 1;\n\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\n\n        }\n\n        function clampDistance( dist ) {\n\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\n\n        }\n\n        //\n        // event callbacks - update the object state\n        //\n\n        function handleMouseDownRotate( event ) {\n\n            rotateStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownDolly( event ) {\n\n            updateMouseParameters( event );\n            dollyStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownPan( event ) {\n\n            panStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseMoveRotate( event ) {\n\n            rotateEnd.set( event.clientX, event.clientY );\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMoveDolly( event ) {\n\n            dollyEnd.set( event.clientX, event.clientY );\n\n            dollyDelta.subVectors( dollyEnd, dollyStart );\n\n            if ( dollyDelta.y > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            } else if ( dollyDelta.y < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            }\n\n            dollyStart.copy( dollyEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMovePan( event ) {\n\n            panEnd.set( event.clientX, event.clientY );\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseWheel( event ) {\n\n            updateMouseParameters( event );\n\n            if ( event.deltaY < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            } else if ( event.deltaY > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            }\n\n            scope.update();\n\n        }\n\n        function handleKeyDown( event ) {\n\n            let needsUpdate = false;\n\n            switch ( event.code ) {\n\n                case scope.keys.UP:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.BOTTOM:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, - scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.LEFT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.RIGHT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( - scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n            }\n\n            if ( needsUpdate ) {\n\n                // prevent the browser from scrolling on cursor keys\n                event.preventDefault();\n\n                scope.update();\n\n            }\n\n\n        }\n\n        function handleTouchStartRotate() {\n\n            if ( pointers.length === 1 ) {\n\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                rotateStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartPan() {\n\n            if ( pointers.length === 1 ) {\n\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                panStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartDolly() {\n\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyStart.set( 0, distance );\n\n        }\n\n        function handleTouchStartDollyPan() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enablePan ) handleTouchStartPan();\n\n        }\n\n        function handleTouchStartDollyRotate() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enableRotate ) handleTouchStartRotate();\n\n        }\n\n        function handleTouchMoveRotate( event ) {\n\n            if ( pointers.length == 1 ) {\n\n                rotateEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                rotateEnd.set( x, y );\n\n            }\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n        }\n\n        function handleTouchMovePan( event ) {\n\n            if ( pointers.length === 1 ) {\n\n                panEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                panEnd.set( x, y );\n\n            }\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n        }\n\n        function handleTouchMoveDolly( event ) {\n\n            const position = getSecondPointerPosition( event );\n\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyEnd.set( 0, distance );\n\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n            dollyOut( dollyDelta.y );\n\n            dollyStart.copy( dollyEnd );\n\n        }\n\n        function handleTouchMoveDollyPan( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enablePan ) handleTouchMovePan( event );\n\n        }\n\n        function handleTouchMoveDollyRotate( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        function onPointerDown( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.setPointerCapture( event.pointerId );\n\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            //\n\n            addPointer( event );\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchStart( event );\n\n            } else {\n\n                onMouseDown( event );\n\n            }\n\n        }\n\n        function onPointerMove( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchMove( event );\n\n            } else {\n\n                onMouseMove( event );\n\n            }\n\n        }\n\n        function onPointerUp( event ) {\n\n            removePointer( event );\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.releasePointerCapture( event.pointerId );\n\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function onMouseDown( event ) {\n\n            let mouseAction;\n\n            switch ( event.button ) {\n\n                case 0:\n\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n\n                case 1:\n\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n\n                case 2:\n\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n\n                default:\n\n                    mouseAction = - 1;\n\n            }\n\n            switch ( mouseAction ) {\n\n                case MOUSE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseDownDolly( event );\n\n                    state = STATE.DOLLY;\n\n                    break;\n\n                case MOUSE.ROTATE:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    } else {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    }\n\n                    break;\n\n                case MOUSE.PAN:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    } else {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onMouseMove( event ) {\n\n            switch ( state ) {\n\n                case STATE.ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleMouseMoveRotate( event );\n\n                    break;\n\n                case STATE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseMoveDolly( event );\n\n                    break;\n\n                case STATE.PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleMouseMovePan( event );\n\n                    break;\n\n            }\n\n        }\n\n        function onMouseWheel( event ) {\n\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n            event.preventDefault();\n\n            scope.dispatchEvent( _startEvent );\n\n            handleMouseWheel( event );\n\n            scope.dispatchEvent( _endEvent );\n\n        }\n\n        function onKeyDown( event ) {\n\n            if ( scope.enabled === false || scope.enablePan === false ) return;\n\n            handleKeyDown( event );\n\n        }\n\n        function onTouchStart( event ) {\n\n            trackPointer( event );\n\n            switch ( pointers.length ) {\n\n                case 1:\n\n                    switch ( scope.touches.ONE ) {\n\n                        case TOUCH.ROTATE:\n\n                            if ( scope.enableRotate === false ) return;\n\n                            handleTouchStartRotate();\n\n                            state = STATE.TOUCH_ROTATE;\n\n                            break;\n\n                        case TOUCH.PAN:\n\n                            if ( scope.enablePan === false ) return;\n\n                            handleTouchStartPan();\n\n                            state = STATE.TOUCH_PAN;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                case 2:\n\n                    switch ( scope.touches.TWO ) {\n\n                        case TOUCH.DOLLY_PAN:\n\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                            handleTouchStartDollyPan();\n\n                            state = STATE.TOUCH_DOLLY_PAN;\n\n                            break;\n\n                        case TOUCH.DOLLY_ROTATE:\n\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                            handleTouchStartDollyRotate();\n\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onTouchMove( event ) {\n\n            trackPointer( event );\n\n            switch ( state ) {\n\n                case STATE.TOUCH_ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleTouchMoveRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleTouchMovePan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_PAN:\n\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                    handleTouchMoveDollyPan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_ROTATE:\n\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                    handleTouchMoveDollyRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n        }\n\n        function onContextMenu( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            event.preventDefault();\n\n        }\n\n        function addPointer( event ) {\n\n            pointers.push( event );\n\n        }\n\n        function removePointer( event ) {\n\n            delete pointerPositions[event.pointerId];\n\n            for ( let i = 0; i < pointers.length; i ++ ) {\n\n                if ( pointers[i].pointerId == event.pointerId ) {\n\n                    pointers.splice( i, 1 );\n                    return;\n\n                }\n\n            }\n\n        }\n\n        function trackPointer( event ) {\n\n            let position = pointerPositions[event.pointerId];\n\n            if ( position === undefined ) {\n\n                position = new Vector2();\n                pointerPositions[event.pointerId] = position;\n\n            }\n\n            position.set( event.pageX, event.pageY );\n\n        }\n\n        function getSecondPointerPosition( event ) {\n\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\n\n            return pointerPositions[pointer.pointerId];\n\n        }\n\n        //\n\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n        // force an update at start\n\n        this.update();\n\n    }\n\n}\n\nexport { OrbitControls };\n","import { fadeElement } from './Util.js';\n\nconst STANDARD_FADE_DURATION = 500;\n\nexport class LoadingSpinner {\n\n    static elementIDGen = 0;\n\n    constructor(message, container) {\n\n        this.taskIDGen = 0;\n        this.elementID = LoadingSpinner.elementIDGen++;\n\n        this.tasks = [];\n\n        this.message = message || 'Loading...';\n        this.container = container || document.body;\n\n        this.spinnerContainerOuter = document.createElement('div');\n        this.spinnerContainerOuter.className = `spinnerOuterContainer${this.elementID}`;\n        this.spinnerContainerOuter.style.display = 'none';\n\n        this.spinnerContainerPrimary = document.createElement('div');\n        this.spinnerContainerPrimary.className = `spinnerContainerPrimary${this.elementID}`;\n        this.spinnerPrimary = document.createElement('div');\n        this.spinnerPrimary.classList.add(`spinner${this.elementID}`, `spinnerPrimary${this.elementID}`);\n        this.messageContainerPrimary = document.createElement('div');\n        this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`, `messageContainerPrimary${this.elementID}`);\n        this.messageContainerPrimary.innerHTML = this.message;\n\n        this.spinnerContainerMin = document.createElement('div');\n        this.spinnerContainerMin.className = `spinnerContainerMin${this.elementID}`;\n        this.spinnerMin = document.createElement('div');\n        this.spinnerMin.classList.add(`spinner${this.elementID}`, `spinnerMin${this.elementID}`);\n        this.messageContainerMin = document.createElement('div');\n        this.messageContainerMin.classList.add(`messageContainer${this.elementID}`, `messageContainerMin${this.elementID}`);\n        this.messageContainerMin.innerHTML = this.message;\n\n        this.spinnerContainerPrimary.appendChild(this.spinnerPrimary);\n        this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary);\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary);\n\n        this.spinnerContainerMin.appendChild(this.spinnerMin);\n        this.spinnerContainerMin.appendChild(this.messageContainerMin);\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .spinnerOuterContainer${this.elementID} {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .messageContainer${this.elementID} {\n                height: 20px;\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                vertical-align: middle;\n            }\n\n            .spinner${this.elementID} {\n                padding: 15px;\n                background: #07e8d6;\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n\n            .spinnerContainerPrimary${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 10px;\n                margin: 0;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n                pointer-events: auto;\n            }\n\n            .spinnerPrimary${this.elementID} {\n                width: 120px;\n                margin-left: 30px;\n            }\n\n            .messageContainerPrimary${this.elementID} {\n                padding-top: 15px;\n            }\n\n            .spinnerContainerMin${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                display: flex;\n                flex-direction: left;\n                pointer-events: auto;\n                min-width: 250px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                margin-right: 15px;\n            }\n\n            .spinnerMin${this.elementID} {\n                width: 50px;\n                height: 50px;\n                margin-left: 15px;\n                margin-right: 25px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                padding-top: 15px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n        this.spinnerContainerOuter.appendChild(style);\n        this.container.appendChild(this.spinnerContainerOuter);\n\n        this.setMinimized(false, true);\n\n        this.fadeTransitions = [];\n    }\n\n    addTask(message) {\n        const newTask = {\n            'message': message,\n            'id': this.taskIDGen++\n        };\n        this.tasks.push(newTask);\n        this.update();\n        return newTask.id;\n    }\n\n    removeTask(id) {\n        let index = 0;\n        for (let task of this.tasks) {\n            if (task.id === id) {\n                this.tasks.splice(index, 1);\n                break;\n            }\n            index++;\n        }\n        this.update();\n    }\n\n    removeAllTasks() {\n        this.tasks = [];\n        this.update();\n    }\n\n    setMessageForTask(id, message) {\n        for (let task of this.tasks) {\n            if (task.id === id) {\n                task.message = message;\n                break;\n            }\n        }\n        this.update();\n    }\n\n    update() {\n        if (this.tasks.length > 0) {\n            this.show();\n            this.setMessage(this.tasks[this.tasks.length - 1].message);\n        } else {\n            this.hide();\n        }\n    }\n\n    show() {\n        this.spinnerContainerOuter.style.display = 'block';\n        this.visible = true;\n    }\n\n    hide() {\n        this.spinnerContainerOuter.style.display = 'none';\n        this.visible = false;\n    }\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.spinnerContainerOuter);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.spinnerContainerOuter);\n            this.spinnerContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n    setMinimized(minimized, instant) {\n        const showHideSpinner = (element, show, instant, displayStyle, fadeTransitionsIndex) => {\n            if (instant) {\n                element.style.display = show ? displayStyle : 'none';\n            } else {\n                this.fadeTransitions[fadeTransitionsIndex] = fadeElement(element, !show, displayStyle, STANDARD_FADE_DURATION, () => {\n                    this.fadeTransitions[fadeTransitionsIndex] = null;\n                });\n            }\n        };\n        showHideSpinner(this.spinnerContainerPrimary, !minimized, instant, 'block', 0);\n        showHideSpinner(this.spinnerContainerMin, minimized, instant, 'flex', 1);\n        this.minimized = minimized;\n    }\n\n    setMessage(msg) {\n        this.messageContainerPrimary.innerHTML = msg;\n        this.messageContainerMin.innerHTML = msg;\n    }\n}\n","export const fadeElement = (element, out, displayStyle, duration, onComplete) => {\n    const startTime = performance.now();\n\n    let startOpacity = element.style.display === 'none' ? 0 : parseFloat(element.style.opacity);\n    if (isNaN(startOpacity)) startOpacity = 1;\n\n    const interval = window.setInterval(() => {\n        const currentTime = performance.now();\n        const elapsed = currentTime - startTime;\n\n        let t = Math.min(elapsed / duration, 1.0);\n        if (t > 0.999) t = 1;\n\n        let opacity;\n        if (out) {\n            opacity = (1.0 - t) * startOpacity;\n            if (opacity < 0.0001) opacity = 0;\n        } else {\n            opacity = (1.0 - startOpacity) * t + startOpacity;\n        }\n\n        if (opacity > 0) {\n            element.style.display = displayStyle;\n            element.style.opacity = opacity;\n        } else {\n            element.style.display = 'none';\n        }\n\n        if (t >= 1) {\n            if (onComplete) onComplete();\n            window.clearInterval(interval);\n        }\n    }, 16);\n    return interval;\n};\n\nexport const cancelFade = (interval) => {\n    window.clearInterval(interval);\n};\n","export class LoadingProgressBar {\n\n    constructor(container) {\n\n        this.idGen = 0;\n\n        this.tasks = [];\n\n        this.container = container || document.body;\n\n        this.progressBarContainerOuter = document.createElement('div');\n        this.progressBarContainerOuter.className = 'progressBarOuterContainer';\n        this.progressBarContainerOuter.style.display = 'none';\n\n        this.progressBarBox = document.createElement('div');\n        this.progressBarBox.className = 'progressBarBox';\n\n        this.progressBarBackground = document.createElement('div');\n        this.progressBarBackground.className = 'progressBarBackground';\n\n        this.progressBar = document.createElement('div');\n        this.progressBar.className = 'progressBar';\n\n        this.progressBarBackground.appendChild(this.progressBar);\n        this.progressBarBox.appendChild(this.progressBarBackground);\n        this.progressBarContainerOuter.appendChild(this.progressBarBox);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .progressBarOuterContainer {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .progressBarBox {\n                z-index:99999;\n                padding: 7px 9px 5px 7px;\n                background-color: rgba(190, 190, 190, 0.75);\n                border: #555555 1px solid;\n                border-radius: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                width: 180px;\n                height: 30px;\n                pointer-events: auto;\n            }\n\n            .progressBarBackground {\n                width: 100%;\n                height: 25px;\n                border-radius:10px;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #444444 1px solid;\n                box-shadow: inset 0 0 10px #333333;\n            }\n\n            .progressBar {\n                height: 25px;\n                width: 0px;\n                border-radius:10px;\n                background-color: rgba(0, 200, 0, 0.75);\n                box-shadow: inset 0 0 10px #003300;\n            }\n\n        `;\n        this.progressBarContainerOuter.appendChild(style);\n        this.container.appendChild(this.progressBarContainerOuter);\n    }\n\n    show() {\n        this.progressBarContainerOuter.style.display = 'block';\n    }\n\n    hide() {\n        this.progressBarContainerOuter.style.display = 'none';\n    }\n\n    setProgress(progress) {\n        this.progressBar.style.width = progress + '%';\n    }\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.progressBarContainerOuter);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.progressBarContainerOuter);\n            this.progressBarContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n}\n","export class InfoPanel {\n\n    constructor(container) {\n\n        this.container = container || document.body;\n\n        this.infoCells = {};\n\n        const layout = [\n            ['Camera position', 'cameraPosition'],\n            ['Camera look-at', 'cameraLookAt'],\n            ['Camera up', 'cameraUp'],\n            ['Cursor position', 'cursorPosition'],\n            ['FPS', 'fps'],\n            ['Render window', 'renderWindow'],\n            ['Rendering:', 'renderSplatCount'],\n            ['Sort time', 'sortTime']\n        ];\n\n        this.infoPanelContainer = document.createElement('div');\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .infoPanel {\n                width: 430px;\n                padding: 10px;\n                background-color: rgba(50, 50, 50, 0.85);\n                border: #555555 2px solid;\n                color: #dddddd;\n                border-radius: 10px;\n                z-index: 9999;\n                font-family: arial;\n                font-size: 11pt;\n                text-align: left;\n                margin: 0;\n                top: 10px;\n                left:10px;\n                position: absolute;\n                pointer-events: auto;\n            }\n\n            .info-panel-cell {\n                margin-bottom: 5px;\n                padding-bottom: 2px;\n            }\n\n            .label-cell {\n                font-weight: bold;\n                font-size: 12pt;\n                width: 140px;\n            }\n\n        `;\n        this.infoPanelContainer.append(style);\n\n        this.infoPanel = document.createElement('div');\n        this.infoPanel.className = 'infoPanel';\n\n        const infoTable = document.createElement('div');\n        infoTable.style.display = 'table';\n\n        for (let layoutEntry of layout) {\n            const row = document.createElement('div');\n            row.style.display = 'table-row';\n            row.className = 'info-panel-row';\n\n            const labelCell = document.createElement('div');\n            labelCell.style.display = 'table-cell';\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\n            labelCell.classList.add('info-panel-cell', 'label-cell');\n\n            const spacerCell = document.createElement('div');\n            spacerCell.style.display = 'table-cell';\n            spacerCell.style.width = '10px';\n            spacerCell.innerHTML = ' ';\n            spacerCell.className = 'info-panel-cell';\n\n            const infoCell = document.createElement('div');\n            infoCell.style.display = 'table-cell';\n            infoCell.innerHTML = '';\n            infoCell.className = 'info-panel-cell';\n\n            this.infoCells[layoutEntry[1]] = infoCell;\n\n            row.appendChild(labelCell);\n            row.appendChild(spacerCell);\n            row.appendChild(infoCell);\n\n            infoTable.appendChild(row);\n        }\n\n        this.infoPanel.appendChild(infoTable);\n        this.infoPanelContainer.append(this.infoPanel);\n        this.infoPanelContainer.style.display = 'none';\n        this.container.appendChild(this.infoPanelContainer);\n\n        this.visible = false;\n    }\n\n    update = function(renderDimensions, cameraPosition, cameraLookAtPosition, cameraUp,\n                      meshCursorPosition, currentFPS, splatCount, splatRenderCount, splatRenderCountPct, lastSortTime) {\n\n        const cameraPosString = `${cameraPosition.x.toFixed(5)}, ${cameraPosition.y.toFixed(5)}, ${cameraPosition.z.toFixed(5)}`;\n        if (this.infoCells.cameraPosition.innerHTML !== cameraPosString) {\n            this.infoCells.cameraPosition.innerHTML = cameraPosString;\n        }\n\n        if (cameraLookAtPosition) {\n            const cla = cameraLookAtPosition;\n            const cameraLookAtString = `${cla.x.toFixed(5)}, ${cla.y.toFixed(5)}, ${cla.z.toFixed(5)}`;\n            if (this.infoCells.cameraLookAt.innerHTML !== cameraLookAtString) {\n                this.infoCells.cameraLookAt.innerHTML = cameraLookAtString;\n            }\n        }\n\n        const cameraUpString = `${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}`;\n        if (this.infoCells.cameraUp.innerHTML !== cameraUpString) {\n            this.infoCells.cameraUp.innerHTML = cameraUpString;\n        }\n\n        if (meshCursorPosition) {\n            const cursPos = meshCursorPosition;\n            const cursorPosString = `${cursPos.x.toFixed(5)}, ${cursPos.y.toFixed(5)}, ${cursPos.z.toFixed(5)}`;\n            this.infoCells.cursorPosition.innerHTML = cursorPosString;\n        } else {\n            this.infoCells.cursorPosition.innerHTML = 'N/A';\n        }\n\n        this.infoCells.fps.innerHTML = currentFPS;\n        this.infoCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n        this.infoCells.renderSplatCount.innerHTML =\n            `${splatRenderCount} splats out of ${splatCount} (${splatRenderCountPct.toFixed(2)}%)`;\n\n        this.infoCells.sortTime.innerHTML = `${lastSortTime.toFixed(3)} ms`;\n\n    };\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.infoPanelContainer);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.infoPanelContainer);\n            this.infoPanelContainer.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n    show() {\n        this.infoPanelContainer.style.display = 'block';\n        this.visible = true;\n    }\n\n    hide() {\n        this.infoPanelContainer.style.display = 'none';\n        this.visible = false;\n    }\n\n}\n","import * as THREE from 'three';\n\nexport class ArrowHelper extends THREE.Object3D {\n\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\n        super();\n\n        this.type = 'ArrowHelper';\n\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\n        lineGeometry.translate(0, length / 2.0, 0);\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\n        coneGeometry.translate(0, length, 0);\n\n        this.position.copy( origin );\n\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.line.matrixAutoUpdate = false;\n        this.add(this.line);\n\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.cone.matrixAutoUpdate = false;\n        this.add(this.cone);\n\n        this.setDirection(dir);\n    }\n\n    setDirection( dir ) {\n        if (dir.y > 0.99999) {\n            this.quaternion.set(0, 0, 0, 1);\n        } else if (dir.y < - 0.99999) {\n            this.quaternion.set(1, 0, 0, 0);\n        } else {\n            _axis.set(dir.z, 0, -dir.x).normalize();\n            const radians = Math.acos(dir.y);\n            this.quaternion.setFromAxisAngle(_axis, radians);\n        }\n    }\n\n    setColor( color ) {\n        this.line.material.color.set(color);\n        this.cone.material.color.set(color);\n    }\n\n    copy(source) {\n        super.copy(source, false);\n        this.line.copy(source.line);\n        this.cone.copy(source.cone);\n        return this;\n    }\n\n    dispose() {\n        this.line.geometry.dispose();\n        this.line.material.dispose();\n        this.cone.geometry.dispose();\n        this.cone.material.dispose();\n    }\n\n}\n","import * as THREE from 'three';\nimport { ArrowHelper } from './ArrowHelper.js';\nimport { disposeAllMeshes } from './Util.js';\n\nexport class SceneHelper {\n\n    constructor(threeScene) {\n        this.threeScene = threeScene;\n        this.splatRenderTarget = null;\n        this.renderTargetCopyQuad = null;\n        this.renderTargetCopyCamera = null;\n        this.meshCursor = null;\n        this.focusMarker = null;\n        this.controlPlane = null;\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    updateSplatRenderTargetForRenderDimensions(width, height) {\n        this.destroySplatRendertarget();\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: true,\n\n        });\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n    }\n\n    destroySplatRendertarget() {\n        if (this.splatRenderTarget) {\n            this.splatRenderTarget = null;\n        }\n    }\n\n    setupRenderTargetCopyObjects() {\n        const uniforms = {\n            'sourceColorTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sourceDepthTexture': {\n                'type': 't',\n                'value': null\n            },\n        };\n        const renderTargetCopyMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n            uniforms: uniforms,\n            depthWrite: false,\n            depthTest: false,\n            transparent: true,\n            blending: THREE.CustomBlending,\n            blendSrc: THREE.SrcAlphaFactor,\n            blendSrcAlpha: THREE.SrcAlphaFactor,\n            blendDst: THREE.OneMinusSrcAlphaFactor,\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\n        });\n        renderTargetCopyMaterial.extensions.fragDepth = true;\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), renderTargetCopyMaterial);\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    }\n\n    destroyRenderTargetCopyObjects() {\n        if (this.renderTargetCopyQuad) {\n            disposeAllMeshes(this.renderTargetCopyQuad);\n            this.renderTargetCopyQuad = null;\n        }\n    }\n\n    setupMeshCursor() {\n        if (!this.meshCursor) {\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\n\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            downArrow.rotation.set(0, 0, Math.PI);\n            downArrow.position.set(0, 1, 0);\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            upArrow.position.set(0, -1, 0);\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n            leftArrow.position.set(1, 0, 0);\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n            rightArrow.position.set(-1, 0, 0);\n\n            this.meshCursor = new THREE.Object3D();\n            this.meshCursor.add(downArrow);\n            this.meshCursor.add(upArrow);\n            this.meshCursor.add(leftArrow);\n            this.meshCursor.add(rightArrow);\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\n            this.threeScene.add(this.meshCursor);\n            this.meshCursor.visible = false;\n        }\n    }\n\n    destroyMeshCursor() {\n        if (this.meshCursor) {\n            disposeAllMeshes(this.meshCursor);\n            this.threeScene.remove(this.meshCursor);\n            this.meshCursor = null;\n        }\n    }\n\n    setMeshCursorVisibility(visible) {\n        this.meshCursor.visible = visible;\n    }\n\n    setMeshCursorPosition(position) {\n        this.meshCursor.position.copy(position);\n    }\n\n    positionAndOrientMeshCursor(position, camera) {\n        this.meshCursor.position.copy(position);\n        this.meshCursor.up.copy(camera.up);\n        this.meshCursor.lookAt(camera.position);\n    }\n\n    setupFocusMarker() {\n        if (!this.focusMarker) {\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\n            focusMarkerMaterial.depthTest = false;\n            focusMarkerMaterial.depthWrite = false;\n            focusMarkerMaterial.transparent = true;\n            this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\n        }\n    }\n\n    destroyFocusMarker() {\n        if (this.focusMarker) {\n            disposeAllMeshes(this.focusMarker);\n            this.focusMarker = null;\n        }\n    }\n\n    updateFocusMarker = function() {\n\n        const tempPosition = new THREE.Vector3();\n        const tempMatrix = new THREE.Matrix4();\n\n        return function(position, camera, viewport) {\n            tempMatrix.copy(camera.matrixWorld).invert();\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\n            tempPosition.normalize().multiplyScalar(10);\n            tempPosition.applyMatrix4(camera.matrixWorld);\n            this.focusMarker.position.copy(tempPosition);\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\n            this.focusMarker.material.uniformsNeedUpdate = true;\n        };\n\n    }();\n\n    setFocusMarkerVisibility(visible) {\n        this.focusMarker.visible = visible;\n    }\n\n    setFocusMarkerOpacity(opacity) {\n        this.focusMarker.material.uniforms.opacity.value = opacity;\n        this.focusMarker.material.uniformsNeedUpdate = true;\n    }\n\n    getFocusMarkerOpacity() {\n        return this.focusMarker.material.uniforms.opacity.value;\n    }\n\n    setupControlPlane() {\n        if (!this.controlPlane) {\n            const planeGeometry = new THREE.PlaneGeometry(1, 1);\n            planeGeometry.rotateX(-Math.PI / 2);\n            const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\n            planeMaterial.transparent = true;\n            planeMaterial.opacity = 0.6;\n            planeMaterial.depthTest = false;\n            planeMaterial.depthWrite = false;\n            planeMaterial.side = THREE.DoubleSide;\n            const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\n            const arrowDir = new THREE.Vector3(0, 1, 0);\n            arrowDir.normalize();\n            const arrowOrigin = new THREE.Vector3(0, 0, 0);\n            const arrowLength = 0.5;\n            const arrowRadius = 0.01;\n            const arrowColor = 0x00dd00;\n            const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\n\n            this.controlPlane = new THREE.Object3D();\n            this.controlPlane.add(planeMesh);\n            this.controlPlane.add(arrowHelper);\n        }\n    }\n\n    destroyControlPlane() {\n        if (this.controlPlane) {\n            disposeAllMeshes(this.controlPlane);\n            this.controlPlane = null;\n        }\n    }\n\n    setControlPlaneVisibility(visible) {\n        this.controlPlane.visible = visible;\n    }\n\n    positionAndOrientControlPlane = function() {\n\n        const tempQuaternion = new THREE.Quaternion();\n        const defaultUp = new THREE.Vector3(0, 1, 0);\n\n        return function(position, up) {\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\n            this.controlPlane.position.copy(position);\n            this.controlPlane.quaternion.copy(tempQuaternion);\n        };\n\n    }();\n\n    addDebugMeshes() {\n        this.debugRoot = this.createDebugMeshes();\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n        this.threeScene.add(this.debugRoot);\n        this.threeScene.add(this.secondaryDebugRoot);\n    }\n\n    destroyDebugMeshes() {\n        for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\n            if (debugRoot) {\n                disposeAllMeshes(debugRoot);\n                this.threeScene.remove(debugRoot);\n            }\n        }\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    createDebugMeshes(renderOrder) {\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const debugMeshRoot = new THREE.Object3D();\n\n        const createMesh = (color, position) => {\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\n            sphereMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(sphereMesh);\n            sphereMesh.position.fromArray(position);\n        };\n\n        createMesh(0xff0000, [-50, 0, 0]);\n        createMesh(0xff0000, [50, 0, 0]);\n        createMesh(0x00ff00, [0, 0, -50]);\n        createMesh(0x00ff00, [0, 0, 50]);\n        createMesh(0xffaa00, [5, 0, 5]);\n\n        return debugMeshRoot;\n    }\n\n    createSecondaryDebugMeshes(renderOrder) {\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n        const debugMeshRoot = new THREE.Object3D();\n\n        let boxColor = 0xBBBBBB;\n        const createMesh = (position) => {\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\n            boxMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(boxMesh);\n            boxMesh.position.fromArray(position);\n        };\n\n        let separation = 10;\n        createMesh([-separation, 0, -separation]);\n        createMesh([-separation, 0, separation]);\n        createMesh([separation, 0, -separation]);\n        createMesh([separation, 0, separation]);\n\n        return debugMeshRoot;\n    }\n\n    static buildDebugMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: false,\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.FrontSide\n        });\n        material.extensions.fragDepth = true;\n\n        return material;\n    }\n\n    static buildFocusMarkerMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n            'realFocusPosition': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'opacity': {\n                'value': 0.0\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n            side: THREE.FrontSide\n        });\n\n        return material;\n    }\n\n    dispose() {\n        this.destroyMeshCursor();\n        this.destroyFocusMarker();\n        this.destroyDebugMeshes();\n        this.destroyControlPlane();\n        this.destroyRenderTargetCopyObjects();\n        this.destroySplatRendertarget();\n    }\n}\n","import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n        this.origin = new THREE.Vector3();\n        this.direction = new THREE.Vector3();\n        this.setParameters(origin, direction);\n    }\n\n    setParameters(origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction).normalize();\n    }\n\n    boxContainsPoint(box, point, epsilon) {\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\n    }\n\n    intersectBox = function() {\n\n        const planeIntersectionPoint = new THREE.Vector3();\n        const planeIntersectionPointArray = [];\n        const originArray = [];\n        const directionArray = [];\n\n        return function(box, outHit) {\n\n            originArray[0] = this.origin.x;\n            originArray[1] = this.origin.y;\n            originArray[2] = this.origin.z;\n            directionArray[0] = this.direction.x;\n            directionArray[1] = this.direction.y;\n            directionArray[2] = this.direction.z;\n\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n                if (outHit) {\n                    outHit.origin.copy(this.origin);\n                    outHit.normal.set(0, 0, 0);\n                    outHit.distance = -1;\n                }\n                return true;\n            }\n\n            for (let i = 0; i < 3; i++) {\n                if (directionArray[i] == 0.0) continue;\n\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n                let multiplier = -Math.sign(directionArray[i]);\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n                if (toSide * multiplier < 0) {\n                    const idx1 = (i + 1) % 3;\n                    const idx2 = (i + 2) % 3;\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\n                                               planeIntersectionPointArray[idx2],\n                                               planeIntersectionPointArray[idx1]);\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n                        if (outHit) {\n                            outHit.origin.copy(planeIntersectionPoint);\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\n                        }\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n    }();\n\n    intersectSphere = function() {\n\n        const toSphereCenterVec = new THREE.Vector3();\n\n        return function(center, radius, outHit) {\n            toSphereCenterVec.copy(center).sub(this.origin);\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\n            const radiusSq = radius * radius;\n\n            if (diffSq > radiusSq) return false;\n\n            const thc = Math.sqrt(radiusSq - diffSq);\n            const t0 = toClosestApproach - thc;\n            const t1 = toClosestApproach + thc;\n\n            if (t1 < 0) return false;\n            let t = t0 < 0 ? t1 : t0;\n\n            if (outHit) {\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\n                outHit.distance = t;\n            }\n            return true;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nexport class Hit {\n\n    constructor() {\n        this.origin = new THREE.Vector3();\n        this.normal = new THREE.Vector3();\n        this.distance = 0;\n        this.splatIndex = 0;\n    }\n\n    set(origin, normal, distance, splatIndex) {\n        this.origin.copy(origin);\n        this.normal.copy(normal);\n        this.distance = distance;\n        this.splatIndex = splatIndex;\n    }\n\n    clone() {\n        const hitClone = new Hit();\n        hitClone.origin.copy(this.origin);\n        hitClone.normal.copy(this.normal);\n        hitClone.distance = this.distance;\n        hitClone.splatIndex = this.splatIndex;\n        return hitClone;\n    }\n\n}\n","import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\n\nexport class Raycaster {\n\n    constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\n        this.ray = new Ray(origin, direction);\n        this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\n    }\n\n    setFromCameraAndScreenPosition = function() {\n\n        const ndcCoords = new THREE.Vector2();\n\n        return function(camera, screenPosition, screenDimensions) {\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\n            if (camera.isPerspectiveCamera) {\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\n                this.camera = camera;\n            } else if (camera.isOrthographicCamera) {\n                this.ray.origin.set(screenPosition.x, screenPosition.y,\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n                this.camera = camera;\n            } else {\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\n            }\n        };\n\n    }();\n\n    intersectSplatMesh = function() {\n\n        const toLocal = new THREE.Matrix4();\n        const fromLocal = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const localRay = new Ray();\n        const tempPoint = new THREE.Vector3();\n\n        return function(splatMesh, outHits = []) {\n            const splatTree = splatMesh.getSplatTree();\n\n            if (!splatTree) return;\n\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\n                const subTree = splatTree.subTrees[s];\n\n                fromLocal.copy(splatMesh.matrixWorld);\n                if (splatMesh.dynamicMode) {\n                    splatMesh.getSceneTransform(s, sceneTransform);\n                    fromLocal.multiply(sceneTransform);\n                }\n                toLocal.copy(fromLocal).invert();\n\n                localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n                localRay.direction.copy(this.ray.origin).add(this.ray.direction);\n                localRay.direction.applyMatrix4(toLocal).sub(localRay.origin).normalize();\n\n                const outHitsForSubTree = [];\n                if (subTree.rootNode) {\n                    this.castRayAtSplatTreeNode(localRay, splatTree, subTree.rootNode, outHitsForSubTree);\n                }\n\n                outHitsForSubTree.forEach((hit) => {\n                    hit.origin.applyMatrix4(fromLocal);\n                    hit.normal.applyMatrix4(fromLocal).normalize();\n                    hit.distance = tempPoint.copy(hit.origin).sub(this.ray.origin).length();\n                });\n\n                outHits.push(...outHitsForSubTree);\n            }\n\n            outHits.sort((a, b) => {\n                if (a.distance > b.distance) return 1;\n                else return -1;\n            });\n\n            return outHits;\n        };\n\n    }();\n\n    castRayAtSplatTreeNode = function() {\n\n        const tempColor = new THREE.Vector4();\n        const tempCenter = new THREE.Vector3();\n        const tempScale = new THREE.Vector3();\n        const tempRotation = new THREE.Quaternion();\n        const tempHit = new Hit();\n        const scaleEpsilon = 0.0000001;\n\n        const origin = new THREE.Vector3(0, 0, 0);\n        const uniformScaleMatrix = new THREE.Matrix4();\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const toSphereSpace = new THREE.Matrix4();\n        const fromSphereSpace = new THREE.Matrix4();\n        const tempRay = new Ray();\n\n        return function(ray, splatTree, node, outHits = []) {\n            if (!ray.intersectBox(node.boundingBox)) {\n                return;\n            }\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n                for (let i = 0; i < node.data.indexes.length; i++) {\n                    const splatGlobalIndex = node.data.indexes[i];\n                    splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor);\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation);\n\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon || tempScale.z <= scaleEpsilon) {\n                        continue;\n                    }\n\n                    if (!this.raycastAgainstTrueSplatEllipsoid) {\n                        const radius = (tempScale.x + tempScale.y + tempScale.z) / 3;\n                        if (ray.intersectSphere(tempCenter, radius, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            outHits.push(hitClone);\n                        }\n                    } else {\n                        scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n                        rotationMatrix.makeRotationFromQuaternion(tempRotation);\n                        const uniformScale = Math.log10(tempColor.w) * 2.0;\n                        uniformScaleMatrix.makeScale(uniformScale, uniformScale, uniformScale);\n                        fromSphereSpace.copy(uniformScaleMatrix).multiply(rotationMatrix).multiply(scaleMatrix);\n                        toSphereSpace.copy(fromSphereSpace).invert();\n                        tempRay.origin.copy(ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\n                        tempRay.direction.copy(ray.origin).add(ray.direction).sub(tempCenter);\n                        tempRay.direction.applyMatrix4(toSphereSpace).sub(tempRay.origin).normalize();\n                        if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\n                            outHits.push(hitClone);\n                        }\n                    }\n                }\n             }\n            if (node.children && node.children.length > 0) {\n                for (let child of node.children) {\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n                }\n            }\n            return outHits;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\n/**\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\n */\nexport class SplatScene {\n\n    constructor(splatBuffer, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(), scale = new THREE.Vector3(1, 1, 1)) {\n        this.splatBuffer = splatBuffer;\n        this.position = position.clone();\n        this.quaternion = quaternion.clone();\n        this.scale = scale.clone();\n        this.transform = new THREE.Matrix4();\n        this.updateTransform();\n    }\n\n    copyTransformData(otherScene) {\n        this.position.copy(otherScene.position);\n        this.quaternion.copy(otherScene.quaternion);\n        this.scale.copy(otherScene.scale);\n        this.transform.copy(otherScene.transform);\n    }\n\n    updateTransform() {\n        this.transform.compose(this.position, this.quaternion, this.scale);\n    }\n}\n","import * as THREE from 'three';\nimport { delayedExecute } from '../Util.js';\n\nclass SplatTreeNode {\n\n    static idGen = 0;\n\n    constructor(min, max, depth, id) {\n        this.min = new THREE.Vector3().copy(min);\n        this.max = new THREE.Vector3().copy(max);\n        this.boundingBox = new THREE.Box3(this.min, this.max);\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\n        this.depth = depth;\n        this.children = [];\n        this.data = null;\n        this.id = id || SplatTreeNode.idGen++;\n    }\n\n}\n\nclass SplatSubTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.sceneDimensions = new THREE.Vector3();\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.rootNode = null;\n        this.nodesWithIndexes = [];\n        this.splatMesh = null;\n    }\n\n    static convertWorkerSubTreeNode(workerSubTreeNode) {\n        const minVector = new THREE.Vector3().fromArray(workerSubTreeNode.min);\n        const maxVector = new THREE.Vector3().fromArray(workerSubTreeNode.max);\n        const convertedNode = new SplatTreeNode(minVector, maxVector, workerSubTreeNode.depth, workerSubTreeNode.id);\n        if (workerSubTreeNode.data.indexes) {\n            convertedNode.data = {\n                'indexes': []\n            };\n            for (let index of workerSubTreeNode.data.indexes) {\n                convertedNode.data.indexes.push(index);\n            }\n        }\n        if (workerSubTreeNode.children) {\n            for (let child of workerSubTreeNode.children) {\n                convertedNode.children.push(SplatSubTree.convertWorkerSubTreeNode(child));\n            }\n        }\n        return convertedNode;\n    }\n\n    static convertWorkerSubTree(workerSubTree, splatMesh) {\n        const convertedSubTree = new SplatSubTree(workerSubTree.maxDepth, workerSubTree.maxCentersPerNode);\n        convertedSubTree.sceneMin = new THREE.Vector3().fromArray(workerSubTree.sceneMin);\n        convertedSubTree.sceneMax = new THREE.Vector3().fromArray(workerSubTree.sceneMax);\n\n        convertedSubTree.splatMesh = splatMesh;\n        convertedSubTree.rootNode = SplatSubTree.convertWorkerSubTreeNode(workerSubTree.rootNode);\n\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        convertedSubTree.nodesWithIndexes = [];\n        visitLeavesFromNode(convertedSubTree.rootNode, (node) => {\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n                convertedSubTree.nodesWithIndexes.push(node);\n            }\n        });\n\n        return convertedSubTree;\n    }\n}\n\nlet splatTreeWorker;\nfunction createSplatTreeWorker(self) {\n\n    class WorkerBox3 {\n\n        constructor(min, max) {\n            this.min = [min[0], min[1], min[2]];\n            this.max = [max[0], max[1], max[2]];\n        }\n\n        containsPoint(point) {\n            return point[0] >= this.min[0] && point[0] <= this.max[0] &&\n                   point[1] >= this.min[1] && point[1] <= this.max[1] &&\n                   point[2] >= this.min[2] && point[2] <= this.max[2];\n        }\n    }\n\n    class WorkerSplatSubTree {\n\n        constructor(maxDepth, maxCentersPerNode) {\n            this.maxDepth = maxDepth;\n            this.maxCentersPerNode = maxCentersPerNode;\n            this.sceneDimensions = [];\n            this.sceneMin = [];\n            this.sceneMax = [];\n            this.rootNode = null;\n            this.addedIndexes = {};\n            this.nodesWithIndexes = [];\n            this.splatMesh = null;\n        }\n\n    }\n\n    class WorkerSplatTreeNode {\n        static idGen = 0;\n        constructor(min, max, depth, id) {\n            this.min = [min[0], min[1], min[2]];\n            this.max = [max[0], max[1], max[2]];\n            this.center = [(max[0] - min[0]) * 0.5 + min[0],\n                           (max[1] - min[1]) * 0.5 + min[1],\n                           (max[2] - min[2]) * 0.5 + min[2]];\n            this.depth = depth;\n            this.children = [];\n            this.data = null;\n            this.id = id || WorkerSplatTreeNode.idGen++;\n        }\n\n    }\n\n    processSplatTreeNode = function(tree, node, indexToCenter, sceneCenters) {\n        const splatCount = node.data.indexes.length;\n\n        if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\n            const newIndexes = [];\n            for (let i = 0; i < node.data.indexes.length; i++) {\n                if (!tree.addedIndexes[node.data.indexes[i]]) {\n                    newIndexes.push(node.data.indexes[i]);\n                    tree.addedIndexes[node.data.indexes[i]] = true;\n                }\n            }\n            node.data.indexes = newIndexes;\n            node.data.indexes.sort((a, b) => {\n                if (a > b) return 1;\n                else return -1;\n            });\n            tree.nodesWithIndexes.push(node);\n            return;\n        }\n\n        const nodeDimensions = [node.max[0] - node.min[0],\n                                node.max[1] - node.min[1],\n                                node.max[2] - node.min[2]];\n        const halfDimensions = [nodeDimensions[0] * 0.5,\n                                nodeDimensions[1] * 0.5,\n                                nodeDimensions[2] * 0.5];\n        const nodeCenter = [node.min[0] + halfDimensions[0],\n                            node.min[1] + halfDimensions[1],\n                            node.min[2] + halfDimensions[2]];\n\n        const childrenBounds = [\n            // top section, clockwise from upper-left (looking from above, +Y)\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2]],\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\n\n            // bottom section, clockwise from lower-left (looking from above, +Y)\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\n        ];\n\n        const splatCounts = [];\n        const baseIndexes = [];\n        for (let i = 0; i < childrenBounds.length; i++) {\n            splatCounts[i] = 0;\n            baseIndexes[i] = [];\n        }\n\n        const center = [0, 0, 0];\n        for (let i = 0; i < splatCount; i++) {\n            const splatGlobalIndex = node.data.indexes[i];\n            const centerBase = indexToCenter[splatGlobalIndex];\n            center[0] = sceneCenters[centerBase];\n            center[1] = sceneCenters[centerBase + 1];\n            center[2] = sceneCenters[centerBase + 2];\n            for (let j = 0; j < childrenBounds.length; j++) {\n                if (childrenBounds[j].containsPoint(center)) {\n                    splatCounts[j]++;\n                    baseIndexes[j].push(splatGlobalIndex);\n                }\n            }\n        }\n\n        for (let i = 0; i < childrenBounds.length; i++) {\n            const childNode = new WorkerSplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\n            childNode.data = {\n                'indexes': baseIndexes[i]\n            };\n            node.children.push(childNode);\n        }\n\n        node.data = {};\n        for (let child of node.children) {\n            processSplatTreeNode(tree, child, indexToCenter, sceneCenters);\n        }\n        return;\n    };\n\n    const buildSubTree = (sceneCenters, maxDepth, maxCentersPerNode) => {\n\n        const sceneMin = [0, 0, 0];\n        const sceneMax = [0, 0, 0];\n        const indexes = [];\n        const centerCount = Math.floor(sceneCenters.length / 4);\n        for ( let i = 0; i < centerCount; i ++) {\n            const base = i * 4;\n            const x = sceneCenters[base];\n            const y = sceneCenters[base + 1];\n            const z = sceneCenters[base + 2];\n            const index = Math.round(sceneCenters[base + 3]);\n            if (i === 0 || x < sceneMin[0]) sceneMin[0] = x;\n            if (i === 0 || x > sceneMax[0]) sceneMax[0] = x;\n            if (i === 0 || y < sceneMin[1]) sceneMin[1] = y;\n            if (i === 0 || y > sceneMax[1]) sceneMax[1] = y;\n            if (i === 0 || z < sceneMin[2]) sceneMin[2] = z;\n            if (i === 0 || z > sceneMax[2]) sceneMax[2] = z;\n            indexes.push(index);\n        }\n        const subTree = new WorkerSplatSubTree(maxDepth, maxCentersPerNode);\n        subTree.sceneMin = sceneMin;\n        subTree.sceneMax = sceneMax;\n        subTree.rootNode = new WorkerSplatTreeNode(subTree.sceneMin, subTree.sceneMax, 0);\n        subTree.rootNode.data = {\n            'indexes': indexes\n        };\n\n        return subTree;\n    };\n\n    function createSplatTree(allCenters, maxDepth, maxCentersPerNode) {\n        const indexToCenter = [];\n        for (let sceneCenters of allCenters) {\n            const centerCount = Math.floor(sceneCenters.length / 4);\n            for ( let i = 0; i < centerCount; i ++) {\n                const base = i * 4;\n                const index = Math.round(sceneCenters[base + 3]);\n                indexToCenter[index] = base;\n            }\n        }\n        const subTrees = [];\n        for (let sceneCenters of allCenters) {\n            const subTree = buildSubTree(sceneCenters, maxDepth, maxCentersPerNode);\n            subTrees.push(subTree);\n            processSplatTreeNode(subTree, subTree.rootNode, indexToCenter, sceneCenters);\n        }\n        self.postMessage({\n            'subTrees': subTrees\n        });\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.process) {\n            createSplatTree(e.data.process.centers, e.data.process.maxDepth, e.data.process.maxCentersPerNode);\n        }\n    };\n}\n\nfunction workerProcessCenters(centers, transferBuffers, maxDepth, maxCentersPerNode) {\n    splatTreeWorker.postMessage({\n        'process': {\n            'centers': centers,\n            'maxDepth': maxDepth,\n            'maxCentersPerNode': maxCentersPerNode\n        }\n    }, transferBuffers);\n}\n\nfunction checkAndCreateWorker() {\n    if (!splatTreeWorker) {\n        splatTreeWorker = new Worker(\n            URL.createObjectURL(\n                new Blob(['(', createSplatTreeWorker.toString(), ')(self)'], {\n                    type: 'application/javascript',\n                }),\n            ),\n        );\n    }\n}\n\n/**\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\n */\nexport class SplatTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.subTrees = [];\n        this.splatMesh = null;\n    }\n\n    /**\n     * Construct this instance of SplatTree from an instance of SplatMesh.\n     *\n     * @param {SplatMesh} splatMesh The instance of SplatMesh from which to construct this splat tree.\n     * @param {function} filterFunc Optional function to filter out unwanted splats.\n     * @param {function} onIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                            builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                    the format produced by the splat tree builder worker starts and ends.\n     * @return {undefined}\n     */\n    processSplatMesh = function(splatMesh, filterFunc = () => true, onIndexesUpload, onSplatTreeConstruction) {\n        checkAndCreateWorker();\n\n        this.splatMesh = splatMesh;\n        this.subTrees = [];\n        const center = new THREE.Vector3();\n\n        const addCentersForScene = (splatOffset, splatCount) => {\n            const sceneCenters = new Float32Array(splatCount * 4);\n            let addedCount = 0;\n            for (let i = 0; i < splatCount; i++) {\n                const globalSplatIndex = i + splatOffset;\n                if (filterFunc(globalSplatIndex)) {\n                    splatMesh.getSplatCenter(globalSplatIndex, center);\n                    const addBase = addedCount * 4;\n                    sceneCenters[addBase] = center.x;\n                    sceneCenters[addBase + 1] = center.y;\n                    sceneCenters[addBase + 2] = center.z;\n                    sceneCenters[addBase + 3] = globalSplatIndex;\n                    addedCount++;\n                }\n            }\n            return sceneCenters;\n        };\n\n        const diposeSplatTreeWorker = () => {\n            splatTreeWorker.terminate();\n            splatTreeWorker = null;\n        };\n\n        const checkForEarlyExit = (resolve) => {\n            if (splatMesh.disposed) {\n                diposeSplatTreeWorker();\n                resolve();\n                return true;\n            }\n            return false;\n        };\n\n        return new Promise((resolve) => {\n\n            if (onIndexesUpload) onIndexesUpload(false);\n\n            delayedExecute(() => {\n\n                if (checkForEarlyExit(resolve)) return;\n\n                const allCenters = [];\n                if (splatMesh.dynamicMode) {\n                    let splatOffset = 0;\n                    for (let s = 0; s < splatMesh.scenes.length; s++) {\n                        const scene = splatMesh.getScene(s);\n                        const splatCount = scene.splatBuffer.getSplatCount();\n                        const sceneCenters = addCentersForScene(splatOffset, splatCount);\n                        allCenters.push(sceneCenters);\n                        splatOffset += splatCount;\n                    }\n                } else {\n                    const sceneCenters = addCentersForScene(0, splatMesh.getSplatCount());\n                    allCenters.push(sceneCenters);\n                }\n\n                splatTreeWorker.onmessage = (e) => {\n\n                    if (checkForEarlyExit(resolve)) return;\n\n                    if (e.data.subTrees) {\n\n                        if (onSplatTreeConstruction) onSplatTreeConstruction(false);\n\n                        delayedExecute(() => {\n\n                            if (checkForEarlyExit(resolve)) return;\n\n                            for (let workerSubTree of e.data.subTrees) {\n                                const convertedSubTree = SplatSubTree.convertWorkerSubTree(workerSubTree, splatMesh);\n                                this.subTrees.push(convertedSubTree);\n                            }\n                            diposeSplatTreeWorker();\n\n                            if (onSplatTreeConstruction) onSplatTreeConstruction(true);\n\n                            delayedExecute(() => {\n                                resolve();\n                            });\n\n                        });\n                    }\n                };\n\n                delayedExecute(() => {\n                    if (checkForEarlyExit(resolve)) return;\n                    if (onIndexesUpload) onIndexesUpload(true);\n                    const transferBuffers = allCenters.map((array) => array.buffer);\n                    workerProcessCenters(allCenters, transferBuffers, this.maxDepth, this.maxCentersPerNode);\n                });\n\n            });\n\n        });\n\n    };\n\n    countLeaves() {\n\n        let leafCount = 0;\n        this.visitLeaves(() => {\n            leafCount++;\n        });\n\n        return leafCount;\n    }\n\n    visitLeaves(visitFunc) {\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        for (let subTree of this.subTrees) {\n            visitLeavesFromNode(subTree.rootNode, visitFunc);\n        }\n    }\n\n}\n","function WebGLExtensions( gl ) {\n\n    const extensions = {};\n\n    function getExtension( name ) {\n\n        if ( extensions[name] !== undefined ) {\n\n            return extensions[name];\n\n        }\n\n        let extension;\n\n        switch ( name ) {\n\n            case 'WEBGL_depth_texture':\n                extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) ||\n                            gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n                break;\n\n            case 'EXT_texture_filter_anisotropic':\n                extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||\n                            gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||\n                            gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n                break;\n\n            case 'WEBGL_compressed_texture_s3tc':\n                extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||\n                            gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||\n                            gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n                break;\n\n            case 'WEBGL_compressed_texture_pvrtc':\n                extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) ||\n                           gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n                break;\n\n            default:\n                extension = gl.getExtension( name );\n\n        }\n\n        extensions[name] = extension;\n\n        return extension;\n\n    }\n\n    return {\n\n        has: function( name ) {\n\n            return getExtension( name ) !== null;\n\n        },\n\n        init: function( capabilities ) {\n\n            if ( capabilities.isWebGL2 ) {\n\n                getExtension( 'EXT_color_buffer_float' );\n                getExtension( 'WEBGL_clip_cull_distance' );\n\n            } else {\n\n                getExtension( 'WEBGL_depth_texture' );\n                getExtension( 'OES_texture_float' );\n                getExtension( 'OES_texture_half_float' );\n                getExtension( 'OES_texture_half_float_linear' );\n                getExtension( 'OES_standard_derivatives' );\n                getExtension( 'OES_element_index_uint' );\n                getExtension( 'OES_vertex_array_object' );\n                getExtension( 'ANGLE_instanced_arrays' );\n\n            }\n\n            getExtension( 'OES_texture_float_linear' );\n            getExtension( 'EXT_color_buffer_half_float' );\n            getExtension( 'WEBGL_multisampled_render_to_texture' );\n\n        },\n\n        get: function( name ) {\n\n            const extension = getExtension( name );\n\n            if ( extension === null ) {\n\n                console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n            }\n\n            return extension;\n\n        }\n\n    };\n\n}\n\nexport { WebGLExtensions };\n","function WebGLCapabilities( gl, extensions, parameters ) {\n\n    let maxAnisotropy;\n\n    function getMaxAnisotropy() {\n\n        if ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n        if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n            const extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n            maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n        } else {\n\n            maxAnisotropy = 0;\n\n        }\n\n        return maxAnisotropy;\n\n    }\n\n    function getMaxPrecision( precision ) {\n\n        if ( precision === 'highp' ) {\n\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n                return 'highp';\n\n            }\n\n            precision = 'mediump';\n\n        }\n\n        if ( precision === 'mediump' ) {\n\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n                return 'mediump';\n\n            }\n\n        }\n\n        return 'lowp';\n\n    }\n\n    const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';\n\n    let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n    const maxPrecision = getMaxPrecision( precision );\n\n    if ( maxPrecision !== precision ) {\n\n        console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n        precision = maxPrecision;\n\n    }\n\n    const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n\n    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n    const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n    const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n    const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n    const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n    const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n    const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n    const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n    const vertexTextures = maxVertexTextures > 0;\n    const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n    const floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n    const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;\n\n    return {\n\n        isWebGL2: isWebGL2,\n\n        drawBuffers: drawBuffers,\n\n        getMaxAnisotropy: getMaxAnisotropy,\n        getMaxPrecision: getMaxPrecision,\n\n        precision: precision,\n        logarithmicDepthBuffer: logarithmicDepthBuffer,\n\n        maxTextures: maxTextures,\n        maxVertexTextures: maxVertexTextures,\n        maxTextureSize: maxTextureSize,\n        maxCubemapSize: maxCubemapSize,\n\n        maxAttributes: maxAttributes,\n        maxVertexUniforms: maxVertexUniforms,\n        maxVaryings: maxVaryings,\n        maxFragmentUniforms: maxFragmentUniforms,\n\n        vertexTextures: vertexTextures,\n        floatFragmentTextures: floatFragmentTextures,\n        floatVertexTextures: floatVertexTextures,\n\n        maxSamples: maxSamples\n\n    };\n\n}\n\n\nexport { WebGLCapabilities };\n","import * as THREE from 'three';\nimport { SplatScene } from './SplatScene.js';\nimport { SplatTree } from './splattree/SplatTree.js';\nimport { WebGLExtensions } from './three-shim/WebGLExtensions.js';\nimport { WebGLCapabilities } from './three-shim/WebGLCapabilities.js';\nimport { uintEncodedFloat, rgbaArrayToInteger } from './Util.js';\nimport { Constants } from './Constants.js';\n\nconst dummyGeometry = new THREE.BufferGeometry();\nconst dummyMaterial = new THREE.MeshBasicMaterial();\n\nconst COVARIANCES_ELEMENTS_PER_SPLAT = 6;\nconst CENTER_COLORS_ELEMENTS_PER_SPLAT = 4;\n\n/**\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\n */\nexport class SplatMesh extends THREE.Mesh {\n\n    constructor(dynamicMode = true, halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1,\n                enableDistancesComputationOnGPU = true, integerBasedDistancesComputation = false) {\n        super(dummyGeometry, dummyMaterial);\n        // Reference to a Three.js renderer\n        this.renderer = undefined;\n        // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n        // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\n        // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\n        // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\n        // can be overriden via parameters to the individual functions that are used to retrieve splat data.\n        this.dynamicMode = dynamicMode;\n        // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\n        this.devicePixelRatio = devicePixelRatio;\n        // Use a transform feedback to calculate splat distances from the camera\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\n        // Use a faster integer-based approach for calculating splat distances from the camera\n        this.integerBasedDistancesComputation = integerBasedDistancesComputation;\n        // The individual splat scenes stored in this splat mesh, each containing their own transform\n        this.scenes = [];\n        // Special octree tailored to SplatMesh instances\n        this.splatTree = null;\n        // Textures in which splat data will be stored for rendering\n        this.splatDataTextures = {};\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'transformIndexesBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n            'transformIndexesLoc': -1,\n            'transformsLocs': []\n        };\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSceneIndexMap = [];\n\n        this.lastBuildSplatCount = 0;\n        this.lastBuildScenes = [];\n        this.lastBuildMaxSplatCount = 0;\n        this.lastBuildSceneCount = 0;\n        this.firstRenderTime = -1;\n        this.finalBuild = false;\n\n        this.webGLUtils = null;\n\n        this.boundingBox = new THREE.Box3();\n        this.calculatedSceneCenter = new THREE.Vector3();\n        this.maxRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n\n        this.disposed = false;\n    }\n\n    /**\n     * Build the Three.js material that is used to render the splats.\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n     *                             that the splat count might change\n     * @return {THREE.ShaderMaterial}\n     */\n    static buildMaterial(dynamicMode = false) {\n\n        // Contains the code to project 3D covariance to 2D and from there calculate the quad (using the eigen vectors of the\n        // 2D covariance) that is ultimately rasterized\n        let vertexShaderSource = `\n            precision highp float;\n            #include <common>\n\n            attribute uint splatIndex;\n\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D centersColorsTexture;`;\n\n        if (dynamicMode) {\n            vertexShaderSource += `\n                uniform highp usampler2D transformIndexesTexture;\n                uniform highp mat4 transforms[${Constants.MaxScenes}];\n                uniform vec2 transformIndexesTextureSize;\n            `;\n        }\n\n        vertexShaderSource += `\n            uniform vec2 focal;\n            uniform vec2 viewport;\n            uniform vec2 basisViewport;\n            uniform vec2 covariancesTextureSize;\n            uniform vec2 centersColorsTextureSize;\n            uniform float visibleRegionRadius;\n            uniform float visibleRegionFadeStartRadius;\n            uniform float firstRenderTime;\n            uniform float currentTime;\n            uniform int fadeInComplete;\n            uniform vec3 sceneCenter;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            const float sqrt8 = sqrt(8.0);\n\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\n            vec4 uintToRGBAVec (uint u) {\n               uvec4 urgba = mask4 & u;\n               urgba = urgba >> shift4;\n               vec4 rgba = vec4(urgba) * encodeNorm4;\n               return rgba;\n            }\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            void main () {\n\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));`;\n\n            if (dynamicMode) {\n                vertexShaderSource += `\n                    uint transformIndex = texture(transformIndexesTexture, getDataUV(1, 0, transformIndexesTextureSize)).r;\n                    mat4 transform = transforms[transformIndex];\n                    mat4 transformModelViewMatrix = modelViewMatrix * transform;\n                `;\n            } else {\n                vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\n            }\n\n            vertexShaderSource += `\n                vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                float clip = 1.2 * clipCenter.w;\n                if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n\n                vPosition = position.xy;\n                vColor = uintToRGBAVec(sampledCenterColor.r);\n\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\n\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\n\n                // Construct the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                // require a non-linear component (perspective division) which would yield a non-gaussian result. (This assumes\n                // the current projection is a perspective projection).\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\n                mat3 J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                    0., 0., 0.\n                );\n\n                // Concatenate the projection approximation with the model-view transformation\n                mat3 W = transpose(mat3(transformModelViewMatrix));\n                mat3 T = W * J;\n\n                // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\n                // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * eigen-value), which is\n                // equal to scaling them by sqrt(8) standard deviations.\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\n                // times the maximum eigen-value, or 3 standard deviations. They then use the inverse 2D covariance\n                // matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by calculating the\n                // full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = traceOver2 - term2;\n\n                float transparentAdjust = step(1.0 / 255.0, vColor.a);\n                eigenValue2 = eigenValue2 * transparentAdjust; // hide splat if alpha is zero\n\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                // since the eigen vectors are orthogonal, we derive the second one from the first\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n\n                // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\n                vec2 basisVector1 = eigenVector1 * sqrt8 * sqrt(eigenValue1);\n                vec2 basisVector2 = eigenVector2 * sqrt8 * sqrt(eigenValue2);\n\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) * basisViewport * 2.0;\n\n                // Similarly scale the position data we send to the fragment shader\n                vPosition *= sqrt8;\n\n                if (fadeInComplete == 0) {\n                    float opacityAdjust = 1.0;\n                    float centerDist = length(splatCenter - sceneCenter);\n                    float renderTime = max(currentTime - firstRenderTime, 0.0);\n\n                    float fadeDistance = 0.75;\n                    float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\n                    distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\n                                               (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\n                                               distanceLoadFadeInFactor;\n                    opacityAdjust *= distanceLoadFadeInFactor;\n                    vColor.a *= opacityAdjust;\n                }\n\n                gl_Position = vec4(ndcCenter.xy  + ndcOffset, ndcCenter.z, 1.0);\n\n            }`;\n\n        const fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n                vec3 color = vColor.rgb;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                gl_FragColor = vec4(color.rgb, opacity);\n            }`;\n\n        const uniforms = {\n            'sceneCenter': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'fadeInComplete': {\n                'type': 'i',\n                'value': 0\n            },\n            'visibleRegionFadeStartRadius': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'visibleRegionRadius': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'currentTime': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'firstRenderTime': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'covariancesTexture': {\n                'type': 't',\n                'value': null\n            },\n            'centersColorsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'focal': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'basisViewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'debugColor': {\n                'type': 'v3',\n                'value': new THREE.Color()\n            },\n            'covariancesTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'centersColorsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            }\n        };\n\n        if (dynamicMode) {\n            uniforms['transformIndexesTexture'] = {\n                'type': 't',\n                'value': null\n            };\n            const transformMatrices = [];\n            for (let i = 0; i < Constants.MaxScenes; i++) {\n                transformMatrices.push(new THREE.Matrix4());\n            }\n            uniforms['transforms'] = {\n                'type': 'mat4',\n                'value': transformMatrices\n            };\n            uniforms['transformIndexesTextureSize'] = {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            };\n        }\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.NormalBlending,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    /**\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\n     * @return {THREE.InstancedBufferGeometry}\n     */\n    static buildGeomtery(maxSplatCount) {\n\n        const baseGeometry = new THREE.BufferGeometry();\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n        // Vertices for the instanced quad\n        const positionsArray = new Float32Array(4 * 3);\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\n        baseGeometry.setAttribute('position', positions);\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\n        positions.needsUpdate = true;\n\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n        // Splat index buffer\n        const splatIndexArray = new Uint32Array(maxSplatCount);\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatIndex', splatIndexes);\n\n        geometry.instanceCount = 0;\n\n        return geometry;\n    }\n\n    /**\n     * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\n     * transform data (position, scale, rotation) passed to the splat mesh during the build process.\n     * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\n     * @param {Array<object>} sceneOptions Array of options objects: {\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @return {Array<THREE.Matrix4>}\n     */\n    static buildScenes(splatBuffers, sceneOptions) {\n        const scenes = [];\n        scenes.length = splatBuffers.length;\n        for (let i = 0; i < splatBuffers.length; i++) {\n            const splatBuffer = splatBuffers[i];\n            const options = sceneOptions[i] || {};\n            let positionArray = options['position'] || [0, 0, 0];\n            let rotationArray = options['rotation'] || [0, 0, 0, 1];\n            let scaleArray = options['scale'] || [1, 1, 1];\n            const position = new THREE.Vector3().fromArray(positionArray);\n            const rotation = new THREE.Quaternion().fromArray(rotationArray);\n            const scale = new THREE.Vector3().fromArray(scaleArray);\n            scenes[i] = SplatMesh.createScene(splatBuffer, position, rotation, scale);\n        }\n        return scenes;\n    }\n\n    static createScene(splatBuffer, position, rotation, scale) {\n        return new SplatScene(splatBuffer, position, rotation, scale);\n    }\n\n    /**\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\n     * local data within a single scene.\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\n     * @return {object}\n     */\n    static buildSplatIndexMaps(splatBuffers) {\n        const localSplatIndexMap = [];\n        const sceneIndexMap = [];\n        let totalSplatCount = 0;\n        for (let s = 0; s < splatBuffers.length; s++) {\n            const splatBuffer = splatBuffers[s];\n            const maxSplatCount = splatBuffer.getMaxSplatCount();\n            for (let i = 0; i < maxSplatCount; i++) {\n                localSplatIndexMap[totalSplatCount] = i;\n                sceneIndexMap[totalSplatCount] = s;\n                totalSplatCount++;\n            }\n        }\n        return {\n            localSplatIndexMap,\n            sceneIndexMap\n        };\n    }\n\n    /**\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\n     * @param {SplatMesh} splatMesh SplatMesh instance for which the splat tree will be built\n     * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                            builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {SplatTree}\n     */\n    static buildSplatTree = function(splatMesh, minAlphas = [], onSplatTreeIndexesUpload, onSplatTreeConstruction) {\n        return new Promise((resolve) => {\n            // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\n            // be configured on a per-scene basis\n            const splatTree = new SplatTree(8, 1000);\n            console.time('SplatTree build');\n            const splatColor = new THREE.Vector4();\n            splatTree.processSplatMesh(splatMesh, (splatIndex) => {\n                splatMesh.getSplatColor(splatIndex, splatColor);\n                const sceneIndex = splatMesh.getSceneIndexForSplat(splatIndex);\n                const minAlpha = minAlphas[sceneIndex] || 1;\n                return splatColor.w >= minAlpha;\n            }, onSplatTreeIndexesUpload, onSplatTreeConstruction)\n            .then(() => {\n                console.timeEnd('SplatTree build');\n\n                let leavesWithVertices = 0;\n                let avgSplatCount = 0;\n                let maxSplatCount = 0;\n                let nodeCount = 0;\n\n                splatTree.visitLeaves((node) => {\n                    const nodeSplatCount = node.data.indexes.length;\n                    if (nodeSplatCount > 0) {\n                        avgSplatCount += nodeSplatCount;\n                        maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                        nodeCount++;\n                        leavesWithVertices++;\n                    }\n                });\n                console.log(`SplatTree leaves: ${splatTree.countLeaves()}`);\n                console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n                avgSplatCount = avgSplatCount / nodeCount;\n                console.log(`Avg splat count per node: ${avgSplatCount}`);\n                console.log(`Total splat count: ${splatMesh.getSplatCount()}`);\n                resolve(splatTree);\n            });\n        });\n    };\n\n    /**\n     * Construct this instance of SplatMesh.\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\n     * @param {Array<object>} sceneOptions Dynamic options for each scene {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     * }\n     * @param {boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\n     *                                      says to keep the transform from the existing scene.\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                            builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     */\n    build(splatBuffers, sceneOptions, keepSceneTransforms = true, finalBuild = false,\n          onSplatTreeIndexesUpload, onSplatTreeConstruction) {\n\n        this.finalBuild = finalBuild;\n\n        const maxSplatCount = SplatMesh.getTotalMaxSplatCountForSplatBuffers(splatBuffers);\n\n        const newScenes = SplatMesh.buildScenes(splatBuffers, sceneOptions);\n        if (keepSceneTransforms) {\n            for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\n                const newScene = newScenes[i];\n                const existingScene = this.getScene(i);\n                newScene.copyTransformData(existingScene);\n            }\n        }\n        this.scenes = newScenes;\n\n        let isUpdateBuild = true;\n        if (this.scenes.length > 1 ||\n            this.lastBuildSceneCount !== this.scenes.length ||\n            this.lastBuildMaxSplatCount !== maxSplatCount ||\n            this.scenes[0].splatBuffer !== this.lastBuildScenes[0].splatBuffer) {\n                isUpdateBuild = false;\n       }\n       if (!isUpdateBuild) {\n            isUpdateBuild = false;\n            this.boundingBox = new THREE.Box3();\n            this.maxRadius = 0;\n            this.visibleRegionRadius = 0;\n            this.visibleRegionFadeStartRadius = 0;\n            this.firstRenderTime = -1;\n            this.finalBuild = false;\n            this.lastBuildScenes = [];\n            this.lastBuildSplatCount = 0;\n            this.lastBuildMaxSplatCount = 0;\n            this.disposeMeshData();\n            this.geometry = SplatMesh.buildGeomtery(maxSplatCount);\n            this.material = SplatMesh.buildMaterial(this.dynamicMode);\n            const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\n            this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\n            this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\n        }\n\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\n        this.resetGPUDataFromSplatBuffers(isUpdateBuild);\n\n        for (let i = 0; i < this.scenes.length; i++) {\n            this.lastBuildScenes[i] = this.scenes[i];\n        }\n        this.lastBuildSplatCount = this.getSplatCount();\n        this.lastBuildMaxSplatCount = this.getMaxSplatCount();\n        this.lastBuildSceneCount = this.scenes.length;\n\n        if (finalBuild) {\n            this.disposeSplatTree();\n            SplatMesh.buildSplatTree(this, sceneOptions.map(options => options.splatAlphaRemovalThreshold || 1),\n                                     onSplatTreeIndexesUpload, onSplatTreeConstruction)\n            .then((splatTree) => {\n                this.splatTree = splatTree;\n            });\n        }\n    }\n\n    /**\n     * Dispose all resources held by the splat mesh\n     */\n    dispose() {\n        this.disposeMeshData();\n        this.disposeTextures();\n        this.disposeSplatTree();\n        if (this.enableDistancesComputationOnGPU) {\n            this.disposeDistancesComputationGPUResources();\n        }\n        this.disposed = true;\n    }\n\n    /**\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\n     */\n    disposeMeshData() {\n        if (this.geometry && this.geometry !== dummyGeometry) {\n            this.geometry.dispose();\n            this.geometry = null;\n        }\n        if (this.material) {\n            this.material.dispose();\n            this.material = null;\n        }\n    }\n\n    disposeTextures() {\n        for (let textureKey in this.splatDataTextures) {\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\n                const textureContainer = this.splatDataTextures[textureKey];\n                if (textureContainer.texture) {\n                    textureContainer.texture.dispose();\n                    textureContainer.texture = null;\n                }\n            }\n        }\n        this.splatDataTextures = null;\n    }\n\n    disposeSplatTree() {\n        this.splatTree = null;\n    }\n\n    getSplatTree() {\n        return this.splatTree;\n    }\n\n    /**\n     * Refresh data textures and GPU buffers for splat distance pre-computation with data from the splat buffers for this mesh.\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\n     */\n    resetGPUDataFromSplatBuffers(isUpdateBuild) {\n        this.uploadSplatDataToTextures(isUpdateBuild);\n        if (this.enableDistancesComputationOnGPU) {\n            this.updateGPUCentersBufferForDistancesComputation(isUpdateBuild);\n            this.updateGPUTransformIndexesBufferForDistancesComputation();\n        }\n    }\n\n    static computeTextureUpdateRegion(startSplat, endSplat, textureWidth, textureHeight, elementsPerTexel, elementsPerSplat) {\n        const texelsPerSplat = elementsPerSplat / elementsPerTexel;\n\n        const startSplatTexels = startSplat * texelsPerSplat;\n        const startRow = Math.floor(startSplatTexels / textureWidth);\n        const startRowElement = startRow * textureWidth * elementsPerTexel;\n\n        const endSplatTexels = endSplat * texelsPerSplat;\n        const endRow = Math.floor(endSplatTexels / textureWidth);\n        const endRowEndElement = endRow * textureWidth * elementsPerTexel + (textureWidth * elementsPerTexel);\n\n        return {\n            'dataStart': startRowElement,\n            'dataEnd': endRowEndElement,\n            'startRow': startRow,\n            'endRow': endRow\n        };\n    }\n\n     updateDataTexture(paddedData, textureDesc, textureProps, elementsPerTexel, elementsPerSplat, bytesPerElement) {\n        const splatCount = this.getSplatCount();\n        const gl = this.renderer.getContext();\n        const updateRegion = SplatMesh.computeTextureUpdateRegion(this.lastBuildSplatCount, splatCount - 1, textureDesc.size.x,\n                                                                  textureDesc.size.y, elementsPerTexel, elementsPerSplat);\n        const updateElementCount = updateRegion.dataEnd - updateRegion.dataStart;\n        const updateDataView = new paddedData.constructor(paddedData.buffer,\n                                                          updateRegion.dataStart * bytesPerElement, updateElementCount);\n        const updateHeight = updateRegion.endRow - updateRegion.startRow + 1;\n        const dataTexture = textureDesc.texture;\n        const glType = this.webGLUtils.convert(dataTexture.type);\n        const glFormat = this.webGLUtils.convert(dataTexture.format, dataTexture.colorSpace);\n        const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n        gl.bindTexture(gl.TEXTURE_2D, textureProps.__webglTexture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, updateRegion.startRow,\n                         textureDesc.size.x, updateHeight, glFormat, glType, updateDataView);\n        gl.bindTexture(gl.TEXTURE_2D, currentTexture);\n    }\n\n    /**\n     * Refresh data textures with data from the splat buffers for this mesh.\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\n     */\n    uploadSplatDataToTextures(isUpdateBuild) {\n\n        this.checkForMultiSceneUpdateCondition(isUpdateBuild, 'uploadSplatDataToTextures', 'isUpdateBuild');\n\n        const COVARIANCES_ELEMENTS_PER_TEXEL = 2;\n        const CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\n        const TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL = 1;\n\n        const maxSplatCount = this.getMaxSplatCount();\n        const splatCount = this.getSplatCount();\n\n        const updateCenterColorsPaddedData = (to, from, centers, colors, paddedCenterColors) => {\n            for (let c = to; c < from; c++) {\n                const colorsBase = c * 4;\n                const centersBase = c * 3;\n                const centerColorsBase = c * 4;\n                paddedCenterColors[centerColorsBase] = rgbaArrayToInteger(colors, colorsBase);\n                paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\n                paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\n                paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\n            }\n        };\n\n        const computeDataTextureSize = (elementsPerTexel, elementsPerSplatl) => {\n            const texSize = new THREE.Vector2(4096, 1024);\n            while (texSize.x * texSize.y * elementsPerTexel < maxSplatCount * elementsPerSplatl) texSize.y *= 2;\n            return texSize;\n        };\n\n        if (!isUpdateBuild) {\n\n            this.disposeTextures();\n\n            const covariances = new Float32Array(maxSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT);\n            const centers = new Float32Array(maxSplatCount * 3);\n            const colors = new Uint8Array(maxSplatCount * 4);\n            this.fillSplatDataArrays(covariances, centers, colors);\n\n            // set up covariances data texture\n            const covTexSize = computeDataTextureSize(COVARIANCES_ELEMENTS_PER_TEXEL, 6);\n            let CovariancesDataType = this.halfPrecisionCovariancesOnGPU ? Uint16Array : Float32Array;\n            let covariancesTextureType = this.halfPrecisionCovariancesOnGPU ? THREE.HalfFloatType : THREE.FloatType;\n            const paddedCovariances = new CovariancesDataType(covTexSize.x * covTexSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n            paddedCovariances.set(covariances);\n            const covTex = new THREE.DataTexture(paddedCovariances, covTexSize.x, covTexSize.y, THREE.RGFormat, covariancesTextureType);\n            covTex.needsUpdate = true;\n            this.material.uniforms.covariancesTexture.value = covTex;\n            this.material.uniforms.covariancesTextureSize.value.copy(covTexSize);\n\n            // set up centers/colors data texture\n            const centersColsTexSize = computeDataTextureSize(CENTER_COLORS_ELEMENTS_PER_TEXEL, 4);\n            const paddedCentersCols = new Uint32Array(centersColsTexSize.x * centersColsTexSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\n            updateCenterColorsPaddedData(0, splatCount, centers, colors, paddedCentersCols);\n            const centersColsTex = new THREE.DataTexture(paddedCentersCols, centersColsTexSize.x, centersColsTexSize.y,\n                                                         THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n            centersColsTex.internalFormat = 'RGBA32UI';\n            centersColsTex.needsUpdate = true;\n            this.material.uniforms.centersColorsTexture.value = centersColsTex;\n            this.material.uniforms.centersColorsTextureSize.value.copy(centersColsTexSize);\n            this.material.uniformsNeedUpdate = true;\n\n            this.splatDataTextures = {\n                'baseData': {\n                    'covariances': covariances,\n                    'centers': centers,\n                    'colors': colors\n                },\n                'covariances': {\n                    'data': paddedCovariances,\n                    'texture': covTex,\n                    'size': covTexSize\n                },\n                'centerColors': {\n                    'data': paddedCentersCols,\n                    'texture': centersColsTex,\n                    'size': centersColsTexSize\n                }\n            };\n\n            if (this.dynamicMode) {\n                const transformIndexesTexSize = computeDataTextureSize(TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL, 4);\n                const paddedTransformIndexes = new Uint32Array(transformIndexesTexSize.x *\n                                                               transformIndexesTexSize.y * TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL);\n                for (let c = 0; c < splatCount; c++) paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n                const transformIndexesTexture = new THREE.DataTexture(paddedTransformIndexes, transformIndexesTexSize.x,\n                                                                      transformIndexesTexSize.y, THREE.RedIntegerFormat,\n                                                                      THREE.UnsignedIntType);\n                transformIndexesTexture.internalFormat = 'R32UI';\n                transformIndexesTexture.needsUpdate = true;\n                this.material.uniforms.transformIndexesTexture.value = transformIndexesTexture;\n                this.material.uniforms.transformIndexesTextureSize.value.copy(transformIndexesTexSize);\n                this.material.uniformsNeedUpdate = true;\n                this.splatDataTextures['tansformIndexes'] = {\n                    'data': paddedTransformIndexes,\n                    'texture': transformIndexesTexture,\n                    'size': transformIndexesTexSize\n                };\n            }\n        } else {\n\n            this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances,\n                                     this.splatDataTextures.baseData.centers, this.splatDataTextures.baseData.colors, undefined, true);\n\n            const covariancesTextureDescriptor = this.splatDataTextures['covariances'];\n            const paddedCovariances = covariancesTextureDescriptor.data;\n            const covariancesTexture = covariancesTextureDescriptor.texture;\n            const covarancesStartSplat = this.lastBuildSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT;\n            const covariancesEndSplat = splatCount * COVARIANCES_ELEMENTS_PER_SPLAT;\n            for (let i = covarancesStartSplat; i < covariancesEndSplat; i++) {\n                const covariance = this.splatDataTextures.baseData.covariances[i];\n                paddedCovariances[i] = covariance;\n            }\n            const covariancesTextureProps = this.renderer.properties.get(covariancesTexture);\n            if (!covariancesTextureProps.__webglTexture) {\n                covariancesTexture.needsUpdate = true;\n            } else {\n                const covaranceBytesPerElement = this.halfPrecisionCovariancesOnGPU ? 2 : 4;\n                this.updateDataTexture(paddedCovariances, covariancesTextureDescriptor, covariancesTextureProps,\n                                       COVARIANCES_ELEMENTS_PER_TEXEL, COVARIANCES_ELEMENTS_PER_SPLAT, covaranceBytesPerElement);\n            }\n\n            const centerColorsTextureDescriptor = this.splatDataTextures['centerColors'];\n            const paddedCenterColors = centerColorsTextureDescriptor.data;\n            const centerColorsTexture = centerColorsTextureDescriptor.texture;\n            updateCenterColorsPaddedData(this.lastBuildSplatCount, splatCount, this.splatDataTextures.baseData.centers,\n                                         this.splatDataTextures.baseData.colors, paddedCenterColors);\n            const centerColorsTextureProps = this.renderer.properties.get(centerColorsTexture);\n            if (!centerColorsTextureProps.__webglTexture) {\n                centerColorsTexture.needsUpdate = true;\n            } else {\n                this.updateDataTexture(paddedCenterColors, centerColorsTextureDescriptor, centerColorsTextureProps,\n                                       CENTER_COLORS_ELEMENTS_PER_TEXEL, CENTER_COLORS_ELEMENTS_PER_SPLAT, 4);\n            }\n\n            if (this.dynamicMode) {\n                const transformIndexesTexDesc = this.splatDataTextures['tansformIndexes'];\n                const paddedTransformIndexes = transformIndexesTexDesc.data;\n                for (let c = this.lastBuildSplatCount; c < splatCount; c++) {\n                    paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n                }\n\n                const paddedTransformIndexesTexture = transformIndexesTexDesc.texture;\n                const transformIndexesTextureProps = this.renderer.properties.get(paddedTransformIndexesTexture);\n                if (!transformIndexesTextureProps.__webglTexture) {\n                    paddedTransformIndexesTexture.needsUpdate = true;\n                } else {\n                    this.updateDataTexture(paddedTransformIndexes, transformIndexesTexDesc, transformIndexesTextureProps, 1, 1, 1);\n                }\n            }\n        }\n\n        this.updateVisibleRegion(isUpdateBuild);\n    }\n\n    updateVisibleRegion(isUpdateBuild) {\n        const splatCount = this.getSplatCount();\n        const tempCenter = new THREE.Vector3();\n        if (!isUpdateBuild) {\n            const avgCenter = new THREE.Vector3();\n            this.scenes.forEach((scene) => {\n                avgCenter.add(scene.splatBuffer.sceneCenter);\n            });\n            avgCenter.multiplyScalar(1.0 / this.scenes.length);\n            this.calculatedSceneCenter.copy(avgCenter);\n            this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter);\n            this.material.uniformsNeedUpdate = true;\n        }\n\n        const startSplatFormMaxDistanceCalc = isUpdateBuild ? this.lastBuildSplatCount : 0;\n        let maxDistFromSceneCenter = 0;\n        for (let i = startSplatFormMaxDistanceCalc; i < splatCount; i++) {\n            this.getSplatCenter(i, tempCenter, false);\n            const distFromCSceneCenter = tempCenter.sub(this.calculatedSceneCenter).length();\n            if (distFromCSceneCenter > maxDistFromSceneCenter) maxDistFromSceneCenter = distFromCSceneCenter;\n        }\n\n        const visibleAreaEpansionRadius = 1;\n        const maxRadius = maxDistFromSceneCenter;\n        if (maxRadius - this.maxRadius > visibleAreaEpansionRadius) {\n            this.maxRadius = maxRadius;\n            this.visibleRegionRadius = Math.max(this.maxRadius - visibleAreaEpansionRadius, 0.0);\n        }\n        if (this.finalBuild) this.visibleRegionRadius = this.maxRadius;\n        this.updateVisibleRegionFadeDistance();\n    }\n\n    updateVisibleRegionFadeDistance() {\n        const fadeInRate = this.finalBuild ? 0.01 : 0.003;\n        this.visibleRegionFadeStartRadius = (this.visibleRegionRadius - this.visibleRegionFadeStartRadius) *\n                                        fadeInRate + this.visibleRegionFadeStartRadius;\n        const fadeInComplete = (this.visibleRegionFadeStartRadius / this.maxRadius) > 0.99 ? 1 : 0;\n        this.material.uniforms.visibleRegionFadeStartRadius.value = this.visibleRegionFadeStartRadius;\n        this.material.uniforms.visibleRegionRadius.value = this.visibleRegionRadius;\n        this.material.uniforms.firstRenderTime.value = this.firstRenderTime;\n        this.material.uniforms.currentTime.value = performance.now();\n        this.material.uniforms.fadeInComplete.value = fadeInComplete;\n        this.material.uniformsNeedUpdate = true;\n    }\n\n    /**\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\n     *                                  every splat.\n     */\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\n        const geometry = this.geometry;\n        geometry.attributes.splatIndex.set(globalIndexes);\n        geometry.attributes.splatIndex.needsUpdate = true;\n        if (renderSplatCount > 0 && this.firstRenderTime === -1) this.firstRenderTime = performance.now();\n        geometry.instanceCount = renderSplatCount;\n    }\n\n    /**\n     * Update the transforms for each scene in this splat mesh from their individual components (position,\n     * quaternion, and scale)\n     */\n    updateTransforms() {\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            scene.updateTransform();\n        }\n    }\n\n    updateUniforms = function() {\n\n        const viewport = new THREE.Vector2();\n\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY) {\n            const splatCount = this.getSplatCount();\n            if (splatCount > 0) {\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\n                             renderDimensions.y * this.devicePixelRatio);\n                this.material.uniforms.viewport.value.copy(viewport);\n                this.material.uniforms.basisViewport.value.set(1.0 / viewport.x, 1.0 / viewport.y);\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\n                if (this.dynamicMode) {\n                    for (let i = 0; i < this.scenes.length; i++) {\n                        this.material.uniforms.transforms.value[i].copy(this.getScene(i).transform);\n                    }\n                }\n                this.material.uniformsNeedUpdate = true;\n            }\n        };\n\n    }();\n\n    getSplatDataTextures() {\n        return this.splatDataTextures;\n    }\n\n    getSplatCount() {\n        return SplatMesh.getTotalSplatCountForScenes(this.scenes);\n    }\n\n    static getTotalSplatCountForScenes(scenes) {\n        let totalSplatCount = 0;\n        for (let scene of scenes) {\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getSplatCount();\n        }\n        return totalSplatCount;\n    }\n\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\n        return totalSplatCount;\n    }\n\n    getMaxSplatCount() {\n        return SplatMesh.getTotalMaxSplatCountForScenes(this.scenes);\n    }\n\n    static getTotalMaxSplatCountForScenes(scenes) {\n        let totalSplatCount = 0;\n        for (let scene of scenes) {\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getMaxSplatCount();\n        }\n        return totalSplatCount;\n    }\n\n    static getTotalMaxSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getMaxSplatCount();\n        return totalSplatCount;\n    }\n\n    disposeDistancesComputationGPUResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.vao) {\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\n            this.distancesTransformFeedback.vao = null;\n        }\n        if (this.distancesTransformFeedback.program) {\n            gl.deleteProgram(this.distancesTransformFeedback.program);\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\n            this.distancesTransformFeedback.program = null;\n            this.distancesTransformFeedback.vertexShader = null;\n            this.distancesTransformFeedback.fragmentShader = null;\n        }\n        this.disposeDistancesComputationGPUBufferResources();\n        if (this.distancesTransformFeedback.id) {\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\n            this.distancesTransformFeedback.id = null;\n        }\n    }\n\n    disposeDistancesComputationGPUBufferResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.centersBuffer) {\n            this.distancesTransformFeedback.centersBuffer = null;\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\n        }\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\n            this.distancesTransformFeedback.outDistancesBuffer = null;\n        }\n    }\n\n    /**\n     * Set the Three.js renderer used by this splat mesh\n     * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\n     */\n    setRenderer(renderer) {\n        if (renderer !== this.renderer) {\n            this.renderer = renderer;\n            const gl = this.renderer.getContext();\n            const extensions = new WebGLExtensions(gl);\n            const capabilities = new WebGLCapabilities(gl, extensions, {});\n            extensions.init(capabilities);\n            this.webGLUtils = new THREE.WebGLUtils(gl, extensions, capabilities);\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\n                this.setupDistancesComputationTransformFeedback();\n                this.updateGPUCentersBufferForDistancesComputation();\n                this.updateGPUTransformIndexesBufferForDistancesComputation();\n            }\n        }\n    }\n\n    setupDistancesComputationTransformFeedback = function() {\n\n        let currentRenderer;\n        let currentMaxSplatCount;\n\n        return function() {\n            const maxSplatCount = this.getMaxSplatCount();\n\n            if (!this.renderer) return;\n\n            const rebuildGPUObjects = (currentRenderer !== this.renderer);\n            const rebuildBuffers = currentMaxSplatCount !== maxSplatCount;\n\n            if (!rebuildGPUObjects && !rebuildBuffers) return;\n\n            if (rebuildGPUObjects) {\n                this.disposeDistancesComputationGPUResources();\n            } else if (rebuildBuffers) {\n                this.disposeDistancesComputationGPUBufferResources();\n            }\n\n            const gl = this.renderer.getContext();\n\n            const createShader = (gl, type, source) => {\n                const shader = gl.createShader(type);\n                if (!shader) {\n                    console.error('Fatal error: gl could not create a shader object.');\n                    return null;\n                }\n\n                gl.shaderSource(shader, source);\n                gl.compileShader(shader);\n\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n                if (!compiled) {\n                    let typeName = 'unknown';\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\n                    const errors = gl.getShaderInfoLog(shader);\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\n                    gl.deleteShader(shader);\n                    return null;\n                }\n\n                return shader;\n            };\n\n            let vsSource;\n            if (this.integerBasedDistancesComputation) {\n                vsSource =\n                `#version 300 es\n                in ivec4 center;\n                flat out int distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint transformIndex;\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[transformIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            } else {\n                vsSource =\n                `#version 300 es\n                in vec3 center;\n                flat out float distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint transformIndex;\n                        uniform mat4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[transformIndex] * vec4(center, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            }\n\n            const fsSource =\n            `#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            `;\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\n            }\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n            if (rebuildGPUObjects) {\n                const program = gl.createProgram();\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\n                if (!vertexShader || !fragmentShader) {\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\n                }\n                gl.attachShader(program, vertexShader);\n                gl.attachShader(program, fragmentShader);\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\n                gl.linkProgram(program);\n\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n                if (!linked) {\n                    const error = gl.getProgramInfoLog(program);\n                    console.error('Fatal error: Failed to link program: ' + error);\n                    gl.deleteProgram(program);\n                    gl.deleteShader(fragmentShader);\n                    gl.deleteShader(vertexShader);\n                    throw new Error('Could not link shaders for distances computation on GPU.');\n                }\n\n                this.distancesTransformFeedback.program = program;\n                this.distancesTransformFeedback.vertexShader = vertexShader;\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\n            }\n\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            this.distancesTransformFeedback.centersLoc =\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\n            if (this.dynamicMode) {\n                this.distancesTransformFeedback.transformIndexesLoc =\n                    gl.getAttribLocation(this.distancesTransformFeedback.program, 'transformIndex');\n                for (let i = 0; i < this.scenes.length; i++) {\n                    this.distancesTransformFeedback.transformsLocs[i] =\n                        gl.getUniformLocation(this.distancesTransformFeedback.program, `transforms[${i}]`);\n                }\n            } else {\n                this.distancesTransformFeedback.modelViewProjLoc =\n                    gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n                if (this.integerBasedDistancesComputation) {\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n                } else {\n                    gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 3, gl.FLOAT, false, 0, 0);\n                }\n\n                if (this.dynamicMode) {\n                    this.distancesTransformFeedback.transformIndexesBuffer = gl.createBuffer();\n                    gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n                    gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n                }\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, maxSplatCount * 4, gl.STATIC_READ);\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\n            }\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            if (currentProgram) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            currentRenderer = this.renderer;\n            currentMaxSplatCount = maxSplatCount;\n        };\n\n    }();\n\n    /**\n     * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\n     */\n    updateGPUCentersBufferForDistancesComputation(isUpdateBuild = false) {\n\n        this.checkForMultiSceneUpdateCondition(isUpdateBuild, 'updateGPUCentersBufferForDistancesComputation', 'isUpdateBuild');\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        const ArrayType = this.integerBasedDistancesComputation ? Uint32Array : Float32Array;\n        const subBufferOffset = isUpdateBuild ? this.lastBuildSplatCount * 16 : 0;\n        const srcCenters = this.integerBasedDistancesComputation ?\n                           this.getIntegerCenters(true, isUpdateBuild) :\n                           this.getFloatCenters(false, isUpdateBuild);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n\n        if (isUpdateBuild) {\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, srcCenters);\n        } else {\n            const maxArray = new ArrayType(this.getMaxSplatCount() * 16);\n            maxArray.set(srcCenters);\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n        }\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\n     */\n    updateGPUTransformIndexesBufferForDistancesComputation() {\n\n        if (!this.renderer || !this.dynamicMode) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.getTransformIndexes(), gl.STATIC_DRAW);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Get a typed array containing a mapping from global splat indexes to their scene index.\n     * @return {Uint32Array}\n     */\n    getTransformIndexes() {\n        const transformIndexes = new Uint32Array(this.globalSplatIndexToSceneIndexMap.length);\n        transformIndexes.set(this.globalSplatIndexToSceneIndexMap);\n        return transformIndexes;\n    }\n\n    /**\n     * Fill 'array' with the transforms for each scene in this splat mesh.\n     * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\n     */\n    fillTransformsArray = function() {\n\n        const tempArray = [];\n\n        return function(array) {\n            if (tempArray.length !== array.length) tempArray.length = array.length;\n            for (let i = 0; i < this.scenes.length; i++) {\n                const sceneTransform = this.getScene(i).transform;\n                const sceneTransformElements = sceneTransform.elements;\n                for (let j = 0; j < 16; j++) {\n                    tempArray[i * 16 + j] = sceneTransformElements[j];\n                }\n            }\n            array.set(tempArray);\n        };\n\n    }();\n\n    computeDistancesOnGPU = function() {\n\n        const tempMatrix = new THREE.Matrix4();\n\n        return function(modelViewProjMatrix, outComputedDistances) {\n            if (!this.renderer) return;\n\n            // console.time(\"gpu_compute_distances\");\n            const gl = this.renderer.getContext();\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            gl.enable(gl.RASTERIZER_DISCARD);\n\n            if (this.dynamicMode) {\n                for (let i = 0; i < this.scenes.length; i++) {\n                    tempMatrix.copy(this.getScene(i).transform);\n                    tempMatrix.premultiply(modelViewProjMatrix);\n\n                    if (this.integerBasedDistancesComputation) {\n                        const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\n                        const iTransform = [iTempMatrix[2], iTempMatrix[6], iTempMatrix[10], iTempMatrix[14]];\n                        gl.uniform4i(this.distancesTransformFeedback.transformsLocs[i], iTransform[0], iTransform[1],\n                                                                                        iTransform[2], iTransform[3]);\n                    } else {\n                        gl.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[i], false, tempMatrix.elements);\n                    }\n                }\n            } else {\n                if (this.integerBasedDistancesComputation) {\n                    const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\n                    const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\n                    gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\n                } else {\n                    const viewProj = [modelViewProjMatrix.elements[2], modelViewProjMatrix.elements[6], modelViewProjMatrix.elements[10]];\n                    gl.uniform3f(this.distancesTransformFeedback.modelViewProjLoc, viewProj[0], viewProj[1], viewProj[2]);\n                }\n            }\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n            gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n            if (this.integerBasedDistancesComputation) {\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n            } else {\n                gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 3, gl.FLOAT, false, 0, 0);\n            }\n\n            if (this.dynamicMode) {\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n            }\n\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            gl.beginTransformFeedback(gl.POINTS);\n            gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\n            gl.endTransformFeedback();\n\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n            gl.disable(gl.RASTERIZER_DISCARD);\n\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n\n            const promise = new Promise((resolve) => {\n                const checkSync = () => {\n                    const timeout = 0;\n                    const bitflags = 0;\n                    const status = gl.clientWaitSync(sync, bitflags, timeout);\n                    switch (status) {\n                        case gl.TIMEOUT_EXPIRED:\n                            return setTimeout(checkSync);\n                        case gl.WAIT_FAILED:\n                            throw new Error('should never get here');\n                        default:\n                            gl.deleteSync(sync);\n                            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n                            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n                            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n                            gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\n                            gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n                            if (currentVao) gl.bindVertexArray(currentVao);\n\n                            // console.timeEnd(\"gpu_compute_distances\");\n\n                            resolve();\n                    }\n                };\n                setTimeout(checkSync);\n            });\n\n            if (currentProgram) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            return promise;\n        };\n\n    }();\n\n    /**\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\n     * buffer, and the corresponding transform)\n     * @param {number} globalIndex Global splat index\n     * @param {object} paramsObj Object in which to store local data\n     * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\n     *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\n     *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\n     *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\n     *                                       be null.\n     */\n    getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\n        if (returnSceneTransform === undefined || returnSceneTransform === null) {\n            returnSceneTransform = this.dynamicMode ? false : true;\n        }\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\n        paramsObj.sceneTransform = returnSceneTransform ? this.getSceneTransformForSplat(globalIndex) : null;\n    }\n\n    /**\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\n     * @param {Float32Array} covariances Target storage for splat covariances\n     * @param {Float32Array} centers Target storage for splat centers\n     * @param {Uint8Array} colors Target storage for splat colors\n     * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\n     *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\n     *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\n     * @param {boolean} forceDestFromZero Force destination index to start at 0.\n     */\n    fillSplatDataArrays(covariances, centers, colors, applySceneTransform = undefined, isUpdateBuild, forceDestFromZero) {\n\n        this.checkForMultiSceneUpdateCondition(isUpdateBuild, 'fillSplatDataArrays', 'isUpdateBuild');\n\n        let destfrom = 0;\n        for (let i = 0; i < this.scenes.length; i++) {\n            if (applySceneTransform === undefined || applySceneTransform === null) {\n                applySceneTransform = this.dynamicMode ? false : true;\n            }\n\n            let localDestFrom = destfrom;\n            let srcFrom;\n            let srcTo;\n            if (isUpdateBuild) {\n                srcFrom = this.lastBuildSplatCount;\n                localDestFrom = forceDestFromZero ? 0 : srcFrom;\n            }\n\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            const sceneTransform = applySceneTransform ? scene.transform : null;\n            if (covariances) {\n                splatBuffer.fillSplatCovarianceArray(covariances, sceneTransform,\n                                                     srcFrom, srcTo, localDestFrom, this.halfPrecisionCovariancesOnGPU ? 1 : 0);\n            }\n            if (centers) splatBuffer.fillSplatCenterArray(centers, sceneTransform, srcFrom, srcTo, localDestFrom);\n            if (colors) splatBuffer.fillSplatColorArray(colors, sceneTransform, srcFrom, srcTo, localDestFrom);\n            destfrom += splatBuffer.getSplatCount();\n        }\n    }\n\n    /**\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\n     * @param {number} padFour Enforce alignement of 4 by inserting a 1000 after every 3 values\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\n     * @return {Int32Array}\n     */\n    getIntegerCenters(padFour = false, isUpdateBuild = false) {\n\n        this.checkForMultiSceneUpdateCondition(isUpdateBuild, 'getIntegerCenters', 'isUpdateBuild');\n\n        const splatCount = this.getSplatCount();\n        const fillCount = isUpdateBuild ? splatCount - this.lastBuildSplatCount : splatCount;\n        const floatCenters = new Float32Array(fillCount * 3);\n        this.fillSplatDataArrays(null, floatCenters, null, undefined, isUpdateBuild, isUpdateBuild);\n        let intCenters;\n        let componentCount = padFour ? 4 : 3;\n        intCenters = new Int32Array(fillCount * componentCount);\n        for (let i = 0; i < fillCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\n            }\n            if (padFour) intCenters[i * componentCount + 3] = 1000;\n        }\n        return intCenters;\n    }\n\n\n    /**\n     * Returns an array of splat centers, transformed as appropriate, optionally padded.\n     * @param {number} padFour Enforce alignement of 4 by inserting a 1 after every 3 values\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\n     * @return {Float32Array}\n     */\n    getFloatCenters(padFour = false, isUpdateBuild = false) {\n\n        this.checkForMultiSceneUpdateCondition(isUpdateBuild, 'getFloatCenters', 'isUpdateBuild');\n\n        const splatCount = this.getSplatCount();\n        const fillCount = isUpdateBuild ? splatCount - this.lastBuildSplatCount : splatCount;\n        const floatCenters = new Float32Array(fillCount * 3);\n        this.fillSplatDataArrays(null, floatCenters, null, undefined, isUpdateBuild, isUpdateBuild);\n        if (!padFour) return floatCenters;\n        let paddedFloatCenters = new Float32Array(fillCount * 4);\n        for (let i = 0; i < fillCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\n            }\n            paddedFloatCenters[i * 4 + 3] = 1;\n        }\n        return paddedFloatCenters;\n    }\n\n    /**\n     * Get the center for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\n     *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\n     *                                      scene transform will never be applied. If undefined, the default behavior will apply.\n     */\n    getSplatCenter = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outCenter, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Get the scale and rotation for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\n     *                                      'applySceneTransform' is true, the scene transform will always be applied and if\n     *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\n     *                                      the default behavior will apply.\n     */\n    getSplatScaleAndRotation = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outScale, outRotation, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Get the color for a splat.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\n     */\n    getSplatColor = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outColor) {\n            this.getLocalSplatParameters(globalIndex, paramsObj);\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\n     */\n    getSceneTransform(sceneIndex, outTransform) {\n        const scene = this.getScene(sceneIndex);\n        scene.updateTransform();\n        outTransform.copy(scene.transform);\n    }\n\n    /**\n     * Get the scene at 'sceneIndex'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @return {SplatScene}\n     */\n    getScene(sceneIndex) {\n        if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\n            throw new Error('SplatMesh::getScene() -> Invalid scene index.');\n        }\n        return this.scenes[sceneIndex];\n    }\n\n    getSplatBufferForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).splatBuffer;\n    }\n\n    getSceneIndexForSplat(globalIndex) {\n        return this.globalSplatIndexToSceneIndexMap[globalIndex];\n    }\n\n    getSceneTransformForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).transform;\n    }\n\n    getSplatLocalIndex(globalIndex) {\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\n    }\n\n    static getIntegerMatrixArray(matrix) {\n        const matrixElements = matrix.elements;\n        const intMatrixArray = [];\n        for (let i = 0; i < 16; i++) {\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\n        }\n        return intMatrixArray;\n    }\n\n    checkForMultiSceneUpdateCondition(isUpdateBuild, functionName, parameterName) {\n        if (this.scenes.length > 1 && isUpdateBuild) {\n            throw new Error(`${functionName}() -> '${parameterName}' cannot be true if splat mesh has more than one scene.`);\n        }\n    }\n}\n","import SorterWasm from './sorter.wasm';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n\n    let wasmInstance;\n    let wasmMemory;\n    let useSharedMemory;\n    let integerBasedSort;\n    let dynamicMode;\n    let splatCount;\n    let indexesToSortOffset;\n    let sortedIndexesOffset;\n    let transformIndexesOffset;\n    let transformsOffset;\n    let precomputedDistancesOffset;\n    let mappedDistancesOffset;\n    let frequenciesOffset;\n    let centersOffset;\n    let modelViewProjOffset;\n    let countsZero;\n    let sortedIndexesOut;\n\n    let Constants;\n\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances, copyTransforms) {\n        const sortStartTime = performance.now();\n\n        if (!useSharedMemory) {\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / Constants.BytesPerInt);\n            indexesToSort.set(copyIndexesToSort);\n            const transforms = new Float32Array(wasmMemory, transformsOffset, copyTransforms.byteLength / Constants.BytesPerFloat);\n            transforms.set(copyTransforms);\n            if (usePrecomputedDistances) {\n                let precomputedDistances;\n                if (integerBasedSort) {\n                    precomputedDistances = new Int32Array(wasmMemory, precomputedDistancesOffset,\n                                                          copyPrecomputedDistances.byteLength / Constants.BytesPerInt);\n                } else {\n                    precomputedDistances = new Float32Array(wasmMemory, precomputedDistancesOffset,\n                                                            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat);\n                }\n                precomputedDistances.set(copyPrecomputedDistances);\n            }\n        }\n\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\n        new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\n                                         sortedIndexesOffset, transformIndexesOffset, transformsOffset, Constants.DepthMapRange,\n                                         splatSortCount, splatRenderCount, splatCount, usePrecomputedDistances, integerBasedSort,\n                                         dynamicMode);\n\n        const sortMessage = {\n            'sortDone': true,\n            'splatSortCount': splatSortCount,\n            'splatRenderCount': splatRenderCount,\n            'sortTime': 0\n        };\n        if (!useSharedMemory) {\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\n            if (!sortedIndexesOut || sortedIndexesOut.length < splatRenderCount) {\n                sortedIndexesOut = new Uint32Array(splatRenderCount);\n            }\n            sortedIndexesOut.set(sortedIndexes);\n            sortMessage.sortedIndexes = sortedIndexesOut;\n        }\n        const sortEndTime = performance.now();\n\n        sortMessage.sortTime = sortEndTime - sortStartTime;\n\n        self.postMessage(sortMessage);\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.centers) {\n            centers = e.data.centers;\n            transformIndexes = e.data.transformIndexes;\n            if (integerBasedSort) {\n                new Int32Array(wasmMemory, centersOffset, splatCount * 4).set(new Int32Array(centers));\n            } else {\n                new Float32Array(wasmMemory, centersOffset, splatCount * 4).set(new Float32Array(centers));\n            }\n            if (dynamicMode) {\n                new Uint32Array(wasmMemory, transformIndexesOffset, splatCount).set(new Uint32Array(transformIndexes));\n            }\n            self.postMessage({\n                'sortSetupComplete': true,\n            });\n        } else if (e.data.sort) {\n            const renderCount = e.data.sort.splatRenderCount || 0;\n            const sortCount = e.data.sort.splatSortCount || 0;\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\n\n            let copyIndexesToSort;\n            let copyPrecomputedDistances;\n            let copyTransforms;\n            if (!useSharedMemory) {\n                copyIndexesToSort = e.data.sort.indexesToSort;\n                copyTransforms = e.data.sort.transforms;\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\n            }\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\n                 copyIndexesToSort, copyPrecomputedDistances, copyTransforms);\n        } else if (e.data.init) {\n            // Yep, this is super hacky and gross :(\n            Constants = e.data.init.Constants;\n\n            splatCount = e.data.init.splatCount;\n            useSharedMemory = e.data.init.useSharedMemory;\n            integerBasedSort = e.data.init.integerBasedSort;\n            dynamicMode = e.data.init.dynamicMode;\n\n            const CENTERS_BYTES_PER_ENTRY = integerBasedSort ? (Constants.BytesPerInt * 4) : (Constants.BytesPerFloat * 4);\n\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n\n            const matrixSize = 16 * Constants.BytesPerFloat;\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\n            const memoryRequiredForModelViewProjectionMatrix = matrixSize;\n            const memoryRequiredForPrecomputedDistances = integerBasedSort ?\n                                                          (splatCount * Constants.BytesPerInt) : (splatCount * Constants.BytesPerFloat);\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\n            const memoryRequiredforTransformIndexes = dynamicMode ? (splatCount * Constants.BytesPerInt) : 0;\n            const memoryRequiredforTransforms = dynamicMode ? (Constants.MaxScenes * matrixSize) : 0;\n            const extraMemory = Constants.MemoryPageSize * 32;\n\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\n                                        memoryRequiredForCenters +\n                                        memoryRequiredForModelViewProjectionMatrix +\n                                        memoryRequiredForPrecomputedDistances +\n                                        memoryRequiredForMappedDistances +\n                                        memoryRequiredForIntermediateSortBuffers +\n                                        memoryRequiredForSortedIndexes +\n                                        memoryRequiredforTransformIndexes +\n                                        memoryRequiredforTransforms +\n                                        extraMemory;\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\n            const sorterWasmImport = {\n                module: {},\n                env: {\n                    memory: new WebAssembly.Memory({\n                        initial: totalPagesRequired * 2,\n                        maximum: totalPagesRequired * 4,\n                        shared: true,\n                    }),\n                }\n            };\n            WebAssembly.compile(sorterWasmBytes)\n            .then((wasmModule) => {\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n            })\n            .then((instance) => {\n                wasmInstance = instance;\n                indexesToSortOffset = 0;\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\n                transformIndexesOffset = sortedIndexesOffset + memoryRequiredForSortedIndexes;\n                transformsOffset = transformIndexesOffset + memoryRequiredforTransformIndexes;\n                wasmMemory = sorterWasmImport.env.memory.buffer;\n                if (useSharedMemory) {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true,\n                        'indexesToSortBuffer': wasmMemory,\n                        'indexesToSortOffset': indexesToSortOffset,\n                        'sortedIndexesBuffer': wasmMemory,\n                        'sortedIndexesOffset': sortedIndexesOffset,\n                        'precomputedDistancesBuffer': wasmMemory,\n                        'precomputedDistancesOffset': precomputedDistancesOffset,\n                        'transformsBuffer': wasmMemory,\n                        'transformsOffset': transformsOffset\n                    });\n                } else {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true\n                    });\n                }\n            });\n        }\n    };\n}\n\nexport function createSortWorker(splatCount, useSharedMemory, integerBasedSort, dynamicMode) {\n    const worker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n\n    const sorterWasmBinaryString = atob(SorterWasm);\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n    }\n\n    worker.postMessage({\n        'init': {\n            'sorterWasmBytes': sorterWasmBytes.buffer,\n            'splatCount': splatCount,\n            'useSharedMemory': useSharedMemory,\n            'integerBasedSort': integerBasedSort,\n            'dynamicMode': dynamicMode,\n            // Super hacky\n            'Constants': {\n                'BytesPerFloat': Constants.BytesPerFloat,\n                'BytesPerInt': Constants.BytesPerInt,\n                'DepthMapRange': Constants.DepthMapRange,\n                'MemoryPageSize': Constants.MemoryPageSize,\n                'MaxScenes': Constants.MaxScenes\n            }\n        }\n    });\n    return worker;\n}\n","export const WebXRMode = {\n    None: 0,\n    VR: 1,\n    AR: 2\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class VRButton {\n\n    static createButton( renderer ) {\n\n        const button = document.createElement( 'button' );\n\n        function showEnterVR( /* device */ ) {\n\n            let currentSession = null;\n\n            async function onSessionStarted( session ) {\n\n                session.addEventListener( 'end', onSessionEnded );\n\n                await renderer.xr.setSession( session );\n                button.textContent = 'EXIT VR';\n\n                currentSession = session;\n\n            }\n\n            function onSessionEnded( /* event */ ) {\n\n                currentSession.removeEventListener( 'end', onSessionEnded );\n\n                button.textContent = 'ENTER VR';\n\n                currentSession = null;\n\n            }\n\n            //\n\n            button.style.display = '';\n\n            button.style.cursor = 'pointer';\n            button.style.left = 'calc(50% - 50px)';\n            button.style.width = '100px';\n\n            button.textContent = 'ENTER VR';\n\n            // WebXR's requestReferenceSpace only works if the corresponding feature\n            // was requested at session creation time. For simplicity, just ask for\n            // the interesting ones as optional features, but be aware that the\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\n            // ('local' is always available for immersive sessions and doesn't need to\n            // be requested separately.)\n\n            const sessionInit = { optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers'] };\n\n            button.onmouseenter = function() {\n\n                button.style.opacity = '1.0';\n\n            };\n\n            button.onmouseleave = function() {\n\n                button.style.opacity = '0.5';\n\n            };\n\n            button.onclick = function() {\n\n                if ( currentSession === null ) {\n\n                    navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );\n\n                } else {\n\n                    currentSession.end();\n\n                    if ( navigator.xr.offerSession !== undefined ) {\n\n                        navigator.xr.offerSession( 'immersive-vr', sessionInit )\n                            .then( onSessionStarted )\n                            .catch( ( err ) => {\n\n                                console.warn( err );\n\n                            } );\n\n                    }\n\n                }\n\n            };\n\n            if ( navigator.xr.offerSession !== undefined ) {\n\n                navigator.xr.offerSession( 'immersive-vr', sessionInit )\n                    .then( onSessionStarted )\n                    .catch( ( err ) => {\n\n                        console.warn( err );\n\n                    } );\n\n            }\n\n        }\n\n        function disableButton() {\n\n            button.style.display = '';\n\n            button.style.cursor = 'auto';\n            button.style.left = 'calc(50% - 75px)';\n            button.style.width = '150px';\n\n            button.onmouseenter = null;\n            button.onmouseleave = null;\n\n            button.onclick = null;\n\n        }\n\n        function showWebXRNotFound() {\n\n            disableButton();\n\n            button.textContent = 'VR NOT SUPPORTED';\n\n        }\n\n        function showVRNotAllowed( exception ) {\n\n            disableButton();\n\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n            button.textContent = 'VR NOT ALLOWED';\n\n        }\n\n        function stylizeElement( element ) {\n\n            element.style.position = 'absolute';\n            element.style.bottom = '20px';\n            element.style.padding = '12px 6px';\n            element.style.border = '1px solid #fff';\n            element.style.borderRadius = '4px';\n            element.style.background = 'rgba(0,0,0,0.1)';\n            element.style.color = '#fff';\n            element.style.font = 'normal 13px sans-serif';\n            element.style.textAlign = 'center';\n            element.style.opacity = '0.5';\n            element.style.outline = 'none';\n            element.style.zIndex = '999';\n\n        }\n\n        if ( 'xr' in navigator ) {\n\n            button.id = 'VRButton';\n            button.style.display = 'none';\n\n            stylizeElement( button );\n\n            navigator.xr.isSessionSupported( 'immersive-vr' ).then( function( supported ) {\n\n                supported ? showEnterVR() : showWebXRNotFound();\n\n                if ( supported && VRButton.xrSessionIsGranted ) {\n\n                    button.click();\n\n                }\n\n            } ).catch( showVRNotAllowed );\n\n            return button;\n\n        } else {\n\n            const message = document.createElement( 'a' );\n\n            if ( window.isSecureContext === false ) {\n\n                message.href = document.location.href.replace( /^http:/, 'https:' );\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n            } else {\n\n                message.href = 'https://immersiveweb.dev/';\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\n\n            }\n\n            message.style.left = 'calc(50% - 90px)';\n            message.style.width = '180px';\n            message.style.textDecoration = 'none';\n\n            stylizeElement( message );\n\n            return message;\n\n        }\n\n    }\n\n    static registerSessionGrantedListener() {\n\n        if ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\n\n            // WebXRViewer (based on Firefox) has a bug where addEventListener\n            // throws a silent exception and aborts execution entirely.\n            if ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\n\n            navigator.xr.addEventListener( 'sessiongranted', () => {\n\n                VRButton.xrSessionIsGranted = true;\n\n            } );\n\n        }\n\n    }\n\n}\n\nVRButton.xrSessionIsGranted = false;\nVRButton.registerSessionGrantedListener();\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class ARButton {\n\n    static createButton( renderer, sessionInit = {} ) {\n\n        const button = document.createElement( 'button' );\n\n        function showStartAR( /* device */ ) {\n\n            if ( sessionInit.domOverlay === undefined ) {\n\n                const overlay = document.createElement( 'div' );\n                overlay.style.display = 'none';\n                document.body.appendChild( overlay );\n\n                const svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' );\n                svg.setAttribute( 'width', 38 );\n                svg.setAttribute( 'height', 38 );\n                svg.style.position = 'absolute';\n                svg.style.right = '20px';\n                svg.style.top = '20px';\n                svg.addEventListener( 'click', function() {\n\n                    currentSession.end();\n\n                } );\n                overlay.appendChild( svg );\n\n                const path = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\n                path.setAttribute( 'd', 'M 12,12 L 28,28 M 28,12 12,28' );\n                path.setAttribute( 'stroke', '#fff' );\n                path.setAttribute( 'stroke-width', 2 );\n                svg.appendChild( path );\n\n                if ( sessionInit.optionalFeatures === undefined ) {\n\n                    sessionInit.optionalFeatures = [];\n\n                }\n\n                sessionInit.optionalFeatures.push( 'dom-overlay' );\n                sessionInit.domOverlay = { root: overlay };\n\n            }\n\n            //\n\n            let currentSession = null;\n\n            async function onSessionStarted( session ) {\n\n                session.addEventListener( 'end', onSessionEnded );\n\n                renderer.xr.setReferenceSpaceType( 'local' );\n\n                await renderer.xr.setSession( session );\n\n                button.textContent = 'STOP AR';\n                sessionInit.domOverlay.root.style.display = '';\n\n                currentSession = session;\n\n            }\n\n            function onSessionEnded( /* event */ ) {\n\n                currentSession.removeEventListener( 'end', onSessionEnded );\n\n                button.textContent = 'START AR';\n                sessionInit.domOverlay.root.style.display = 'none';\n\n                currentSession = null;\n\n            }\n\n            //\n\n            button.style.display = '';\n\n            button.style.cursor = 'pointer';\n            button.style.left = 'calc(50% - 50px)';\n            button.style.width = '100px';\n\n            button.textContent = 'START AR';\n\n            button.onmouseenter = function() {\n\n                button.style.opacity = '1.0';\n\n            };\n\n            button.onmouseleave = function() {\n\n                button.style.opacity = '0.5';\n\n            };\n\n            button.onclick = function() {\n\n                if ( currentSession === null ) {\n\n                    navigator.xr.requestSession( 'immersive-ar', sessionInit ).then( onSessionStarted );\n\n                } else {\n\n                    currentSession.end();\n\n                    if ( navigator.xr.offerSession !== undefined ) {\n\n                        navigator.xr.offerSession( 'immersive-ar', sessionInit )\n                            .then( onSessionStarted )\n                            .catch( ( err ) => {\n\n                                console.warn( err );\n\n                            } );\n\n                    }\n\n                }\n\n            };\n\n            if ( navigator.xr.offerSession !== undefined ) {\n\n                navigator.xr.offerSession( 'immersive-ar', sessionInit )\n                    .then( onSessionStarted )\n                    .catch( ( err ) => {\n\n                        console.warn( err );\n\n                    } );\n\n            }\n\n        }\n\n        function disableButton() {\n\n            button.style.display = '';\n\n            button.style.cursor = 'auto';\n            button.style.left = 'calc(50% - 75px)';\n            button.style.width = '150px';\n\n            button.onmouseenter = null;\n            button.onmouseleave = null;\n\n            button.onclick = null;\n\n        }\n\n        function showARNotSupported() {\n\n            disableButton();\n\n            button.textContent = 'AR NOT SUPPORTED';\n\n        }\n\n        function showARNotAllowed( exception ) {\n\n            disableButton();\n\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n            button.textContent = 'AR NOT ALLOWED';\n\n        }\n\n        function stylizeElement( element ) {\n\n            element.style.position = 'absolute';\n            element.style.bottom = '20px';\n            element.style.padding = '12px 6px';\n            element.style.border = '1px solid #fff';\n            element.style.borderRadius = '4px';\n            element.style.background = 'rgba(0,0,0,0.1)';\n            element.style.color = '#fff';\n            element.style.font = 'normal 13px sans-serif';\n            element.style.textAlign = 'center';\n            element.style.opacity = '0.5';\n            element.style.outline = 'none';\n            element.style.zIndex = '999';\n\n        }\n\n        if ( 'xr' in navigator ) {\n\n            button.id = 'ARButton';\n            button.style.display = 'none';\n\n            stylizeElement( button );\n\n            navigator.xr.isSessionSupported( 'immersive-ar' ).then( function( supported ) {\n\n                supported ? showStartAR() : showARNotSupported();\n\n            } ).catch( showARNotAllowed );\n\n            return button;\n\n        } else {\n\n            const message = document.createElement( 'a' );\n\n            if ( window.isSecureContext === false ) {\n\n                message.href = document.location.href.replace( /^http:/, 'https:' );\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n            } else {\n\n                message.href = 'https://immersiveweb.dev/';\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\n\n            }\n\n            message.style.left = 'calc(50% - 90px)';\n            message.style.width = '180px';\n            message.style.textDecoration = 'none';\n\n            stylizeElement( message );\n\n            return message;\n\n        }\n\n    }\n\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from './OrbitControls.js';\nimport { PlyLoader } from './loaders/PlyLoader.js';\nimport { SplatLoader } from './loaders/SplatLoader.js';\nimport { KSplatLoader } from './loaders/KSplatLoader.js';\nimport { sceneFormatFromPath } from './loaders/Utils.js';\nimport { LoadingSpinner } from './ui/LoadingSpinner.js';\nimport { LoadingProgressBar } from './ui/LoadingProgressBar.js';\nimport { InfoPanel } from './ui/InfoPanel.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './SplatMesh.js';\nimport { createSortWorker } from './worker/SortWorker.js';\nimport { Constants } from './Constants.js';\nimport { getCurrentTime } from './Util.js';\nimport { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\nimport { SceneFormat } from './loaders/SceneFormat.js';\nimport { WebXRMode } from './webxr/WebXRMode.js';\nimport { VRButton } from './webxr/VRButton.js';\nimport { ARButton } from './webxr/ARButton.js';\nimport { delayedExecute } from './Util.js';\nimport { LoaderStatus } from './loaders/LoaderStatus.js';\n\n\nconst THREE_CAMERA_FOV = 50;\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\nconst MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER = 1500000;\nconst FOCUS_MARKER_FADE_IN_SPEED = 10.0;\nconst FOCUS_MARKER_FADE_OUT_SPEED = 2.5;\n\n/**\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\n * that performs the sort for its splats.\n */\nexport class Viewer {\n\n    constructor(options = {}) {\n\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\n        // when the viewer uses its own camera).\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\n\n        // The camera's initial position (only used when the viewer uses its own camera).\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\n\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\n\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\n        this.dropInMode = options.dropInMode || false;\n\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\n        this.useBuiltInControls = options.useBuiltInControls;\n\n        // parent element of the Three.js renderer canvas\n        this.rootElement = options.rootElement;\n\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\n        // at a small cost to visual quality\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\n\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        if (options.halfPrecisionCovariancesOnGPU === undefined || options.halfPrecisionCovariancesOnGPU === null) {\n            options.halfPrecisionCovariancesOnGPU = true;\n        }\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU;\n\n        // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\n        this.threeScene = options.threeScene;\n        // Allows for usage of an external Three.js renderer\n        this.renderer = options.renderer;\n        // Allows for usage of an external Three.js camera\n        this.camera = options.camera;\n\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\n        // Currently this means pre-computing splat distances from the camera on the GPU\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort;\n        if (this.gpuAcceleratedSort !== true && this.gpuAcceleratedSort !== false) {\n            if (this.isMobile()) this.gpuAcceleratedSort = false;\n            else this.gpuAcceleratedSort = true;\n        }\n\n        // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\n        // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\n        // overflow in larger scenes.\n        if (options.integerBasedSort === undefined || options.integerBasedSort === null) {\n            options.integerBasedSort = true;\n        }\n        this.integerBasedSort = options.integerBasedSort;\n\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\n        // https://web.dev/articles/cross-origin-isolation-guide\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\n        // loading the application. More information is available in the README.\n        if (options.sharedMemoryForWorkers === undefined || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = true;\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\n\n        // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\n        // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\n        // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\n        // SplatMesh.getSplatCenter() by default.\n        const dynamicScene = !!options.dynamicScene;\n        this.splatMesh = new SplatMesh(dynamicScene, this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio,\n                                       this.gpuAcceleratedSort, this.integerBasedSort);\n\n\n        this.webXRMode = options.webXRMode || WebXRMode.None;\n\n        if (this.webXRMode !== WebXRMode.None) {\n            this.gpuAcceleratedSort = false;\n        }\n\n        this.controls = null;\n\n        this.showMeshCursor = false;\n        this.showControlPlane = false;\n        this.showInfo = false;\n\n        this.sceneHelper = null;\n\n        this.sortWorker = null;\n        this.sortRunning = false;\n        this.splatRenderCount = 0;\n        this.sortWorkerIndexesToSort = null;\n        this.sortWorkerSortedIndexes = null;\n        this.sortWorkerPrecomputedDistances = null;\n        this.sortWorkerTransforms = null;\n        this.runAfterFirstSort = [];\n\n        this.selfDrivenModeRunning = false;\n        this.splatRenderingInitialized = false;\n\n        this.raycaster = new Raycaster();\n\n        this.infoPanel = null;\n\n        this.currentFPS = 0;\n        this.lastSortTime = 0;\n\n        this.previousCameraTarget = new THREE.Vector3();\n        this.nextCameraTarget = new THREE.Vector3();\n\n        this.mousePosition = new THREE.Vector2();\n        this.mouseDownPosition = new THREE.Vector2();\n        this.mouseDownTime = null;\n\n        this.resizeObserver = null;\n        this.mouseMoveListener = null;\n        this.mouseDownListener = null;\n        this.mouseUpListener = null;\n        this.keyDownListener = null;\n\n        this.sortPromise = null;\n        this.sortPromiseResolver = null;\n        this.downloadPromisesToAbort = {};\n        this.splatSceneLoadPromise = null;\n\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\n        this.loadingSpinner.hide();\n        this.loadingProgressBar = new LoadingProgressBar(this.rootElement || document.body);\n        this.loadingProgressBar.hide();\n        this.infoPanel = new InfoPanel(this.rootElement || document.body);\n        this.infoPanel.hide();\n\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\n\n        this.initialized = false;\n        this.disposing = false;\n        this.disposed = false;\n        if (!this.dropInMode) this.init();\n    }\n\n    init() {\n\n        if (this.initialized) return;\n\n        if (!this.rootElement) {\n            if (!this.usingExternalRenderer) {\n                this.rootElement = document.createElement('div');\n                this.rootElement.style.width = '100%';\n                this.rootElement.style.height = '100%';\n                this.rootElement.style.position = 'absolute';\n                document.body.appendChild(this.rootElement);\n            } else {\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\n            }\n        }\n\n        const renderDimensions = new THREE.Vector2();\n        this.getRenderDimensions(renderDimensions);\n\n        if (!this.usingExternalCamera) {\n            this.camera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 500);\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.up.copy(this.cameraUp).normalize();\n            this.camera.lookAt(this.initialCameraLookAt);\n        }\n\n        if (!this.usingExternalRenderer) {\n            this.renderer = new THREE.WebGLRenderer({\n                antialias: false,\n                precision: 'highp'\n            });\n            this.renderer.setPixelRatio(this.devicePixelRatio);\n            this.renderer.autoClear = true;\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n\n            this.resizeObserver = new ResizeObserver(() => {\n                this.getRenderDimensions(renderDimensions);\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n            });\n            this.resizeObserver.observe(this.rootElement);\n            this.rootElement.appendChild(this.renderer.domElement);\n        }\n\n        if (this.webXRMode) {\n            if (this.webXRMode === WebXRMode.VR) {\n                this.rootElement.appendChild(VRButton.createButton(this.renderer));\n            } else if (this.webXRMode === WebXRMode.AR) {\n                this.rootElement.appendChild(ARButton.createButton(this.renderer));\n            }\n            this.renderer.xr.enabled = true;\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.up.copy(this.cameraUp).normalize();\n            this.camera.lookAt(this.initialCameraLookAt);\n        }\n\n        this.threeScene = this.threeScene || new THREE.Scene();\n        this.sceneHelper = new SceneHelper(this.threeScene);\n        this.sceneHelper.setupMeshCursor();\n        this.sceneHelper.setupFocusMarker();\n        this.sceneHelper.setupControlPlane();\n\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n            this.controls.listenToKeyEvents(window);\n            this.controls.rotateSpeed = 0.5;\n            this.controls.maxPolarAngle = Math.PI * .75;\n            this.controls.minPolarAngle = 0.1;\n            this.controls.enableDamping = true;\n            this.controls.dampingFactor = 0.05;\n            this.controls.target.copy(this.initialCameraLookAt);\n            this.mouseMoveListener = this.onMouseMove.bind(this);\n            this.renderer.domElement.addEventListener('pointermove', this.mouseMoveListener, false);\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.renderer.domElement.addEventListener('pointerdown', this.mouseDownListener, false);\n            this.mouseUpListener = this.onMouseUp.bind(this);\n            this.renderer.domElement.addEventListener('pointerup', this.mouseUpListener, false);\n            this.keyDownListener = this.onKeyDown.bind(this);\n            window.addEventListener('keydown', this.keyDownListener, false);\n        }\n\n        this.loadingProgressBar.setContainer(this.rootElement);\n        this.loadingSpinner.setContainer(this.rootElement);\n        this.infoPanel.setContainer(this.rootElement);\n\n        this.initialized = true;\n    }\n\n    removeEventHandlers() {\n        if (this.useBuiltInControls) {\n            this.renderer.domElement.removeEventListener('pointermove', this.mouseMoveListener);\n            this.mouseMoveListener = null;\n            this.renderer.domElement.removeEventListener('pointerdown', this.mouseDownListener);\n            this.mouseDownListener = null;\n            this.renderer.domElement.removeEventListener('pointerup', this.mouseUpListener);\n            this.mouseUpListener = null;\n            window.removeEventListener('keydown', this.keyDownListener);\n            this.keyDownListener = null;\n        }\n    }\n\n    onKeyDown = function() {\n\n        const forward = new THREE.Vector3();\n        const tempMatrixLeft = new THREE.Matrix4();\n        const tempMatrixRight = new THREE.Matrix4();\n\n        return function(e) {\n            forward.set(0, 0, -1);\n            forward.transformDirection(this.camera.matrixWorld);\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\n            switch (e.code) {\n                case 'ArrowLeft':\n                    this.camera.up.transformDirection(tempMatrixLeft);\n                break;\n                case 'ArrowRight':\n                    this.camera.up.transformDirection(tempMatrixRight);\n                break;\n                case 'KeyC':\n                    this.showMeshCursor = !this.showMeshCursor;\n                break;\n                case 'KeyP':\n                    this.showControlPlane = !this.showControlPlane;\n                break;\n                case 'KeyI':\n                    this.showInfo = !this.showInfo;\n                    if (this.showInfo) {\n                        this.infoPanel.show();\n                    } else {\n                        this.infoPanel.hide();\n                    }\n                break;\n            }\n        };\n\n    }();\n\n    onMouseMove(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    }\n\n    onMouseDown() {\n        this.mouseDownPosition.copy(this.mousePosition);\n        this.mouseDownTime = getCurrentTime();\n    }\n\n    onMouseUp = function() {\n\n        const clickOffset = new THREE.Vector2();\n\n        return function(mouse) {\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n            const mouseUpTime = getCurrentTime();\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n            if (wasClick) {\n                this.onMouseClick(mouse);\n            }\n        };\n\n    }();\n\n    onMouseClick(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n        this.checkForFocalPointChange();\n    }\n\n    checkForFocalPointChange = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        const toNewFocalPoint = new THREE.Vector3();\n        const outHits = [];\n\n        return function() {\n            if (!this.transitioningCameraTarget) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    const hit = outHits[0];\n                    const intersectionPoint = hit.origin;\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\n                        this.previousCameraTarget.copy(this.controls.target);\n                        this.nextCameraTarget.copy(intersectionPoint);\n                        this.transitioningCameraTarget = true;\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\n                    }\n                }\n            }\n        };\n\n    }();\n\n    getRenderDimensions(outDimensions) {\n        if (this.rootElement) {\n            outDimensions.x = this.rootElement.offsetWidth;\n            outDimensions.y = this.rootElement.offsetHeight;\n        } else {\n            this.renderer.getSize(outDimensions);\n        }\n    }\n\n    updateSplatMesh = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.splatMesh) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            if (splatCount > 0) {\n                this.splatMesh.updateTransforms();\n                this.getRenderDimensions(renderDimensions);\n                this.cameraFocalLengthX = this.camera.projectionMatrix.elements[0] *\n                                          this.devicePixelRatio * renderDimensions.x * 0.45;\n                                          this.cameraFocalLengthY = this.camera.projectionMatrix.elements[5] *\n                                          this.devicePixelRatio * renderDimensions.y * 0.45;\n                this.splatMesh.updateUniforms(renderDimensions, this.cameraFocalLengthX, this.cameraFocalLengthY);\n            }\n        };\n\n    }();\n\n    isLoading() {\n        return Object.keys(this.downloadPromisesToAbort) > 0 || this.splatSceneLoadPromise !== null;\n    }\n\n    isDisposingOrDisposed() {\n        return this.disposing || this.disposed;\n    }\n\n\n    clearSplatSceneLoadPromise() {\n        this.splatSceneLoadPromise = null;\n    }\n\n    setSplatSceneLoadPromise(promise) {\n        this.splatSceneLoadPromise = promise;\n    }\n\n    /**\n     * Add a splat scene to the viewer and display any loading UI if appropriate.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received, or other processing occurs\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n\n        if (this.isLoading()) {\n            throw new Error('Cannot add splat scene while another load is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot add splat scene after dispose() is called.');\n        }\n\n        let format = options.format;\n        if (format === undefined || format === null) {\n            format = sceneFormatFromPath(path);\n        }\n        const streamBuildSections = Viewer.isStreamable(format) && options.streamView;\n\n        const splatBufferOptions = {\n            'rotation': options.rotation || options.orientation,\n            'position': options.position,\n            'scale': options.scale,\n            'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\n        };\n\n        let showLoadingUI = options.showLoadingUI;\n        if (showLoadingUI !== false) showLoadingUI = true;\n\n        let loadingTaskId = null;\n        if (showLoadingUI) loadingTaskId = this.loadingSpinner.addTask('Downloading...');\n\n        let downloadDone = false;\n\n        let loadedPercent = 0;\n        const onProgress = (percent, percentLabel, loaderStatus) => {\n            loadedPercent = percent;\n            if (showLoadingUI) {\n                if (loaderStatus === LoaderStatus.Downloading) {\n                    if (percent == 100) {\n                        this.loadingSpinner.setMessageForTask(loadingTaskId, 'Download complete!');\n                    } else {\n                        if (streamBuildSections) {\n                            this.loadingSpinner.setMessageForTask(loadingTaskId, 'Downloading splats...');\n                        } else {\n                            const suffix = percentLabel ? `: ${percentLabel}` : `...`;\n                            this.loadingSpinner.setMessageForTask(loadingTaskId, `Downloading${suffix}`);\n                        }\n                    }\n                } else if (loaderStatus === LoaderStatus.Processing) {\n                    this.loadingSpinner.setMessageForTask(loadingTaskId, 'Processing splats...');\n                } else {\n                    this.loadingSpinner.setMessageForTask(loadingTaskId, 'Ready!');\n                }\n            }\n            if (options.onProgress) options.onProgress(percent, percentLabel, loaderStatus);\n        };\n\n        const buildSection = (splatBuffer, firstBuild, finalBuild) => {\n            if (!streamBuildSections && options.onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\n            return this.addSplatBuffers([splatBuffer], [splatBufferOptions],\n                                         finalBuild, firstBuild && showLoadingUI, showLoadingUI).then(() => {\n                if (!streamBuildSections && options.onProgress) options.onProgress(100, '100%', LoaderStatus.Processing);\n                if (showLoadingUI) {\n                    if (firstBuild && streamBuildSections || finalBuild && !streamBuildSections) {\n                        this.runAfterFirstSort.push(() => {\n                            this.loadingSpinner.removeTask(loadingTaskId);\n                            if (!finalBuild && !downloadDone) this.loadingProgressBar.show();\n                        });\n                    }\n                    if (streamBuildSections) {\n                        if (finalBuild) {\n                            downloadDone = true;\n                            this.loadingProgressBar.hide();\n                        } else {\n                            this.loadingProgressBar.setProgress(loadedPercent);\n                        }\n                    }\n                }\n            });\n        };\n\n        const hideLoadingUI = () => {\n            this.loadingProgressBar.hide();\n            this.loadingSpinner.removeAllTasks();\n        };\n\n        const loadFunc = streamBuildSections ? this.loadSplatSceneToSplatBufferStreaming.bind(this) :\n                                               this.loadSplatSceneToSplatBufferNonStreaming.bind(this);\n        return loadFunc(path, format, options.splatAlphaRemovalThreshold, buildSection.bind(this), onProgress, hideLoadingUI.bind(this));\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer and display any loading UI if appropriate.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n     * @param {function} onProgress Function to be called as file data are received\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingUI = true, onProgress = undefined) {\n\n        if (this.isLoading()) {\n            throw new Error('Cannot add splat scene while another load is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot add splat scene after dispose() is called.');\n        }\n\n        const fileCount = sceneOptions.length;\n        const percentComplete = [];\n        if (showLoadingUI) this.loadingSpinner.show();\n        const onLoadProgress = (fileIndex, percent, percentLabel) => {\n            percentComplete[fileIndex] = percent;\n            let totalPercent = 0;\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\n            totalPercent = totalPercent / fileCount;\n            percentLabel = `${totalPercent.toFixed(2)}%`;\n            if (showLoadingUI) {\n                if (totalPercent == 100) {\n                    this.loadingSpinner.setMessage(`Download complete!`);\n                } else {\n                    this.loadingSpinner.setMessage(`Downloading: ${percentLabel}`);\n                }\n            }\n            if (onProgress) onProgress(totalPercent, percentLabel, LoaderStatus.Downloading);\n        };\n\n        const loadPromises = [];\n        const nativeLoadPromises = [];\n        const abortHandlers = [];\n        for (let i = 0; i < sceneOptions.length; i++) {\n\n            let format = sceneOptions[i].format;\n            if (format === undefined || format === null) {\n                format = sceneFormatFromPath(sceneOptions[i].path);\n            }\n\n            const downloadPromise = this.loadSplatSceneToSplatBuffer(sceneOptions[i].path, sceneOptions[i].splatAlphaRemovalThreshold,\n                                                                     onLoadProgress.bind(this, i), false, undefined, format);\n            abortHandlers.push(downloadPromise.abortHandler);\n            loadPromises.push(downloadPromise);\n            nativeLoadPromises.push(downloadPromise.promise);\n            this.downloadPromisesToAbort[downloadPromise.id] = downloadPromise;\n        }\n        const abortHandler = () => {\n            for (let abortHandler of abortHandlers) {\n                abortHandler();\n            }\n        };\n        const loadingPromise = new AbortablePromise((resolve, reject) => {\n            Promise.all(nativeLoadPromises)\n            .then((splatBuffers) => {\n                if (showLoadingUI) this.loadingSpinner.hide();\n                if (onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\n                this.addSplatBuffers(splatBuffers, sceneOptions, true, showLoadingUI, showLoadingUI).then(() => {\n                    if (onProgress) onProgress(100, '100%', LoaderStatus.Processing);\n                    resolve();\n                    this.clearSplatSceneLoadPromise();\n                });\n            })\n            .catch((e) => {\n                if (showLoadingUI) this.loadingSpinner.hide();\n                if (!(e instanceof AbortedPromiseError)) {\n                    reject(new Error(`Viewer::addSplatScenes -> Could not load one or more splat scenes.`));\n                } else {\n                    resolve();\n                }\n                this.clearSplatSceneLoadPromise();\n            })\n            .finally(() => {\n                for (let loadPromise of loadPromises) {\n                    delete this.downloadPromisesToAbort[loadPromise.id];\n                }\n            });\n        }, abortHandler);\n        this.setSplatSceneLoadPromise(loadingPromise);\n        return loadingPromise;\n    }\n\n    /**\n     * Download a single non-streamed splat scene and convert to splat buffer. Also sets/clears relevant instance\n     * synchronization objects, and calls appropriate functions on success or failure.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {SceneFormat} format Format of the splat scene file\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n     * @param {function} onDownloadComplete Function to be called when download is complete\n     * @param {function} onProgress Function to be called as file data are received, or other processing occurs\n     * @param {function} onException Function to be called when exception occurs\n     * @return {AbortablePromise}\n     */\n    loadSplatSceneToSplatBufferNonStreaming(path, format, splatAlphaRemovalThreshold, onDownloadComplete, onProgress, onException) {\n        const clearDownloadPromise = () => {\n            delete this.downloadPromisesToAbort[loadPromise.id];\n        };\n\n        const loadPromise = this.loadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onProgress, false, undefined, format)\n        .then((splatBuffer) => {\n            clearDownloadPromise();\n            return onDownloadComplete(splatBuffer, true, true).then(() => {\n                this.clearSplatSceneLoadPromise();\n            });\n        })\n        .catch((e) => {\n            if (onException) onException();\n            this.clearSplatSceneLoadPromise();\n            clearDownloadPromise();\n            if (!(e instanceof AbortedPromiseError)) {\n                throw (new Error(`Viewer::addSplatScene -> Could not load file ${path}`));\n            }\n        });\n\n        this.downloadPromisesToAbort[loadPromise.id] = loadPromise;\n        this.setSplatSceneLoadPromise(loadPromise);\n\n        return loadPromise;\n    }\n\n    /**\n     * Download a single splat scene and convert to splat buffer in a streamed manner, allowing rendering as the file downloads.\n     * Also sets/clears relevant instance synchronization objects, and calls appropriate functions on success or failure.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {SceneFormat} format Format of the splat scene file\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n     * @param {function} onSectionDownloaded Function to be called as each streamed section is downloaded\n     * @param {function} onProgress Function to be called as file data are received, or other processing occurs\n     * @param {function} onException Function to be called when exception occurs\n     * @return {AbortablePromise}\n     */\n    loadSplatSceneToSplatBufferStreaming(path, format, splatAlphaRemovalThreshold, onSectionDownloaded, onProgress, onException) {\n        let firstStreamedSectionBuildResolver;\n        let firstStreamedSectionBuildRejecter;\n        let fullBuildResolver;\n        let fullBuildRejecter;\n        let steamedSectionBuildCount = 0;\n        let streamedSectionBuilding = false;\n        const queuedStreamedSectionBuilds = [];\n\n        const checkAndBuildStreamedSections = () => {\n            if (queuedStreamedSectionBuilds.length > 0 && !streamedSectionBuilding && !this.isDisposingOrDisposed()) {\n                streamedSectionBuilding = true;\n                const queuedBuild = queuedStreamedSectionBuilds.shift();\n                onSectionDownloaded(queuedBuild.splatBuffer, queuedBuild.firstBuild, queuedBuild.finalBuild)\n                .then(() => {\n                    streamedSectionBuilding = false;\n                    if (queuedBuild.firstBuild) {\n                        firstStreamedSectionBuildResolver();\n                    } else if (queuedBuild.finalBuild) {\n                        fullBuildResolver();\n                        this.clearSplatSceneLoadPromise();\n                    }\n                    window.setTimeout(() => {\n                        checkAndBuildStreamedSections();\n                    }, 1);\n                });\n            }\n        };\n\n        const onStreamedSectionProgress = (splatBuffer, finalBuild) => {\n            if (!this.isDisposingOrDisposed()) {\n                queuedStreamedSectionBuilds.push({\n                    splatBuffer,\n                    firstBuild: steamedSectionBuildCount === 0,\n                    finalBuild\n                });\n                steamedSectionBuildCount++;\n                checkAndBuildStreamedSections();\n            }\n        };\n\n        let fullDownloadPromise = this.loadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold,\n                                                                   onProgress, true, onStreamedSectionProgress, format);\n\n        const firstStreamedSectionBuildPromise = new AbortablePromise((resolver, rejecter) => {\n            firstStreamedSectionBuildResolver = resolver;\n            firstStreamedSectionBuildRejecter = rejecter;\n            const clearDownloadPromise = () => {\n                delete this.downloadPromisesToAbort[fullDownloadPromise.id];\n            };\n            fullDownloadPromise.then(() => {\n                clearDownloadPromise();\n            })\n            .catch((e) => {\n                if (!(e instanceof AbortedPromiseError)) {\n                    fullBuildRejecter(e);\n                    firstStreamedSectionBuildRejecter(e);\n                }\n                if (onException) onException();\n                this.clearSplatSceneLoadPromise();\n                clearDownloadPromise();\n            });\n        }, fullDownloadPromise.abortHandler);\n        this.downloadPromisesToAbort[fullDownloadPromise.id] = fullDownloadPromise;\n\n        this.setSplatSceneLoadPromise(new AbortablePromise((resolver, rejecter) => {\n            fullBuildResolver = resolver;\n            fullBuildRejecter = rejecter;\n        }));\n\n        return firstStreamedSectionBuildPromise;\n    }\n\n    /**\n     * Download a splat scene and convert to SplatBuffer instance.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\n     *                                            value (valid range: 0 - 255), defaults to 1\n     *\n     * @param {function} onProgress Function to be called as file data are received\n     * @param {boolean} streamBuiltSections Construct file sections into splat buffers as they are downloaded\n     * @param {function} onSectionBuilt Function to be called when new section is added to the file\n     * @param {string} format File format of the scene\n     * @return {AbortablePromise}\n     */\n    loadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined,\n                                streamBuiltSections = false, onSectionBuilt = undefined, format) {\n        if (format === SceneFormat.Splat) {\n            return new SplatLoader().loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt,\n                                                 0, splatAlphaRemovalThreshold, false);\n        } else if (format === SceneFormat.KSplat) {\n            return new KSplatLoader().loadFromURL(path, onProgress, streamBuiltSections,\n                                                  onSectionBuilt, 0, splatAlphaRemovalThreshold);\n        } else if (format === SceneFormat.Ply) {\n            return new PlyLoader().loadFromURL(path, onProgress, 0, splatAlphaRemovalThreshold);\n        }\n\n        return AbortablePromise.reject(new Error(`Viewer::loadSplatSceneToSplatBuffer -> File format not supported: ${path}`));\n    }\n\n    static isStreamable(format) {\n        return format === SceneFormat.Splat || format === SceneFormat.KSplat;\n    }\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\n     * This function will terminate the existing sort worker (if there is one).\n     */\n    addSplatBuffers = function() {\n\n        let loadCount = 0;\n        let splatProcessingTaskId = null;\n\n        return function(splatBuffers, splatBufferOptions = [], finalBuild = true,\n                        showLoadingUI = true, showLoadingSpinnerForSplatTreeBuild = true) {\n\n            if (this.isDisposingOrDisposed()) return Promise.resolve();\n\n            this.splatRenderingInitialized = false;\n            loadCount++;\n\n            const finish = (resolver) => {\n                if (this.isDisposingOrDisposed()) return;\n\n                loadCount--;\n                if (loadCount === 0) {\n                    if (splatProcessingTaskId !== null) {\n                        this.loadingSpinner.removeTask(splatProcessingTaskId);\n                        splatProcessingTaskId = null;\n                    }\n                    this.splatRenderingInitialized = true;\n                }\n\n                // If we aren't calculating the splat distances from the center on the GPU, the sorting worker needs splat centers and\n                // transform indexes so that it can calculate those distance values.\n                if (!this.gpuAcceleratedSort) {\n                    const centers = this.integerBasedSort ? this.splatMesh.getIntegerCenters(true) : this.splatMesh.getFloatCenters(true);\n                    const transformIndexes = this.splatMesh.getTransformIndexes();\n                    this.sortWorker.postMessage({\n                        'centers': centers.buffer,\n                        'transformIndexes': transformIndexes.buffer\n                    });\n                }\n                this.forceSort = true;\n                resolver();\n            };\n\n            const performLoad = () => {\n                return new Promise((resolve) => {\n                    if (showLoadingUI) {\n                        splatProcessingTaskId = this.loadingSpinner.addTask('Processing splats...');\n                    }\n                    delayedExecute(() => {\n                        if (this.isDisposingOrDisposed()) {\n                            resolve();\n                        } else {\n                            this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions, finalBuild, showLoadingSpinnerForSplatTreeBuild);\n                            const maxSplatCount = this.splatMesh.getMaxSplatCount();\n                            if (this.sortWorker && this.sortWorker.maxSplatCount !== maxSplatCount) {\n                                this.disposeSortWorker();\n                            }\n                            if (!this.sortWorker) {\n                                this.setupSortWorker(this.splatMesh).then(() => {\n                                    finish(resolve);\n                                });\n                            } else {\n                                finish(resolve);\n                            }\n                        }\n                    });\n                });\n            };\n\n            return performLoad();\n        };\n\n    }();\n\n    disposeSortWorker() {\n        if (this.sortWorker) this.sortWorker.terminate();\n        this.sortWorker = null;\n        this.sortRunning = false;\n    }\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. This function is additive; all splat\n     * buffers contained by the viewer's splat mesh before calling this function will be preserved.\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n     * @param {boolean} showLoadingSpinnerForSplatTreeBuild Whether or not to show the loading spinner during\n     *                                                      construction of the splat tree.\n     */\n    addSplatBuffersToMesh(splatBuffers, splatBufferOptions, finalBuild = true, showLoadingSpinnerForSplatTreeBuild = false) {\n        if (this.isDisposingOrDisposed()) return;\n        const allSplatBuffers = this.splatMesh.splatBuffers || [];\n        const allSplatBufferOptions = this.splatMesh.splatBufferOptions || [];\n        allSplatBuffers.push(...splatBuffers);\n        allSplatBufferOptions.push(...splatBufferOptions);\n        if (this.renderer) this.splatMesh.setRenderer(this.renderer);\n        let splatOptimizingTaskId;\n        const onSplatTreeIndexesUpload = (finished) => {\n            if (this.isDisposingOrDisposed()) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            if (showLoadingSpinnerForSplatTreeBuild && splatCount >= MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER) {\n                if (!finished && !splatOptimizingTaskId) {\n                    this.loadingSpinner.setMinimized(true, true);\n                    splatOptimizingTaskId = this.loadingSpinner.addTask('Optimizing splats...');\n                }\n            }\n        };\n        const onSplatTreeConstructed = (finished) => {\n            if (this.isDisposingOrDisposed()) return;\n            if (finished && splatOptimizingTaskId) {\n                this.loadingSpinner.removeTask(splatOptimizingTaskId);\n            }\n        };\n        this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true, finalBuild,\n                             onSplatTreeIndexesUpload, onSplatTreeConstructed);\n        this.splatMesh.frustumCulled = false;\n    }\n\n    /**\n     * Set up the splat sorting web worker.\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\n     * @return {Promise}\n     */\n    setupSortWorker(splatMesh) {\n        if (this.isDisposingOrDisposed()) return;\n        return new Promise((resolve) => {\n            const DistancesArrayType = this.integerBasedSort ? Int32Array : Float32Array;\n            const splatCount = splatMesh.getSplatCount();\n            const maxSplatCount = splatMesh.getMaxSplatCount();\n            this.sortWorker = createSortWorker(maxSplatCount, this.sharedMemoryForWorkers,\n                                               this.integerBasedSort, this.splatMesh.dynamicMode);\n            let sortCount = 0;\n            this.sortWorker.onmessage = (e) => {\n                if (e.data.sortDone) {\n                    this.sortRunning = false;\n                    if (this.sharedMemoryForWorkers) {\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\n                    } else {\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes.buffer, 0, e.data.splatRenderCount);\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\n                    }\n                    this.lastSortTime = e.data.sortTime;\n                    this.sortPromiseResolver();\n                    this.sortPromise = null;\n                    this.sortPromiseResolver = null;\n                    if (sortCount === 0) {\n                        this.runAfterFirstSort.forEach((func) => {\n                            func();\n                        });\n                        this.runAfterFirstSort.length = 0;\n                    }\n                    sortCount++;\n                } else if (e.data.sortCanceled) {\n                    this.sortRunning = false;\n                } else if (e.data.sortSetupPhase1Complete) {\n                    console.log('Sorting web worker WASM setup complete.');\n                    if (this.sharedMemoryForWorkers) {\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\n                                                                       e.data.sortedIndexesOffset, maxSplatCount);\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\n                                                                       e.data.indexesToSortOffset, maxSplatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(e.data.precomputedDistancesBuffer,\n                                                                                     e.data.precomputedDistancesOffset,\n                                                                                     maxSplatCount);\n                         this.sortWorkerTransforms = new Float32Array(e.data.transformsBuffer,\n                                                                      e.data.transformsOffset, Constants.MaxScenes * 16);\n                    } else {\n                        this.sortWorkerIndexesToSort = new Uint32Array(maxSplatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(maxSplatCount);\n                        this.sortWorkerTransforms = new Float32Array(Constants.MaxScenes * 16);\n                    }\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\n                    this.sortWorker.maxSplatCount = maxSplatCount;\n                    resolve();\n                } else if (e.data.sortSetupComplete) {\n                    console.log('Sorting web worker ready.');\n                    const splatDataTextures = this.splatMesh.getSplatDataTextures();\n                    const covariancesTextureSize = splatDataTextures.covariances.size;\n                    const centersColorsTextureSize = splatDataTextures.centerColors.size;\n                    console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\n                    console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\n                }\n            };\n        });\n    }\n\n    /**\n     * Start self-driven mode\n     */\n    start() {\n        if (this.selfDrivenMode) {\n            if (this.webXRMode) {\n                this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\n            } else {\n                this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n            }\n            this.selfDrivenModeRunning = true;\n        } else {\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\n        }\n    }\n\n    /**\n     * Stop self-driven mode\n     */\n    stop() {\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\n            if (!this.webXRMode) {\n                cancelAnimationFrame(this.requestFrameId);\n            }\n            this.selfDrivenModeRunning = false;\n        }\n    }\n\n    /**\n     * Dispose of all resources held directly and indirectly by this viewer.\n     */\n    async dispose() {\n        this.disposing = true;\n        let waitPromises = [];\n        let promisesToAbort = [];\n        for (let promiseKey in this.downloadPromisesToAbort) {\n            if (this.downloadPromisesToAbort.hasOwnProperty(promiseKey)) {\n                const downloadPromiseToAbort = this.downloadPromisesToAbort[promiseKey];\n                promisesToAbort.push(downloadPromiseToAbort);\n                waitPromises.push(downloadPromiseToAbort.promise);\n            }\n        }\n        if (this.sortPromise) {\n            waitPromises.push(this.sortPromise);\n        }\n        const disposePromise = Promise.all(waitPromises).finally(() => {\n            this.stop();\n            if (this.controls) {\n                this.controls.dispose();\n                this.controls = null;\n            }\n            if (this.splatMesh) {\n                this.splatMesh.dispose();\n                this.splatMesh = null;\n            }\n            if (this.sceneHelper) {\n                this.sceneHelper.dispose();\n                this.sceneHelper = null;\n            }\n            if (this.resizeObserver) {\n                this.resizeObserver.unobserve(this.rootElement);\n                this.resizeObserver = null;\n            }\n            this.disposeSortWorker();\n            this.removeEventHandlers();\n\n            this.loadingSpinner.removeAllTasks();\n            this.loadingSpinner.setContainer(null);\n            this.loadingProgressBar.hide();\n            this.loadingProgressBar.setContainer(null);\n            this.infoPanel.setContainer(null);\n\n            this.camera = null;\n            this.threeScene = null;\n            this.splatRenderingInitialized = false;\n            this.initialized = false;\n            if (this.renderer) {\n                if (!this.usingExternalRenderer) {\n                    this.rootElement.removeChild(this.renderer.domElement);\n                    this.renderer.dispose();\n                }\n                this.renderer = null;\n            }\n\n            if (!this.usingExternalRenderer) {\n                document.body.removeChild(this.rootElement);\n            }\n\n            this.sortWorkerSortedIndexes = null;\n            this.sortWorkerIndexesToSort = null;\n            this.sortWorkerPrecomputedDistances = null;\n            this.sortWorkerTransforms = null;\n            this.disposed = true;\n            this.disposing = false;\n        });\n        promisesToAbort.forEach((toAbort) => {\n            toAbort.abort();\n        });\n        return disposePromise;\n    }\n\n    selfDrivenUpdate() {\n        if (this.selfDrivenMode && !this.webXRMode) {\n            this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n        }\n        this.update();\n        this.render();\n    }\n\n    render = function() {\n\n        return function() {\n            if (!this.initialized || !this.splatRenderingInitialized) return;\n            const hasRenderables = (threeScene) => {\n                for (let child of threeScene.children) {\n                    if (child.visible) return true;\n                }\n                return false;\n            };\n            const savedAuoClear = this.renderer.autoClear;\n            this.renderer.autoClear = false;\n            if (hasRenderables(this.threeScene)) this.renderer.render(this.threeScene, this.camera);\n            this.renderer.render(this.splatMesh, this.camera);\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\n            this.renderer.autoClear = savedAuoClear;\n        };\n\n    }();\n\n    update(renderer, camera) {\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\n        if (!this.initialized || !this.splatRenderingInitialized) return;\n        if (this.controls) this.controls.update();\n        this.splatMesh.updateVisibleRegionFadeDistance();\n        this.updateSplatSort();\n        this.updateForRendererSizeChanges();\n        this.updateSplatMesh();\n        this.updateMeshCursor();\n        this.updateFPS();\n        this.timingSensitiveUpdates();\n        this.updateInfoPanel();\n        this.updateControlPlane();\n    }\n\n    updateForDropInMode(renderer, camera) {\n        this.renderer = renderer;\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\n        this.camera = camera;\n        if (this.controls) this.controls.object = camera;\n        this.init();\n    }\n\n    updateFPS = function() {\n\n        let lastCalcTime = getCurrentTime();\n        let frameCount = 0;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            const calcDelta = currentTime - lastCalcTime;\n            if (calcDelta >= 1.0) {\n                this.currentFPS = frameCount;\n                frameCount = 0;\n                lastCalcTime = currentTime;\n            } else {\n                frameCount++;\n            }\n        };\n\n    }();\n\n    updateForRendererSizeChanges = function() {\n\n        const lastRendererSize = new THREE.Vector2();\n        const currentRendererSize = new THREE.Vector2();\n\n        return function() {\n            this.renderer.getSize(currentRendererSize);\n            if (currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\n                if (!this.usingExternalCamera) {\n                    this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n                    this.camera.updateProjectionMatrix();\n                }\n                lastRendererSize.copy(currentRendererSize);\n            }\n        };\n\n    }();\n\n    timingSensitiveUpdates = function() {\n\n        let lastUpdateTime;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\n            const timeDelta = currentTime - lastUpdateTime;\n\n            this.updateCameraTransition(currentTime);\n            this.updateFocusMarker(timeDelta);\n\n            lastUpdateTime = currentTime;\n        };\n\n    }();\n\n    updateCameraTransition = function() {\n\n        let tempCameraTarget = new THREE.Vector3();\n        let toPreviousTarget = new THREE.Vector3();\n        let toNextTarget = new THREE.Vector3();\n\n        return function(currentTime) {\n            if (this.transitioningCameraTarget) {\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\n                this.camera.lookAt(tempCameraTarget);\n                this.controls.target.copy(tempCameraTarget);\n                if (t >= 1.0) {\n                    this.transitioningCameraTarget = false;\n                }\n            }\n        };\n\n    }();\n\n    updateFocusMarker = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        let wasTransitioning = false;\n\n        return function(timeDelta) {\n            this.getRenderDimensions(renderDimensions);\n            if (this.transitioningCameraTarget) {\n                this.sceneHelper.setFocusMarkerVisibility(true);\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + FOCUS_MARKER_FADE_IN_SPEED * timeDelta, 1.0);\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                wasTransitioning = true;\n            } else {\n                let currentFocusMarkerOpacity;\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\n                if (currentFocusMarkerOpacity > 0) {\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - FOCUS_MARKER_FADE_OUT_SPEED * timeDelta, 0.0);\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\n                }\n                wasTransitioning = false;\n            }\n        };\n\n    }();\n\n    updateMeshCursor = function() {\n\n        const outHits = [];\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showMeshCursor) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    this.sceneHelper.setMeshCursorVisibility(true);\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\n                } else {\n                    this.sceneHelper.setMeshCursorVisibility(false);\n                }\n            } else {\n                this.sceneHelper.setMeshCursorVisibility(false);\n            }\n        };\n\n    }();\n\n    updateInfoPanel = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.showInfo) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            this.getRenderDimensions(renderDimensions);\n            const cameraLookAtPosition = this.controls ? this.controls.target : null;\n            const meshCursorPosition = this.showMeshCursor ? this.sceneHelper.meshCursor.position : null;\n            const splatRenderCountPct = this.splatRenderCount / splatCount * 100;\n            this.infoPanel.update(renderDimensions, this.camera.position, cameraLookAtPosition,\n                                  this.camera.up, meshCursorPosition, this.currentFPS, splatCount,\n                                  this.splatRenderCount, splatRenderCountPct, this.lastSortTime);\n        };\n\n    }();\n\n    updateControlPlane() {\n        if (this.showControlPlane) {\n            this.sceneHelper.setControlPlaneVisibility(true);\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\n        } else {\n            this.sceneHelper.setControlPlaneVisibility(false);\n        }\n    }\n\n    updateSplatSort = function() {\n\n        const mvpMatrix = new THREE.Matrix4();\n        const cameraPositionArray = [];\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\n        const lastSortViewPos = new THREE.Vector3();\n        const sortViewOffset = new THREE.Vector3();\n        const queuedSorts = [];\n\n        const partialSorts = [\n            {\n                'angleThreshold': 0.55,\n                'sortFractions': [0.125, 0.33333, 0.75]\n            },\n            {\n                'angleThreshold': 0.65,\n                'sortFractions': [0.33333, 0.66667]\n            },\n            {\n                'angleThreshold': 0.8,\n                'sortFractions': [0.5]\n            }\n        ];\n\n        return async function() {\n            if (this.sortRunning) return;\n            if (!this.initialized || !this.splatRenderingInitialized) return;\n\n            let angleDiff = 0;\n            let positionDiff = 0;\n            let needsRefreshForRotation = false;\n            let needsRefreshForPosition = false;\n\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n            angleDiff = sortViewDir.dot(lastSortViewDir);\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\n\n            if (!this.forceSort && !this.splatMesh.dynamicMode && queuedSorts.length === 0) {\n                if (angleDiff <= 0.95) needsRefreshForRotation = true;\n                if (positionDiff >= 1.0) needsRefreshForPosition = true;\n                if (!needsRefreshForRotation && !needsRefreshForPosition) return;\n            }\n\n            this.sortRunning = true;\n            const { splatRenderCount, shouldSortAll } = this.gatherSceneNodesForSort();\n            this.splatRenderCount = splatRenderCount;\n            this.sortPromise = new Promise((resolve) => {\n                this.sortPromiseResolver = resolve;\n            });\n\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\n            mvpMatrix.premultiply(this.camera.projectionMatrix);\n            mvpMatrix.multiply(this.splatMesh.matrixWorld);\n\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\n                await this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\n            }\n\n            if (this.splatMesh.dynamicMode || shouldSortAll) {\n                queuedSorts.push(this.splatRenderCount);\n            } else {\n                if (queuedSorts.length === 0) {\n                    for (let partialSort of partialSorts) {\n                        if (angleDiff < partialSort.angleThreshold) {\n                            for (let sortFraction of partialSort.sortFractions) {\n                                queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\n                            }\n                            break;\n                        }\n                    }\n                    queuedSorts.push(this.splatRenderCount);\n                }\n            }\n            let sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\n\n            cameraPositionArray[0] = this.camera.position.x;\n            cameraPositionArray[1] = this.camera.position.y;\n            cameraPositionArray[2] = this.camera.position.z;\n\n            const sortMessage = {\n                'modelViewProj': mvpMatrix.elements,\n                'cameraPosition': cameraPositionArray,\n                'splatRenderCount': this.splatRenderCount,\n                'splatSortCount': sortCount,\n                'usePrecomputedDistances': this.gpuAcceleratedSort\n            };\n            if (this.splatMesh.dynamicMode) {\n                this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\n            }\n            if (!this.sharedMemoryForWorkers) {\n                sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\n                sortMessage.transforms = this.sortWorkerTransforms;\n                if (this.gpuAcceleratedSort) {\n                    sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\n                }\n            }\n            this.sortWorker.postMessage({\n                'sort': sortMessage\n            });\n\n            if (queuedSorts.length === 0) {\n                lastSortViewPos.copy(this.camera.position);\n                lastSortViewDir.copy(sortViewDir);\n            }\n\n            this.forceSort = false;\n        };\n\n    }();\n\n    /**\n     * Determine which splats to render by checking which are inside or close to the view frustum\n     */\n    gatherSceneNodesForSort = function() {\n\n        const nodeRenderList = [];\n        let allSplatsSortBuffer = null;\n        const tempVectorYZ = new THREE.Vector3();\n        const tempVectorXZ = new THREE.Vector3();\n        const tempVector = new THREE.Vector3();\n        const modelView = new THREE.Matrix4();\n        const baseModelView = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const renderDimensions = new THREE.Vector3();\n        const forward = new THREE.Vector3(0, 0, -1);\n\n        const tempMax = new THREE.Vector3();\n        const nodeSize = (node) => {\n            return tempMax.copy(node.max).sub(node.min).length();\n        };\n\n        const MaximumDistanceToRender = 125;\n\n        return function(gatherAllNodes = false) {\n\n            this.getRenderDimensions(renderDimensions);\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\n            const cosFovXOver2 = Math.cos(fovXOver2);\n            const cosFovYOver2 = Math.cos(fovYOver2);\n\n            const splatTree = this.splatMesh.getSplatTree();\n\n            if (splatTree) {\n                baseModelView.copy(this.camera.matrixWorld).invert();\n                baseModelView.multiply(this.splatMesh.matrixWorld);\n\n                let nodeRenderCount = 0;\n                let splatRenderCount = 0;\n\n                for (let s = 0; s < splatTree.subTrees.length; s++) {\n                    const subTree = splatTree.subTrees[s];\n                    modelView.copy(baseModelView);\n                    if (this.splatMesh.dynamicMode) {\n                        this.splatMesh.getSceneTransform(s, sceneTransform);\n                        modelView.multiply(sceneTransform);\n                    }\n                    const nodeCount = subTree.nodesWithIndexes.length;\n                    for (let i = 0; i < nodeCount; i++) {\n                        const node = subTree.nodesWithIndexes[i];\n                        if (!node.data || !node.data.indexes || node.data.indexes.length === 0) continue;\n                        tempVector.copy(node.center).applyMatrix4(modelView);\n\n                        const distanceToNode = tempVector.length();\n                        tempVector.normalize();\n\n                        tempVectorYZ.copy(tempVector).setX(0).normalize();\n                        tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n                        const cameraAngleXZDot = forward.dot(tempVectorXZ);\n                        const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n                        const ns = nodeSize(node);\n                        const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\n                        const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\n                        if (!gatherAllNodes && ((outOfFovX || outOfFovY ||\n                             distanceToNode > MaximumDistanceToRender) && distanceToNode > ns)) {\n                            continue;\n                        }\n                        splatRenderCount += node.data.indexes.length;\n                        nodeRenderList[nodeRenderCount] = node;\n                        node.data.distanceToNode = distanceToNode;\n                        nodeRenderCount++;\n                    }\n                }\n\n                nodeRenderList.length = nodeRenderCount;\n                nodeRenderList.sort((a, b) => {\n                    if (a.data.distanceToNode < b.data.distanceToNode) return -1;\n                    else return 1;\n                });\n\n                let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n                for (let i = 0; i < nodeRenderCount; i++) {\n                    const node = nodeRenderList[i];\n                    const windowSizeInts = node.data.indexes.length;\n                    const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n                    let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer,\n                                                   currentByteOffset - windowSizeBytes, windowSizeInts);\n                    destView.set(node.data.indexes);\n                    currentByteOffset -= windowSizeBytes;\n                }\n\n                return {\n                    'splatRenderCount': splatRenderCount,\n                    'shouldSortAll': false\n                };\n            } else {\n                const totalSplatCount = this.splatMesh.getSplatCount();\n                if (!allSplatsSortBuffer || allSplatsSortBuffer.length !== totalSplatCount) {\n                    allSplatsSortBuffer = new Uint32Array(totalSplatCount);\n                    for (let i = 0; i < totalSplatCount; i++) {\n                        allSplatsSortBuffer[i] = i;\n                    }\n                }\n                this.sortWorkerIndexesToSort.set(allSplatsSortBuffer);\n                return {\n                    'splatRenderCount': totalSplatCount,\n                    'shouldSortAll': true\n                };\n            }\n        };\n\n    }();\n\n    getSplatMesh() {\n        return this.splatMesh;\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.splatMesh.getScene(sceneIndex);\n    }\n\n    isMobile() {\n        return navigator.userAgent.includes('Mobi');\n    }\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0005\u0001|\u0003{\u0002\u0003}\u0002~ \u000b \nk!\f\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \u000e \u0005 \u000eH\u001b!\u000e \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000f\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000\"\u0015A\u0002tj(\u0002\u0000\"\nG\u0004@\u0002~ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001\"\u0011�\u001f\u0002��\u0014 \u0011�\u001f\u0003��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u0019\u0002~ \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012!\u0013\u0002~ \u0011�\u001f\u0000��\u0014 \u0011�\u001f\u0001��\"\u0001 \u0012��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u001a \u0013 \u0019�\u001e\u0001!\u0012\u0002~ \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012 \u001a�\u001e\u0001 \u0012�\r\u0000\u0001\u0002\u0003\b\t\n\u000b\u0010\u0011\u0012\u0013\u0018\u0019\u001a\u001b!\u0012 \n!\u000f\u000b \u0003 \u0014j \u0001 \u0015A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0002\u000b\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \u0002�\u0011 \n�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \u000e \u0002 \u000eH\u001b!\u000e \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0001\u000b \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0001\u000b\u0002@ \u000fE\u0004@ \u000b \fK\r\u0001A����x!\rA����\u0007!\u000e\f\u0002\u000bA����\u0007!\u000eA����x!\r \u000b \fM\r\u0001A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\nG\u0004@ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001!\u0011 \n!\u000f\u000b \u0003 \u0014j\u0002 \u0011 \u0001 \u0015A\u0002t\"\nj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000 \u0012�\u001f\u0001� \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0001 \nA\brj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000� \u0012�\u001f\u0001��D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000b \u0005*\u0002(!\u0016 \u0005*\u0002\u0018!\u0017 \u0005*\u0002\b!\u0018A����\u0007!\u000eA����x!\r \f!\u0005\u0003@\u0002 \u0018 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\u0000� \u0017 \u0002*\u0002\u0004�� \u0016 \u0002*\u0002\b���D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n \u0003 \u0007j \n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \u000e���!\u0016 \f!\r\u0003@\u0002 \u0016 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \u000ek��\"\u0017�C\u0000\u0000\u0000O]\u0004@ \u0017�\f\u0001\u000bA����x\u000b!\n \u0001 \n6\u0002\u0000 \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\u000e\u0003@ \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \u000eA\u0001j\"\u000e \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\u000e\u0003@ \u0006 \u000eA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \u000eA\u0001J!\u0002 \u0001!\u000e \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\u000e\u0003@ \u0006 \u000b \u0004 \u0003 \u000eA\u0001k\"\u000eA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \f \u000eH\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","import * as THREE from 'three';\nimport { Viewer } from './Viewer.js';\n\n/**\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\n * any other Three.js scene object (Mesh, Object3D, etc.)\n */\nexport class DropInViewer extends THREE.Group {\n\n    constructor(options = {}) {\n        super();\n\n        options.selfDrivenMode = false;\n        options.useBuiltInControls = false;\n        options.rootElement = null;\n        options.ignoreDevicePixelRatio = false;\n        options.dropInMode = true;\n        options.camera = undefined;\n        options.renderer = undefined;\n\n        this.viewer = new Viewer(options);\n\n        this.callbackMesh = DropInViewer.createCallbackMesh();\n        this.add(this.callbackMesh);\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\n\n    }\n\n    /**\n     * Add a single splat scene to the viewer.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n        if (options.showLoadingUI !== false) options.showLoadingUI = true;\n        const loadPromise = this.viewer.addSplatScene(path, options);\n        loadPromise.then(() => {\n            this.add(this.viewer.splatMesh);\n        });\n        return loadPromise;\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingUI) {\n        if (showLoadingUI !== false) showLoadingUI = true;\n        const loadPromise = this.viewer.addSplatScenes(sceneOptions, showLoadingUI);\n        loadPromise.then(() => {\n            this.add(this.viewer.splatMesh);\n        });\n        return loadPromise;\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.viewer.getSplatScene(sceneIndex);\n    }\n\n    dispose() {\n        return this.viewer.dispose();\n    }\n\n    static onBeforeRender(viewer, renderer, threeScene, camera) {\n        viewer.update(renderer, camera);\n    }\n\n    static createCallbackMesh() {\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\n        const material = new THREE.MeshBasicMaterial();\n        material.colorWrite = false;\n        material.depthWrite = false;\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.frustumCulled = false;\n        return mesh;\n    }\n\n}\n"],"names":["UncompressedSplatArray","static","X","Y","Z","SCALE0","SCALE1","SCALE2","ROTATION0","ROTATION1","ROTATION2","ROTATION3","FDC0","FDC1","FDC2","OPACITY","constructor","this","splats","splatCount","addSplat","splat","push","addDefaultSplat","newSplat","addSplatFromComonents","x","y","z","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","opacity","addSplatFromArray","src","srcIndex","srcSplat","PlyParser","plyBuffer","decodeHeader","decoder","TextDecoder","headerOffset","headerText","readChunkSize","byteLength","Error","headerChunk","Uint8Array","decode","endHeaderTestChunk","Math","max","includes","headerLines","split","propertyTypes","i","length","line","trim","startsWith","splatCountMatch","match","parseInt","propertyMatch","propertyType","vertexByteOffset","indexOf","HeaderEndToken","vertexData","DataView","readRawVertexFast","offset","fieldOffsets","propertiesToRead","outVertex","rawVertex","property","getFloat32","getUint8","parseToUncompressedSplatArray","nRestCoeffs","propertyName","nCoeffsPerColor","shFeatureOrder","rgb","plyRowSize","fieldSize","double","int","uint","float","short","ushort","uchar","fieldName","hasOwnProperty","type","splatArray","row","undefined","OFFSET","exp","SH_C0","AbortablePromise","promiseFunc","abortHandler","promiseResolve","promiseReject","promise","Promise","resolve","reject","bind","args","error","id","idGen","then","onResolve","onResolveResult","args2","catch","onFail","abort","AbortedPromiseError","msg","super","floatView","Float32Array","int32View","Int32Array","buffer","uintEncodedFloat","f","fetchWithProgress","path","onProgress","saveChunks","abortController","AbortController","signal","aborted","rejectFunc","fetch","async","data","reader","body","getReader","bytesDownloaded","_fileSize","headers","get","fileSize","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","toFixed","clamp","val","min","getCurrentTime","performance","now","disposeAllMeshes","object3D","geometry","dispose","material","children","child","delayedExecute","func","window","setTimeout","LoaderStatus","PlyLoader","splatBuffer","loadFromURL","fileName","compressionLevel","minimumAlpha","sectionSize","sceneCenter","blockSize","bucketSize","plyFileData","GaussianSplats3D","SplatBufferGenerator","getStandardGenerator","generateFromUncompressedSplatArray","SplatBuffer","BytesPerCenter","BytesPerColor","BytesPerScale","BytesPerRotation","BytesPerSplat","ScaleRange","bufferData","secLoadedCountsToMax","constructFromBuffer","fbf","THREE","DataUtils","fromHalfFloat","getSplatCount","getMaxSplatCount","maxSplatCount","getBucketIndex","section","localSplatIndex","bucketIndex","maxSplatIndexInFullBuckets","fullBucketCount","floor","bucketSplatIndex","partiallyFullBucketIndex","currentPartiallyFilledBucketSize","partiallyFilledBucketLengths","getSplatCenter","globalSplatIndex","outCenter","transform","sectionIndex","globalSplatIndexToSectionMap","sections","splatCountOffset","centerBase","uint16PerSplat","bucketBase","BucketStorageSizeFloats","sf","compressionScaleFactor","sr","compressionScaleRange","dataArrayUint16","bucketArray","float32PerSplat","dataArrayFloat32","applyMatrix4","getSplatScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","Vector3","index","outScale","outRotation","floatsPerSplat","sectionFloatArray","splatFloatBase","scaleBase","SplatScaleOffsetFloat","set","rotationBase","SplatRotationOffsetFloat","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getSplatColor","outColor","colorBase","bytesPerSplat","bytesPerCenter","bytesPerScale","bytesPerRotation","dataArrayUint8","fillSplatCenterArray","outCenterArray","srcFrom","srcTo","destFrom","center","centerDestBase","CenterComponentCount","tempMatrix4","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","thf","toHalfFloat","scale","rotation","outCovariance","outOffset","desiredOutputCompressionLevel","setFromMatrix4","transpose","premultiply","elements","fillSplatCovarianceArray","covarianceArray","Quaternion","covarianceDestBase","CovarianceComponentCount","computeCovariance","fillSplatColorArray","outColorArray","splatColorOffset","colorSrcBase","colorDestBase","ColorComponentCount","parseHeader","headerArrayUint8","HeaderSizeBytes","headerArrayUint16","Uint16Array","headerArrayUint32","Uint32Array","headerArrayFloat32","versionMajor","versionMinor","maxSectionCount","sectionCount","writeHeaderCountsToBuffer","writeHeaderToBuffer","header","parseSectionHeaders","CompressionLevels","bytesPerColor","sectionHeaderArrayUint16","SectionHeaderSizeBytes","sectionHeaderArrayUint32","sectionHeaderArrayFloat32","sectionHeaders","sectionHeaderBase","sectionHeaderBaseUint16","sectionHeaderBaseUint32","sectionBase","bucketCount","bucketBlockSize","halfBucketBlockSize","bucketStorageSizeBytes","partiallyFilledBucketCount","bucketsMetaDataSizeBytes","bucketsStorageSizeBytes","splatDataStorageSizeBytes","storageSizeBytes","sectionHeader","base","bucketsBase","dataBase","writeSectionHeaderToBuffer","sectionHeadeArrayUint16","sectionHeadeArrayUint32","sectionHeadeArrayFloat32","BucketStorageSizeBytes","writeSectionHeaderSplatCountToBuffer","globalSplatIndexToLocalSplatIndexMap","uint32PerSplat","linkBufferArrays","buildMaps","dataArrayUint32","cumulativeSplatCount","j","updateLoadedCounts","newSectionCount","newSplatCount","updateSectionLoadedCounts","sectionHeaderOffset","generateFromUncompressedSplatArrays","splatArrays","options","sectionBuffers","sectionHeaderBuffers","totalSplatCount","tempRotation","sa","sectionOptions","sectionBlockSize","blockSizeFactor","BucketBlockSize","sectionBucketSize","ceil","bucketSizeFactor","BucketSize","validSplats","targetSplat","alpha","bucketInfo","computeBucketsForUncompressedSplatArray","fullBuckets","partiallyFullBucketLengths","partiallyFullBuckets","map","bucket","buckets","sectionDataSizeBytes","bucketMetaDataSizeBytes","bucketDataBytes","sectionSizeBytes","sectionBuffer","ArrayBuffer","doubleCompressionScaleRange","bucketCenter","bucketCenterDelta","outSplatCount","fromArray","rot","RotationComponentCount","ScaleComponentCount","normalize","w","sub","round","rgba","Uint8ClampedArray","bucketMetaDataArray","pfb","sectionHeaderBuffer","sectionsCumulativeSizeBytes","unifiedBufferSize","unifiedBuffer","currentUnifiedBase","halfBlockSize","dimensions","yBlocks","zBlocks","blockCenter","xBlock","yBlock","zBlock","bucketId","toArray","partiallyFullBucketArray","SplatPartitioner","sectionFilters","groupingParameters","partitionGenerator","partitionUncompressedSplatArray","results","newArrays","s","sectionSplats","sectionFilter","parameters","getStandardPartitioner","partitionSize","centerA","centerB","clampDistance","clampPoint","point","sort","a","centerADist","lengthSq","patitionCount","currentStartSplat","startSplat","splatIndex","blocksSize","splatPartitioner","alphaRemovalThreshold","partitionResults","SplatParser","parseToUncompressedBufferSection","fromSplat","toSplat","fromBuffer","fromOffset","toBuffer","toOffset","outBytesPerCenter","outBytesPerScale","outBytesPerRotation","outBytesPerSplat","inBase","RowSizeBytes","inCenter","inScale","CenterSizeBytes","inColor","ScaleSizeBytes","inRotation","RotationSizeBytes","quat","outBase","parseStandardSplatToUncompressedSplatArray","inBuffer","ColorSizeBytes","Constants","SplatLoader","downLoadLink","stream","onStreamedSectionProgress","optimizeSplatData","streamBufferIn","streamBufferOut","streamSplatBuffer","streamLoadCompleteResolver","lastSectionBytes","streamSectionSizeBytes","StreamingSectionSize","streamLoadPromise","bytesLoaded","percentStr","loadComplete","splatDataOffsetBytes","splatBufferSizeBytes","bytesLoadedSinceLastSection","addedSplatCount","fullBuffer","setFromBuffer","KSplatLoader","checkVersion","streamBuiltSections","onSectionBuilt","streamBuffer","headerBuffer","sectionHeadersBuffer","totalStorageSizeBytes","headerLoaded","headerLoading","sectionHeadersLoaded","sectionHeadersLoading","lastStreamUpdateBytes","totalBytesToDownload","queuedCheckAndLoadSectionsCount","checkAndLoadSectionHeaders","performLoad","totalSectionStorageStorageByes","checkAndLoadSections","baseDataOffset","reachedSections","loadedSplatCount","bytesRequiredToReachSectionSplatData","bytesPastSSectionSplatDataStart","loadedSplatsForSection","finish","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","SceneFormat","Splat","KSplat","Ply","sceneFormatFromPath","endsWith","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","position","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","isFinite","makeSafe","addScaledVector","panOffset","add","performCursorZoom","isOrthographicCamera","radius","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","console","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","quaternion","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","pow","angle","rotateUp","panLeft","v","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","element","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","sqrt","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","container","taskIDGen","elementID","elementIDGen","tasks","spinnerContainerOuter","className","display","spinnerContainerPrimary","spinnerPrimary","classList","messageContainerPrimary","innerHTML","spinnerContainerMin","spinnerMin","messageContainerMin","setMinimized","fadeTransitions","addTask","newTask","removeTask","task","removeAllTasks","setMessageForTask","show","setMessage","hide","visible","setContainer","removeChild","zIndex","minimized","instant","showHideSpinner","displayStyle","fadeTransitionsIndex","out","duration","onComplete","startTime","startOpacity","parseFloat","isNaN","interval","setInterval","elapsed","t","clearInterval","fadeElement","LoadingProgressBar","progressBarContainerOuter","progressBarBox","progressBarBackground","progressBar","setProgress","progress","InfoPanel","infoCells","layout","infoPanelContainer","append","infoPanel","infoTable","layoutEntry","labelCell","spacerCell","infoCell","renderDimensions","cameraPosition","cameraLookAtPosition","cameraUp","meshCursorPosition","currentFPS","splatRenderCount","splatRenderCountPct","lastSortTime","cameraPosString","cla","cameraLookAtString","cameraLookAt","cameraUpString","cursPos","cursorPosString","cursorPosition","fps","renderWindow","renderSplatCount","sortTime","ArrowHelper","Object3D","dir","color","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","_axis","radians","acos","setFromAxisAngle","setColor","source","SceneHelper","threeScene","splatRenderTarget","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","debugRoot","secondaryDebugRoot","updateSplatRenderTargetForRenderDimensions","destroySplatRendertarget","WebGLRenderTarget","format","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","renderTargetCopyMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","destroyRenderTargetCopyObjects","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","destroyMeshCursor","remove","setMeshCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","destroyFocusMarker","updateFocusMarker","viewport","matrixWorld","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","destroyControlPlane","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","createDebugMeshes","createSecondaryDebugMeshes","destroyDebugMeshes","renderOrder","debugMeshRoot","createMesh","sphereMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","t0","t1","Hit","hitClone","Raycaster","raycastAgainstTrueSplatEllipsoid","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","sceneTransform","localRay","tempPoint","splatMesh","outHits","splatTree","getSplatTree","subTrees","subTree","dynamicMode","getSceneTransform","outHitsForSubTree","rootNode","castRayAtSplatTreeNode","forEach","hit","tempColor","Vector4","tempCenter","tempScale","tempHit","scaleEpsilon","uniformScaleMatrix","toSphereSpace","fromSphereSpace","tempRay","node","boundingBox","indexes","splatGlobalIndex","uniformScale","log10","SplatScene","updateTransform","copyTransformData","otherScene","compose","SplatTreeNode","depth","Box3","SplatSubTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","nodesWithIndexes","convertWorkerSubTreeNode","workerSubTreeNode","minVector","maxVector","convertedNode","convertWorkerSubTree","workerSubTree","convertedSubTree","visitLeavesFromNode","visitFunc","splatTreeWorker","createSplatTreeWorker","self","WorkerBox3","containsPoint","WorkerSplatSubTree","addedIndexes","WorkerSplatTreeNode","processSplatTreeNode","tree","indexToCenter","sceneCenters","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","childNode","buildSubTree","centerCount","onmessage","e","process","allCenters","postMessage","createSplatTree","centers","SplatTree","processSplatMesh","filterFunc","onIndexesUpload","onSplatTreeConstruction","Worker","toString","addCentersForScene","splatOffset","addedCount","addBase","diposeSplatTreeWorker","terminate","checkForEarlyExit","disposed","scenes","getScene","transferBuffers","array","workerProcessCenters","countLeaves","leafCount","visitLeaves","WebGLExtensions","gl","getExtension","name","extension","has","init","capabilities","isWebGL2","WebGLCapabilities","maxAnisotropy","getMaxPrecision","precision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","maxPrecision","drawBuffers","logarithmicDepthBuffer","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","MAX_SAMPLES","dummyGeometry","BufferGeometry","dummyMaterial","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","integerBasedDistancesComputation","renderer","splatDataTextures","distancesTransformFeedback","program","centersBuffer","transformIndexesBuffer","outDistancesBuffer","centersLoc","modelViewProjLoc","transformIndexesLoc","transformsLocs","globalSplatIndexToSceneIndexMap","lastBuildSplatCount","lastBuildScenes","lastBuildMaxSplatCount","lastBuildSceneCount","firstRenderTime","finalBuild","webGLUtils","calculatedSceneCenter","maxRadius","visibleRegionRadius","visibleRegionFadeStartRadius","buildMaterial","vertexShaderSource","MaxScenes","fadeInComplete","currentTime","covariancesTexture","centersColorsTexture","focal","basisViewport","debugColor","covariancesTextureSize","centersColorsTextureSize","transformMatrices","alphaTest","NormalBlending","buildGeomtery","baseGeometry","setIndex","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","buildScenes","splatBuffers","sceneOptions","positionArray","rotationArray","scaleArray","createScene","buildSplatIndexMaps","localSplatIndexMap","sceneIndexMap","minAlphas","onSplatTreeIndexesUpload","time","splatColor","sceneIndex","getSceneIndexForSplat","minAlpha","timeEnd","leavesWithVertices","avgSplatCount","nodeCount","nodeSplatCount","log","build","keepSceneTransforms","getTotalMaxSplatCountForSplatBuffers","newScenes","newScene","existingScene","isUpdateBuild","disposeMeshData","indexMaps","setupDistancesComputationTransformFeedback","resetGPUDataFromSplatBuffers","disposeSplatTree","buildSplatTree","splatAlphaRemovalThreshold","disposeTextures","disposeDistancesComputationGPUResources","textureKey","textureContainer","texture","uploadSplatDataToTextures","updateGPUCentersBufferForDistancesComputation","updateGPUTransformIndexesBufferForDistancesComputation","computeTextureUpdateRegion","endSplat","textureWidth","textureHeight","elementsPerTexel","elementsPerSplat","texelsPerSplat","startSplatTexels","startRow","startRowElement","endSplatTexels","endRow","dataStart","dataEnd","updateDataTexture","paddedData","textureDesc","textureProps","bytesPerElement","getContext","updateRegion","size","updateElementCount","updateDataView","updateHeight","dataTexture","glType","convert","glFormat","colorSpace","currentTexture","TEXTURE_BINDING_2D","bindTexture","TEXTURE_2D","__webglTexture","texSubImage2D","checkForMultiSceneUpdateCondition","updateCenterColorsPaddedData","to","from","colors","paddedCenterColors","c","colorsBase","centersBase","centerColorsBase","arr","computeDataTextureSize","elementsPerSplatl","texSize","fillSplatDataArrays","baseData","covariances","covariancesTextureDescriptor","paddedCovariances","covariancesEndSplat","covariance","covariancesTextureProps","properties","covaranceBytesPerElement","centerColorsTextureDescriptor","centerColorsTexture","centerColorsTextureProps","transformIndexesTexDesc","paddedTransformIndexes","paddedTransformIndexesTexture","transformIndexesTextureProps","covTexSize","CovariancesDataType","covariancesTextureType","HalfFloatType","FloatType","covTex","DataTexture","RGFormat","centersColsTexSize","paddedCentersCols","centersColsTex","RGBAIntegerFormat","internalFormat","centerColors","transformIndexesTexSize","transformIndexesTexture","RedIntegerFormat","transformIndexesTextureSize","updateVisibleRegion","avgCenter","scene","maxDistFromSceneCenter","distFromCSceneCenter","updateVisibleRegionFadeDistance","fadeInRate","updateRenderIndexes","globalIndexes","attributes","updateTransforms","updateUniforms","cameraFocalLengthX","cameraFocalLengthY","transforms","getSplatDataTextures","getTotalSplatCountForScenes","getTotalSplatCountForSplatBuffers","getTotalMaxSplatCountForScenes","vao","deleteVertexArray","deleteProgram","deleteShader","disposeDistancesComputationGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","WebGLUtils","currentRenderer","currentMaxSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","errors","getShaderInfoLog","vsSource","currentVao","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","vertexAttribPointer","FLOAT","UNSIGNED_INT","STATIC_READ","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","ArrayType","subBufferOffset","srcCenters","getIntegerCenters","getFloatCenters","bufferSubData","maxArray","STATIC_DRAW","getTransformIndexes","transformIndexes","fillTransformsArray","tempArray","sceneTransformElements","computeDistancesOnGPU","modelViewProjMatrix","outComputedDistances","enable","RASTERIZER_DISCARD","iTempMatrix","getIntegerMatrixArray","iTransform","uniform4i","uniformMatrix4fv","iViewProjMatrix","iViewProj","uniform3i","viewProj","uniform3f","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","checkSync","clientWaitSync","TIMEOUT_EXPIRED","WAIT_FAILED","deleteSync","getBufferSubData","getLocalSplatParameters","globalIndex","paramsObj","returnSceneTransform","getSplatBufferForSplat","localIndex","getSplatLocalIndex","getSceneTransformForSplat","applySceneTransform","forceDestFromZero","destfrom","localDestFrom","padFour","fillCount","floatCenters","intCenters","componentCount","paddedFloatCenters","outTransform","matrixElements","intMatrixArray","functionName","parameterName","sortWorker","wasmInstance","wasmMemory","useSharedMemory","integerBasedSort","indexesToSortOffset","sortedIndexesOffset","transformIndexesOffset","transformsOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","modelViewProjOffset","countsZero","sortedIndexesOut","sortSetupComplete","renderCount","sortCount","splatSortCount","usePrecomputedDistances","copyIndexesToSort","copyPrecomputedDistances","copyTransforms","indexesToSort","precomputedDistances","modelViewProj","sortStartTime","BytesPerInt","BytesPerFloat","DepthMapRange","exports","sortIndexes","sortMessage","sortDone","sortedIndexes","sortEndTime","CENTERS_BYTES_PER_ENTRY","sorterWasmBytes","matrixSize","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForModelViewProjectionMatrix","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","memoryRequiredforTransformIndexes","memoryRequiredforTransforms","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","transformsBuffer","WebXRMode","None","VR","AR","VRButton","createButton","disableButton","cursor","onmouseenter","onmouseleave","onclick","stylizeElement","padding","border","borderRadius","background","font","textAlign","outline","navigator","xr","isSessionSupported","supported","currentSession","onSessionStarted","session","onSessionEnded","setSession","textContent","sessionInit","optionalFeatures","requestSession","end","offerSession","err","showEnterVR","xrSessionIsGranted","exception","isSecureContext","location","replace","textDecoration","registerSessionGrantedListener","test","userAgent","ARButton","domOverlay","overlay","svg","createElementNS","root","setReferenceSpaceType","showStartAR","Viewer","initialCameraPosition","initialCameraLookAt","dropInMode","selfDrivenMode","selfDrivenUpdateFunc","selfDrivenUpdate","useBuiltInControls","rootElement","ignoreDevicePixelRatio","gpuAcceleratedSort","isMobile","sharedMemoryForWorkers","dynamicScene","webXRMode","controls","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","sortWorkerTransforms","runAfterFirstSort","selfDrivenModeRunning","splatRenderingInitialized","raycaster","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","resizeObserver","mouseMoveListener","mouseDownListener","mouseUpListener","keyDownListener","sortPromise","sortPromiseResolver","downloadPromisesToAbort","splatSceneLoadPromise","loadingSpinner","loadingProgressBar","usingExternalCamera","usingExternalRenderer","initialized","disposing","parentElement","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","setPixelRatio","autoClear","setClearColor","setSize","ResizeObserver","observe","Scene","onMouseUp","removeEventHandlers","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","offsetX","offsetY","clickOffset","onMouseClick","checkForFocalPointChange","toNewFocalPoint","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","updateSplatMesh","projectionMatrix","isLoading","Object","isDisposingOrDisposed","clearSplatSceneLoadPromise","setSplatSceneLoadPromise","addSplatScene","streamBuildSections","isStreamable","streamView","splatBufferOptions","orientation","showLoadingUI","loadingTaskId","downloadDone","loadedPercent","loadSplatSceneToSplatBufferStreaming","loadSplatSceneToSplatBufferNonStreaming","firstBuild","addSplatBuffers","loaderStatus","suffix","addSplatScenes","fileCount","percentComplete","onLoadProgress","fileIndex","totalPercent","loadPromises","nativeLoadPromises","abortHandlers","downloadPromise","loadSplatSceneToSplatBuffer","loadingPromise","all","finally","loadPromise","onDownloadComplete","onException","clearDownloadPromise","onSectionDownloaded","firstStreamedSectionBuildResolver","firstStreamedSectionBuildRejecter","fullBuildResolver","fullBuildRejecter","steamedSectionBuildCount","streamedSectionBuilding","queuedStreamedSectionBuilds","checkAndBuildStreamedSections","queuedBuild","shift","fullDownloadPromise","firstStreamedSectionBuildPromise","resolver","rejecter","loadCount","splatProcessingTaskId","showLoadingSpinnerForSplatTreeBuild","forceSort","addSplatBuffersToMesh","disposeSortWorker","setupSortWorker","allSplatBuffers","allSplatBufferOptions","splatOptimizingTaskId","finished","frustumCulled","DistancesArrayType","worker","sorterWasmBinaryString","atob","charCodeAt","createSortWorker","sortCanceled","start","setAnimationLoop","requestFrameId","requestAnimationFrame","stop","cancelAnimationFrame","waitPromises","promisesToAbort","promiseKey","downloadPromiseToAbort","disposePromise","unobserve","toAbort","render","savedAuoClear","hasRenderables","updateForDropInMode","updateSplatSort","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfoPanel","updateControlPlane","lastCalcTime","frameCount","lastRendererSize","currentRendererSize","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","lerp","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","mvpMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedSorts","partialSorts","angleThreshold","sortFractions","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","shouldSortAll","gatherSceneNodesForSort","partialSort","sortFraction","nodeRenderList","allSplatsSortBuffer","tempVectorYZ","tempVectorXZ","tempVector","modelView","baseModelView","tempMax","nodeSize","gatherAllNodes","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","getSplatMesh","getSplatScene","DropInViewer","Group","viewer","callbackMesh","createCallbackMesh","onBeforeRender","colorWrite","mesh"],"mappings":"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"}